config/lxdialog/menubox.c:143:32: style:inconclusive: Function 'dialog_menu' argument 6 names different: declaration 'choice' definition 'current'. [funcArgNamesDifferent]
  int menu_height, const char *current, int item_no,
                               ^
config/lxdialog/dialog.h:137:32: note: Function 'dialog_menu' argument 6 names different: declaration 'choice' definition 'current'.
  int menu_height, const char *choice, int item_no,
                               ^
config/lxdialog/menubox.c:143:32: note: Function 'dialog_menu' argument 6 names different: declaration 'choice' definition 'current'.
  int menu_height, const char *current, int item_no,
                               ^
config/lxdialog/msgbox.c:31:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i, x, y, key = 0;
        ^
config/lxdialog/util.c:159:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
config/lxdialog/util.c:191:33: style: The scope of the variable 'word' can be reduced. [variableScope]
    char tempstr[MAX_LEN + 1], *word, *sp, *sp2;
                                ^
config/lxdialog/util.c:191:45: style: The scope of the variable 'sp2' can be reduced. [variableScope]
    char tempstr[MAX_LEN + 1], *word, *sp, *sp2;
                                            ^
config/lxdialog/util.c:192:9: style: The scope of the variable 'newl' can be reduced. [variableScope]
    int newl, cur_x, cur_y, i, prompt_len, room, wlen;
        ^
config/lxdialog/util.c:192:15: style: The scope of the variable 'cur_x' can be reduced. [variableScope]
    int newl, cur_x, cur_y, i, prompt_len, room, wlen;
              ^
config/lxdialog/util.c:192:22: style: The scope of the variable 'cur_y' can be reduced. [variableScope]
    int newl, cur_x, cur_y, i, prompt_len, room, wlen;
                     ^
config/lxdialog/util.c:192:44: style: The scope of the variable 'room' can be reduced. [variableScope]
    int newl, cur_x, cur_y, i, prompt_len, room, wlen;
                                           ^
config/lxdialog/util.c:192:50: style: The scope of the variable 'wlen' can be reduced. [variableScope]
    int newl, cur_x, cur_y, i, prompt_len, room, wlen;
                                                 ^
config/lxdialog/util.c:310:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
config/lxdialog/util.c:331:26: style: The scope of the variable 'c' can be reduced. [variableScope]
    int i, in_paren = 0, c;
                         ^
elks/arch/i86/drivers/block/bioshd.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 30 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elks/arch/i86/drivers/block/bioshd.c:830:9: style: Condition '!(_fd_count+_hd_count)' is always true [knownConditionTrueFalse]
    if (!(_fd_count + _hd_count)) return 0;
        ^
elks/arch/i86/drivers/block/bioshd.c:610:21: style: Variable 'drivep->cylinders' is reassigned a value before the old one has been used. [redundantAssignment]
  drivep->cylinders = (media == 0xFD)? 40: 80;
                    ^
elks/arch/i86/drivers/block/bioshd.c:604:21: note: drivep->cylinders is assigned
  drivep->cylinders =
                    ^
elks/arch/i86/drivers/block/bioshd.c:610:21: note: drivep->cylinders is overwritten
  drivep->cylinders = (media == 0xFD)? 40: 80;
                    ^
elks/arch/i86/drivers/block/directfd.c:1434:24: portability: Assigning a pointer to an integer is not portable. [AssignmentAddressToInteger]
    blk_size[MAJOR_NR] = floppy_sizes;
                       ^
elks/arch/i86/drivers/block/directfd.c:461:15: warning: Either the condition '!bh' is redundant or there is possible null pointer dereference: bh. [nullPointerRedundantCheck]
    if (MAJOR(bh->b_dev) != MAJOR_NR) {
              ^
elks/arch/i86/drivers/block/directfd.c:478:9: note: Assuming that condition '!bh' is not redundant
    if (!bh)
        ^
elks/arch/i86/drivers/block/directfd.c:461:15: note: Null pointer dereference
    if (MAJOR(bh->b_dev) != MAJOR_NR) {
              ^
elks/arch/i86/drivers/block/directfd.c:535:19: style: The scope of the variable 'status' can be reduced. [variableScope]
    unsigned char status;
                  ^
elks/arch/i86/drivers/block/directfd.c:553:25: style: The scope of the variable 'status' can be reduced. [variableScope]
    int i = 0, counter, status;
                        ^
elks/arch/i86/drivers/block/directfd.c:675:11: style: The scope of the variable 'buffer_area' can be reduced. [variableScope]
    char *buffer_area;
          ^
elks/arch/i86/drivers/block/directfd.c:1303:27: style: The scope of the variable 'base' can be reduced. [variableScope]
    struct floppy_struct *base;
                          ^
elks/arch/i86/drivers/block/directfd.c:501:14: style: Variable 'dma_code' is assigned a value that is never used. [unreadVariable]
    dma_code = DMA_WRITE;
             ^
elks/arch/i86/drivers/block/directfd.c:503:11: style: Variable 'dma_code' is assigned a value that is never used. [unreadVariable]
 dma_code = DMA_READ;
          ^
elks/arch/i86/drivers/block/directfd.c:923:9: style: Unused variable: i [unusedVariable]
    int i;
        ^
elks/arch/i86/drivers/block/directfd.c:1173:9: style: Unused variable: i [unusedVariable]
    int i, drive, cnt, okay;
        ^
elks/arch/i86/drivers/block/directfd.c:1173:19: style: Unused variable: cnt [unusedVariable]
    int i, drive, cnt, okay;
                  ^
elks/arch/i86/drivers/block/directfd.c:1067:0: information: Skipping configuration 'DEVICE_TIMEOUT' since the value of 'DEVICE_TIMEOUT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
     CLEAR_INTR;
^
elks/arch/i86/drivers/block/directfd.c:1401:0: information: Skipping configuration 'DEVICE_TIMEOUT' since the value of 'DEVICE_TIMEOUT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    CLEAR_INTR;   /* ignore only once */
^
elks/arch/i86/drivers/block/directhd.c:554:4: style: Statements following return, break, continue, goto or throw will never be executed. [unreachableCode]
   end_request(0);
   ^
elks/arch/i86/drivers/block/directhd.c:600:4: style: Statements following return, break, continue, goto or throw will never be executed. [unreachableCode]
   end_request(0);
   ^
elks/arch/i86/drivers/block/directhd.c:247:12: style: Unused variable: j [unusedVariable]
    int i, j, hdcount = 0, drive;
           ^
elks/arch/i86/drivers/block/directhd.c:458:19: style: Unused variable: i [unusedVariable]
    unsigned char i;  /* 0 .. (sectors per track - 1) .. 62 or less */
                  ^
elks/arch/i86/drivers/block/directhd.c:459:19: style: Unused variable: j [unusedVariable]
    unsigned char j;  /* 0 .. 255 */
                  ^
elks/arch/i86/drivers/block/genhd.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elks/arch/i86/drivers/block/blk.h:154:0: information: Skipping configuration 'ATDISK;MAJOR_NR' since the value of 'MAJOR_NR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    req = CURRENT;
^
elks/arch/i86/drivers/block/blk.h:193:0: information: Skipping configuration 'ATDISK;MAJOR_NR' since the value of 'MAJOR_NR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    CURRENT = req->rq_next;
^
elks/arch/i86/drivers/block/blk.h:154:0: information: Skipping configuration 'BIOSDISK;MAJOR_NR' since the value of 'MAJOR_NR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    req = CURRENT;
^
elks/arch/i86/drivers/block/blk.h:193:0: information: Skipping configuration 'BIOSDISK;MAJOR_NR' since the value of 'MAJOR_NR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    CURRENT = req->rq_next;
^
elks/arch/i86/drivers/block/blk.h:154:0: information: Skipping configuration 'BLOAT_FS;MAJOR_NR' since the value of 'MAJOR_NR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    req = CURRENT;
^
elks/arch/i86/drivers/block/blk.h:193:0: information: Skipping configuration 'BLOAT_FS;MAJOR_NR' since the value of 'MAJOR_NR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    CURRENT = req->rq_next;
^
elks/arch/i86/drivers/block/blk.h:154:0: information: Skipping configuration 'BLOAT_FS;MAJOR_NR;MULTI_BH' since the value of 'MAJOR_NR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    req = CURRENT;
^
elks/arch/i86/drivers/block/blk.h:193:0: information: Skipping configuration 'BLOAT_FS;MAJOR_NR;MULTI_BH' since the value of 'MAJOR_NR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    CURRENT = req->rq_next;
^
elks/arch/i86/drivers/block/genhd.c:303:18: style: Variable 'first_sector' is assigned a value that is never used. [unreadVariable]
    first_sector = hd->part[MINOR(dev)].start_sect;
                 ^
elks/arch/i86/drivers/block/blk.h:154:0: information: Skipping configuration 'FLOPPYDISK;MAJOR_NR' since the value of 'MAJOR_NR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    req = CURRENT;
^
elks/arch/i86/drivers/block/blk.h:193:0: information: Skipping configuration 'FLOPPYDISK;MAJOR_NR' since the value of 'MAJOR_NR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    CURRENT = req->rq_next;
^
elks/arch/i86/drivers/block/blk.h:154:0: information: Skipping configuration 'MAJOR_NR' since the value of 'MAJOR_NR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    req = CURRENT;
^
elks/arch/i86/drivers/block/blk.h:193:0: information: Skipping configuration 'MAJOR_NR' since the value of 'MAJOR_NR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    CURRENT = req->rq_next;
^
elks/arch/i86/drivers/block/blk.h:154:0: information: Skipping configuration 'MAJOR_NR;METADISK' since the value of 'MAJOR_NR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    req = CURRENT;
^
elks/arch/i86/drivers/block/blk.h:193:0: information: Skipping configuration 'MAJOR_NR;METADISK' since the value of 'MAJOR_NR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    CURRENT = req->rq_next;
^
elks/arch/i86/drivers/block/blk.h:154:0: information: Skipping configuration 'MAJOR_NR;MULTI_BH' since the value of 'MAJOR_NR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    req = CURRENT;
^
elks/arch/i86/drivers/block/blk.h:193:0: information: Skipping configuration 'MAJOR_NR;MULTI_BH' since the value of 'MAJOR_NR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    CURRENT = req->rq_next;
^
elks/arch/i86/drivers/block/blk.h:154:0: information: Skipping configuration 'MAJOR_NR;RAMDISK' since the value of 'MAJOR_NR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    req = CURRENT;
^
elks/arch/i86/drivers/block/blk.h:193:0: information: Skipping configuration 'MAJOR_NR;RAMDISK' since the value of 'MAJOR_NR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    CURRENT = req->rq_next;
^
elks/arch/i86/drivers/block/blk.h:154:0: information: Skipping configuration 'MAJOR_NR;SSDDISK' since the value of 'MAJOR_NR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    req = CURRENT;
^
elks/arch/i86/drivers/block/blk.h:193:0: information: Skipping configuration 'MAJOR_NR;SSDDISK' since the value of 'MAJOR_NR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    CURRENT = req->rq_next;
^
elks/arch/i86/drivers/block/ll_rw_blk.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elks/arch/i86/drivers/block/rd.c:102:12: style: The scope of the variable 'j' can be reduced. [variableScope]
    int i, j;
           ^
elks/arch/i86/drivers/block/rd.c:130:9: style: The scope of the variable 'j' can be reduced. [variableScope]
    int j, k, target = DEVICE_NR(inode->i_rdev);
        ^
elks/arch/i86/drivers/block/rd.c:210:9: style: The scope of the variable 'target' can be reduced. [variableScope]
    int target;
        ^
elks/arch/i86/drivers/block/rd.c:211:13: style: The scope of the variable 'buff' can be reduced. [variableScope]
    byte_t *buff;
            ^
elks/arch/i86/drivers/block/rd.c:56:0: information: Skipping configuration 'CONFIG_RAMDISK_SEGMENT' since the value of 'CONFIG_RAMDISK_SEGMENT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    {CONFIG_RAMDISK_SEGMENT, 0,  -1, CONFIG_RAMDISK_SECTORS},
^
elks/arch/i86/drivers/block/rd.c:56:0: information: Skipping configuration 'CONFIG_RAMDISK_SEGMENT;DEBUG' since the value of 'CONFIG_RAMDISK_SEGMENT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    {CONFIG_RAMDISK_SEGMENT, 0,  -1, CONFIG_RAMDISK_SECTORS},
^
elks/arch/i86/drivers/block/ssd-sd.c:279:13: style: The scope of the variable 'rx' can be reduced. [variableScope]
    uint8_t rx;
            ^
elks/arch/i86/drivers/block/ssd-sd.c:337:29: style: Variable 'csd_read_bl_len' is assigned a value that is never used. [unreadVariable]
    uint8_t csd_read_bl_len = 0;
                            ^
elks/arch/i86/drivers/block/ssd-sd.c:338:29: style: Variable 'csd_c_size_mult' is assigned a value that is never used. [unreadVariable]
    uint8_t csd_c_size_mult = 0;
                            ^
elks/arch/i86/drivers/char/conio-8018x.c:34:24: style:inconclusive: Function 'conio_putc' argument 1 names different: declaration 'ch' definition 'c'. [funcArgNamesDifferent]
void conio_putc(byte_t c)
                       ^
elks/arch/i86/drivers/char/conio.h:13:24: note: Function 'conio_putc' argument 1 names different: declaration 'ch' definition 'c'.
void conio_putc(byte_t ch);
                       ^
elks/arch/i86/drivers/char/conio-8018x.c:34:24: note: Function 'conio_putc' argument 1 names different: declaration 'ch' definition 'c'.
void conio_putc(byte_t c)
                       ^
elks/arch/i86/drivers/char/kbd-poll-pc98.c:23:20: style: Variable 'extra' is assigned a value that is never used. [unreadVariable]
    int dav, extra = 0;
                   ^
elks/arch/i86/drivers/char/kbd-poll-pc98.c:41:16: style: Variable 'extra' is assigned a value that is never used. [unreadVariable]
         extra = '~';
               ^
elks/arch/i86/drivers/char/kbd-poll-pc98.c:45:16: style: Variable 'extra' is assigned a value that is never used. [unreadVariable]
         extra = '~';
               ^
elks/arch/i86/drivers/char/kbd-poll.c:51:31: style: Variable 'extra' is assigned a value that is never used. [unreadVariable]
  case 0x49: dav = '5'; extra = '~'; break; /* pgup*/
                              ^
elks/arch/i86/drivers/char/kbd-poll.c:52:31: style: Variable 'extra' is assigned a value that is never used. [unreadVariable]
  case 0x51: dav = '6'; extra = '~'; break; /* pgdn*/
                              ^
elks/arch/i86/drivers/char/ntty.c:289:9: style: The scope of the variable 's' can be reduced. [variableScope]
    int s;
        ^
elks/arch/i86/drivers/char/pty.c:82:6: style: The scope of the variable 'err' can be reduced. [variableScope]
 int err;
     ^
elks/arch/i86/drivers/char/pty.c:111:6: style: The scope of the variable 'ret' can be reduced. [variableScope]
 int ret;
     ^
elks/arch/i86/drivers/char/serial-pc98.c:256:6: style: Condition '!rs_init_done' is always true [knownConditionTrueFalse]
 if (!rs_init_done)
     ^
elks/arch/i86/drivers/net/el3.c:531:8: style: The scope of the variable 'rx_status' can be reduced. [variableScope]
 short rx_status;
       ^
elks/arch/i86/drivers/net/el3.c:707:14: style: Variable 'net_diag' is assigned a value that is never used. [unreadVariable]
    net_diag = (net_diag & ~FD_ENABLE); /* disable full duplex */
             ^
elks/arch/i86/drivers/net/ne2k.c:470:7: style: Variable 'err' is assigned a value that is never used. [unreadVariable]
  err = j = k = 0;
      ^
elks/arch/i86/drivers/net/ne2k.c:462:8: style: Variable 'err' is assigned a value that is never used. [unreadVariable]
   err = -1;
       ^
elks/arch/i86/drivers/net/wd.c:242:11: style: The scope of the variable 'u' can be reduced. [variableScope]
 unsigned u;
          ^
elks/arch/i86/drivers/net/wd.c:243:29: style: The scope of the variable 'rxhdr' can be reduced. [variableScope]
 const e8390_pkt_hdr __far *rxhdr;
                            ^
elks/arch/i86/drivers/net/wd.c:497:9: error: Uninitialized variable: res [uninitvar]
 return res;
        ^
elks/arch/i86/kernel/system.c:57:0: information: Skipping configuration 'CONFIG_RAMDISK_SEGMENT' since the value of 'CONFIG_RAMDISK_SEGMENT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 if (CONFIG_RAMDISK_SEGMENT <= *end) {
^
elks/arch/i86/kernel/system.c:45:0: information: Skipping configuration 'SETUP_HEAPSIZE' since the value of 'SETUP_HEAPSIZE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 if ((SETUP_HEAPSIZE >> 4) < heapsegs)  /* allow if less than max*/
^
elks/arch/i86/kernel/system.c:46:0: information: Skipping configuration 'SETUP_HEAPSIZE' since the value of 'SETUP_HEAPSIZE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  heapsegs = SETUP_HEAPSIZE >> 4;
^
elks/arch/i86/kernel/system.c:71:0: information: Skipping configuration 'SYS_CAPS' since the value of 'SYS_CAPS' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 sys_caps = SYS_CAPS; /* custom system capabilities */
^
elks/arch/i86/mm/xms.c:126:12: portability: 'dst_off' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
   dst_off += count-1;
           ^
elks/arch/i86/mm/xms.c:127:12: portability: 'src_off' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
   src_off += count-1;
           ^
elks/arch/i86/tools/build.c:81:5: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
    l >>= 8;
    ^
elks/arch/i86/tools/build.c:92:5: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
    l >>= 8;
    ^
elks/arch/i86/tools/build.c:81:7: style: Variable 'l' is assigned a value that is never used. [unreadVariable]
    l >>= 8;
      ^
elks/arch/i86/tools/build.c:92:7: style: Variable 'l' is assigned a value that is never used. [unreadVariable]
    l >>= 8;
      ^
elks/arch/i86/tools/imgconv.c:223:2: warning: %lx in format string (no. 2) requires 'unsigned long' but the argument type is 'unsigned int'. [invalidPrintfArgType_uint]
 printf("%s info:\nText 0x%04lx, Data 0x%04lx, BSS 0x%04lx\n",
 ^
elks/arch/i86/tools/imgconv.c:223:2: warning: %lx in format string (no. 3) requires 'unsigned long' but the argument type is 'unsigned int'. [invalidPrintfArgType_uint]
 printf("%s info:\nText 0x%04lx, Data 0x%04lx, BSS 0x%04lx\n",
 ^
elks/arch/i86/tools/imgconv.c:223:2: warning: %lx in format string (no. 4) requires 'unsigned long' but the argument type is 'unsigned int'. [invalidPrintfArgType_uint]
 printf("%s info:\nText 0x%04lx, Data 0x%04lx, BSS 0x%04lx\n",
 ^
elks/arch/i86/tools/imgdump.c:226:5: warning: %ld in format string (no. 2) requires 'long' but the argument type is 'unsigned long'. [invalidPrintfArgType_sint]
    printf("%s is %ld (0x%lx) bytes in size\n", filename, filesize, filesize);
    ^
elks/arch/i86/tools/imgdump.c:230:2: warning: %ld in format string (no. 1) requires 'long' but the argument type is 'unsigned long'. [invalidPrintfArgType_sint]
 fprintf(stderr,
 ^
elks/arch/i86/tools/imgdump.c:241:2: warning: %ld in format string (no. 1) requires 'long' but the argument type is 'unsigned long'. [invalidPrintfArgType_sint]
 fprintf(stderr,
 ^
elks/arch/i86/tools/imgdump.c:241:2: warning: %ld in format string (no. 3) requires 'long' but the argument type is 'unsigned long'. [invalidPrintfArgType_sint]
 fprintf(stderr,
 ^
elks/arch/i86/tools/imgdump.c:66:12: style: The scope of the variable 'upto16' can be reduced. [variableScope]
    int i, upto16, x;
           ^
elks/arch/i86/tools/imgdump.c:254:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
elks/arch/i86/tools/makelist.c:20:30: style: The scope of the variable 'end_p' can be reduced. [variableScope]
    char buf[512], *name_p, *end_p, *str_p;
                             ^
elks/arch/i86/tools/makelist.c:67:20: style: The scope of the variable 'cp' can be reduced. [variableScope]
    char buf[12], *cp;
                   ^
elks/arch/i86/tools/mkbootloader.c:213:12: style: Condition 'l==1000' is always false [knownConditionTrueFalse]
     if (l == 1000)
           ^
elks/arch/i86/tools/mkbootloader.c:211:6: note: Assuming condition 'l' is true
 if (l) {
     ^
elks/arch/i86/tools/mkbootloader.c:213:12: note: Condition 'l==1000' is always false
     if (l == 1000)
           ^
elks/arch/i86/tools/mkbootloader.c:86:2: warning: %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed int *'. [invalidScanfArgType_int]
 sscanf(arg[i + 1], "%x", &init);
 ^
elks/arch/i86/tools/mkbootloader.c:92:2: warning: %d in format string (no. 1) requires 'int *' but the argument type is 'unsigned int *'. [invalidScanfArgType_int]
 sscanf(arg[i + 2], "%d", &check.end);
 ^
elks/arch/i86/tools/mkbootloader.c:294:8: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
       printf
       ^
elks/arch/i86/tools/writedisk.c:14:32: style: The scope of the variable 'low_address' can be reduced. [variableScope]
    unsigned int high_address, low_address;
                               ^
elks/arch/i86/tools/writedisk.c:15:25: style: The scope of the variable 'not_done' can be reduced. [variableScope]
    unsigned char data, not_done;
                        ^
elks/arch/i86/tools/wrt_disk.c:187:17: error: Uninitialized variable: data [uninitvar]
     error('1', data, result);
                ^
elks/fs/block_dev.c:181:34: style: The scope of the variable 'bh' can be reduced. [variableScope]
    register struct buffer_head *bh;
                                 ^
elks/fs/block_dev.c:182:12: style: The scope of the variable 'chars' can be reduced. [variableScope]
    size_t chars, offset;
           ^
elks/fs/block_dev.c:182:19: style: The scope of the variable 'offset' can be reduced. [variableScope]
    size_t chars, offset;
                  ^
elks/fs/exec.c:79:16: style: Variable 'retval' is assigned a value that is never used. [unreadVariable]
    int retval = 0;
               ^
elks/fs/inode.c:400:28: style: The scope of the variable 'inode' can be reduced. [variableScope]
    register struct inode *inode;
                           ^
elks/fs/minix/bitmap.c:64:34: style: The scope of the variable 'bh' can be reduced. [variableScope]
    register struct buffer_head *bh;
                                 ^
elks/fs/minix/bitmap.c:66:18: style: The scope of the variable 'zone' can be reduced. [variableScope]
    unsigned int zone;
                 ^
elks/fs/minix/dir.c:68:34: style: The scope of the variable 'bh' can be reduced. [variableScope]
    register struct buffer_head *bh;
                                 ^
elks/fs/minix/dir.c:71:20: style: The scope of the variable 'offset' can be reduced. [variableScope]
    unsigned short offset;
                   ^
elks/fs/minix/inode.c:352:26: style: The scope of the variable 'tabc' can be reduced. [variableScope]
    static unsigned char tabc[] = {
                         ^
elks/fs/minix/inode.c:375:20: style: The scope of the variable 'block' can be reduced. [variableScope]
    unsigned short block;
                   ^
elks/fs/minix/namei.c:129:6: warning: Either the condition 'bh' is redundant or there is possible null pointer dereference: bh. [nullPointerRedundantCheck]
     bh->b_mapcount);
     ^
elks/fs/minix/namei.c:130:10: note: Assuming that condition 'bh' is not redundant
     if (bh) {
         ^
elks/fs/minix/namei.c:129:6: note: Null pointer dereference
     bh->b_mapcount);
     ^
elks/fs/minix/namei.c:118:25: style: The scope of the variable 'bh' can be reduced. [variableScope]
    struct buffer_head *bh;
                        ^
elks/fs/minix/symlink.c:70:34: style: The scope of the variable 'bh' can be reduced. [variableScope]
    register struct buffer_head *bh;
                                 ^
elks/fs/minix/truncate.c:178:9: style: The scope of the variable 'retry' can be reduced. [variableScope]
    int retry;
        ^
elks/fs/msdos/fat.c:89:18: error: Uninitialized variable: p_first [uninitvar]
    *p_first = (*p_first & 0xf) | (new_value << 4);
                 ^
elks/fs/msdos/fat.c:94:17: error: Uninitialized variable: p_last [uninitvar]
    *p_last = (*p_last & 0xf0) | (new_value >> 8);
                ^
elks/fs/msdos/file.c:65:14: style: The scope of the variable 'offset' can be reduced. [variableScope]
 size_t left,offset,size;
             ^
elks/fs/msdos/file.c:65:21: style: The scope of the variable 'size' can be reduced. [variableScope]
 size_t left,offset,size;
                    ^
elks/fs/msdos/file.c:67:22: style: The scope of the variable 'bh' can be reduced. [variableScope]
 struct buffer_head *bh;
                     ^
elks/fs/msdos/file.c:100:6: style: The scope of the variable 'offset' can be reduced. [variableScope]
 int offset,size,written;
     ^
elks/fs/msdos/file.c:100:18: style: The scope of the variable 'written' can be reduced. [variableScope]
 int offset,size,written;
                 ^
elks/fs/msdos/file.c:103:22: style: The scope of the variable 'bh' can be reduced. [variableScope]
 struct buffer_head *bh;
                     ^
elks/fs/msdos/file.c:79:44: style: Checking if unsigned expression 'count' is less than zero. [unsignedLessThanZero]
 if (filp->f_pos >= inode->i_size || count <= 0) return 0;
                                           ^
elks/fs/msdos/file.c:120:12: style: Checking if unsigned expression 'count' is less than zero. [unsignedLessThanZero]
 if (count <= 0) return 0;
           ^
elks/fs/msdos/inode.c:279:12: style: Variable 'fatsz' is assigned a value that is never used. [unreadVariable]
 int fatsz = MSDOS_SB(inode->i_sb)->fat_bits;
           ^
elks/fs/msdos/misc.c:57:12: style: Variable 'fatsz' is assigned a value that is never used. [unreadVariable]
 int fatsz = sb->fat_bits;
           ^
elks/fs/msdos/namei.c:181:11: style: Variable 'res' is assigned a value that is never used. [unreadVariable]
 if ((res = msdos_scan(dir,NULL,&bh,&de,&ino)) < 0) {
          ^
elks/fs/msdos/namei.c:98:13: style: Variable 'nocase' is assigned a value that is never used. [unreadVariable]
 int nocase = 0;
            ^
elks/fs/namei.c:174:12: style: The scope of the variable 'len' can be reduced. [variableScope]
    size_t len;
           ^
elks/fs/namei.c:176:19: style: The scope of the variable 'c' can be reduced. [variableScope]
    unsigned char c;
                  ^
elks/fs/namei.c:275:28: style: The scope of the variable 'inode' can be reduced. [variableScope]
    register struct inode *inode;
                           ^
elks/fs/namei.c:414:39: style: The scope of the variable 'iop' can be reduced. [variableScope]
    register struct inode_operations *iop;
                                      ^
elks/fs/namei.c:420:11: style: The scope of the variable 'op' can be reduced. [variableScope]
    int (*op) ();
          ^
elks/fs/namei.c:490:39: style: The scope of the variable 'iop' can be reduced. [variableScope]
    register struct inode_operations *iop;
                                      ^
elks/fs/open.c:417:27: style: The scope of the variable 'filp' can be reduced. [variableScope]
    register struct file *filp;
                          ^
elks/fs/pipe.c:49:27: style: The scope of the variable 'filp' can be reduced. [variableScope]
    register struct file *filp;
                          ^
elks/fs/read_write.c:86:38: style: The scope of the variable 'fop' can be reduced. [variableScope]
    register struct file_operations *fop;
                                     ^
elks/fs/romfs/romfs.c:55:9: style: The scope of the variable 'len' can be reduced. [variableScope]
 size_t len;
        ^
elks/fs/romfs/romfs.c:166:9: style: The scope of the variable 'pds' can be reduced. [variableScope]
 seg_t *pds;
        ^
elks/fs/select.c:206:27: style: Variable 'error' is reassigned a value before the old one has been used. [redundantAssignment]
    if ((n < 0) || (error = get_fd_set(inp, &in)) ||
                          ^
elks/fs/select.c:205:11: note: error is assigned
    error = -EINVAL;
          ^
elks/fs/select.c:206:27: note: error is overwritten
    if ((n < 0) || (error = get_fd_set(inp, &in)) ||
                          ^
elks/fs/select.c:56:22: style: The scope of the variable 'p' can be reduced. [variableScope]
 struct wait_queue **p;
                     ^
elks/fs/select.c:74:21: style: The scope of the variable 'p' can be reduced. [variableScope]
 struct wait_queue *p;
                    ^
elks/fs/stat.c:128:13: style: Redundant initialization for 'error'. The initialized value is overwritten before it is read. [redundantInitialization]
 && !(error = verify_area(VERIFY_WRITE, buf, bufsiz))
            ^
elks/fs/stat.c:125:15: note: error is initialized
    int error = -EINVAL;
              ^
elks/fs/stat.c:128:13: note: error is overwritten
 && !(error = verify_area(VERIFY_WRITE, buf, bufsiz))
            ^
elks/fs/stat.c:124:39: style: The scope of the variable 'iop' can be reduced. [variableScope]
    register struct inode_operations *iop;
                                      ^
elks/fs/super.c:126:39: style: The scope of the variable 'sop' can be reduced. [variableScope]
    register struct super_operations *sop;
                                      ^
elks/fs/super.c:214:39: style: The scope of the variable 'sop' can be reduced. [variableScope]
    register struct super_operations *sop;
                                      ^
elks/fs/super.c:465:3: style: Label 'retry_floppy' is not used. There is #if in function body so the label might be used in code that is removed by the preprocessor. [unusedLabelConfiguration]
  retry_floppy:
  ^
elks/init/main.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elks/init/main.c:302:12: style: The scope of the variable 'm' can be reduced. [variableScope]
 char *l, *m, c;
           ^
elks/init/main.c:302:15: style: The scope of the variable 'c' can be reduced. [variableScope]
 char *l, *m, c;
              ^
elks/kernel/exit.c:44:6: style: The scope of the variable 'waitagain' can be reduced. [variableScope]
 int waitagain;
     ^
elks/kernel/fork.c:72:18: style: The scope of the variable 'filp' can be reduced. [variableScope]
    struct file *filp;
                 ^
elks/kernel/printk.c:108:9: style: The scope of the variable 'c' can be reduced. [variableScope]
    int c, vch, i;
        ^
elks/kernel/signal.c:109:34: style: The scope of the variable 'p' can be reduced. [variableScope]
    register struct task_struct *p;
                                 ^
elks/kernel/signal.c:110:16: style: The scope of the variable 'err' can be reduced. [variableScope]
    int count, err, retval;
               ^
elks/net/ipv4/af_inet.c:329:9: style: The scope of the variable 'ret' can be reduced. [variableScope]
    int ret, usize, count;
        ^
elks/net/ipv4/af_inet.c:329:14: style: The scope of the variable 'usize' can be reduced. [variableScope]
    int ret, usize, count;
             ^
elks/net/nano/af_nano.c:460:29: style: The scope of the variable 'upd' can be reduced. [variableScope]
    struct nano_proto_data *upd, *peerupd;
                            ^
elks/net/nano/af_nano.c:460:35: style: The scope of the variable 'peerupd' can be reduced. [variableScope]
    struct nano_proto_data *upd, *peerupd;
                                  ^
elks/net/socket.c:42:13: warning: Identical inner 'return' condition is always true. [identicalInnerCondition]
     return *props;
            ^
elks/net/socket.c:41:14: note: outer condition: *props!=NULL
 if ((*props != NULL) && ((*props)->family == family))
             ^
elks/net/socket.c:42:13: note: identical inner condition: *props
     return *props;
            ^
elks/net/socket.c:284:19: style: Variable 'oldstate' is assigned a value that is never used. [unreadVariable]
    if ((oldstate = sock->state) != SS_UNCONNECTED)
                  ^
elks/net/unix/af_unix.c:472:29: style: The scope of the variable 'upd' can be reduced. [variableScope]
    struct unix_proto_data *upd, *peerupd;
                            ^
elks/net/unix/af_unix.c:472:35: style: The scope of the variable 'peerupd' can be reduced. [variableScope]
    struct unix_proto_data *upd, *peerupd;
                                  ^
elks/tools/elf2elks/elf2elks.c:597:13: warning: %x in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed int *'. [invalidScanfArgType_int]
        if (sscanf(buf, "%x %c %s", &addr, &type, name) == 3) {
            ^
elks/tools/elf2elks/elf2elks.c:597:13: warning: sscanf() without field width limits can crash with huge input data. [invalidscanf]
        if (sscanf(buf, "%x %c %s", &addr, &type, name) == 3) {
            ^
elks/tools/elf2elks/elf2elks.c:667:11: style: The scope of the variable 'r' can be reduced. [variableScope]
  ssize_t r;
          ^
elks/tools/elf2elks/elf2elks.c:978:7: style: Local variable 'ifd' shadows outer variable [shadowVariable]
  int ifd, n;
      ^
elks/tools/elf2elks/elf2elks.c:95:12: note: Shadowed declaration
static int ifd = -1, ofd = -1;
           ^
elks/tools/elf2elks/elf2elks.c:978:7: note: Shadow variable
  int ifd, n;
      ^
elks/tools/elf2elks/elf2elks.c:42:11: style: struct member 'minix_exec_hdr::reserved1' is never used. [unusedStructMember]
  uint8_t reserved1;
          ^
elks/tools/elf2elks/elf2elks.c:57:12: style: struct member 'elks_supl_hdr_1::tbase' is never used. [unusedStructMember]
  uint32_t tbase;
           ^
elks/tools/elf2elks/elf2elks.c:58:12: style: struct member 'elks_supl_hdr_1::dbase' is never used. [unusedStructMember]
  uint32_t dbase;
           ^
elks/tools/elf2elks/elf2elks.c:65:12: style: struct member 'elks_supl_hdr_2::reserved2' is never used. [unusedStructMember]
  uint32_t reserved2, reserved3;
           ^
elks/tools/elf2elks/elf2elks.c:65:23: style: struct member 'elks_supl_hdr_2::reserved3' is never used. [unusedStructMember]
  uint32_t reserved2, reserved3;
                      ^
elks/tools/elf2elks/elf2elks.c:372:0: information: Skipping configuration 'O_BINARY' since the value of 'O_BINARY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  ifd = open (file_name, O_RDONLY | O_BINARY);
^
elks/tools/elf2elks/elf2elks.c:658:0: information: Skipping configuration 'O_BINARY' since the value of 'O_BINARY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  setmode (ofd, O_BINARY);
^
elks/tools/elks-compress/elks-compress.c:34:9: style: Variable 'n' is assigned a value that is never used. [unreadVariable]
 if ((n = read(fd, p, size)) != size)
        ^
elks/tools/elks-compress/exomizer/rawdecrs/elksmain.c:35:11: style: Condition 'in==NULL' is always false [knownConditionTrueFalse]
    if(in == NULL)
          ^
elks/tools/elks-compress/exomizer/rawdecrs/elksmain.c:29:11: note: Assuming that condition 'in==NULL' is not redundant
    if(in == NULL)
          ^
elks/tools/elks-compress/exomizer/rawdecrs/elksmain.c:35:11: note: Condition 'in==NULL' is always false
    if(in == NULL)
          ^
elks/tools/elks-compress/exomizer/rawdecrs/elksmain.c:46:3: error: Resource leak: out [resourceLeak]
  return 1;
  ^
elks/tools/elks-compress/exomizer/rawdecrs/elksmain.c:46:3: error: Memory leak: p [memleak]
  return 1;
  ^
elks/tools/elks-compress/exomizer/rawdecrs/elksmain.c:70:3: error: Resource leak: out [resourceLeak]
  return 1;
  ^
elks/tools/elks-compress/exomizer/rawdecrs/elksmain.c:72:7: style: Variable 'outp' is assigned a value that is never used. [unreadVariable]
 outp = inp + origsize + safety;
      ^
elks/tools/elks-compress/exomizer/rawdecrs/elksmain.c:16:8: style: Unused variable: newoutp [unusedVariable]
 char *newoutp;
       ^
elks/tools/elks-compress/exomizer/rawdecrs/exodecr-elks.c:74:24: style: Local variable 'bits' shadows outer variable [shadowVariable]
    unsigned short int bits = 0;
                       ^
elks/tools/elks-compress/exomizer/rawdecrs/exodecr-elks.c:44:13: note: Shadowed declaration
static char bits[52];
            ^
elks/tools/elks-compress/exomizer/rawdecrs/exodecr-elks.c:74:24: note: Shadow variable
    unsigned short int bits = 0;
                       ^
elks/tools/elks-compress/exomizer/rawdecrs/exodecr-elks.c:110:19: error: Uninitialized variable: b2 [uninitvar]
        base[i] = b2;
                  ^
elks/tools/elks-compress/exomizer/rawdecrs/exodecr-elks.c:106:21: note: Assuming condition is false
        if((i & 15) == 0)
                    ^
elks/tools/elks-compress/exomizer/rawdecrs/exodecr-elks.c:110:19: note: Uninitialized variable: b2
        base[i] = b2;
                  ^
elks/tools/elks-compress/exomizer/rawdecrs/exodecr-v2.c:36:24: style: Local variable 'bits' shadows outer variable [shadowVariable]
    unsigned short int bits = 0;
                       ^
elks/tools/elks-compress/exomizer/rawdecrs/exodecr-v2.c:30:13: note: Shadowed declaration
static char bits[52];
            ^
elks/tools/elks-compress/exomizer/rawdecrs/exodecr-v2.c:36:24: note: Shadow variable
    unsigned short int bits = 0;
                       ^
elks/tools/elks-compress/exomizer/rawdecrs/exodecr-v2.c:63:19: error: Uninitialized variable: b2 [uninitvar]
        base[i] = b2;
                  ^
elks/tools/elks-compress/exomizer/rawdecrs/exodecr-v2.c:59:21: note: Assuming condition is false
        if((i & 15) == 0)
                    ^
elks/tools/elks-compress/exomizer/rawdecrs/exodecr-v2.c:63:19: note: Uninitialized variable: b2
        base[i] = b2;
                  ^
elks/tools/elks-compress/exomizer/rawdecrs/exodecr.c:60:24: style: Local variable 'bits' shadows outer variable [shadowVariable]
    unsigned short int bits = 0;
                       ^
elks/tools/elks-compress/exomizer/rawdecrs/exodecr.c:35:13: note: Shadowed declaration
static char bits[52];
            ^
elks/tools/elks-compress/exomizer/rawdecrs/exodecr.c:60:24: note: Shadow variable
    unsigned short int bits = 0;
                       ^
elks/tools/elks-compress/exomizer/rawdecrs/exodecr.c:96:19: error: Uninitialized variable: b2 [uninitvar]
        base[i] = b2;
                  ^
elks/tools/elks-compress/exomizer/rawdecrs/exodecr.c:92:21: note: Assuming condition is false
        if((i & 15) == 0)
                    ^
elks/tools/elks-compress/exomizer/rawdecrs/exodecr.c:96:19: note: Uninitialized variable: b2
        base[i] = b2;
                  ^
elks/tools/elks-compress/exomizer/rawdecrs/main.c:36:11: style: Condition 'in==NULL' is always false [knownConditionTrueFalse]
    if(in == NULL)
          ^
elks/tools/elks-compress/exomizer/rawdecrs/main.c:30:11: note: Assuming that condition 'in==NULL' is not redundant
    if(in == NULL)
          ^
elks/tools/elks-compress/exomizer/rawdecrs/main.c:36:11: note: Condition 'in==NULL' is always false
    if(in == NULL)
          ^
elks/tools/elks-compress/exomizer/rawdecrs/main2.c:27:11: style: Condition 'in==NULL' is always false [knownConditionTrueFalse]
    if(in == NULL)
          ^
elks/tools/elks-compress/exomizer/rawdecrs/main2.c:21:11: note: Assuming that condition 'in==NULL' is not redundant
    if(in == NULL)
          ^
elks/tools/elks-compress/exomizer/rawdecrs/main2.c:27:11: note: Condition 'in==NULL' is always false
    if(in == NULL)
          ^
elks/tools/elks-compress/exomizer/src/areatrace.c:70:10: style: The scope of the variable 'pend' can be reduced. [variableScope]
    u16 *pend;
         ^
elks/tools/elks-compress/exomizer/src/asm.tab.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 29 configurations. Use --force to check all configurations. [toomanyconfigs]

^
* yacc.c:358  *:1231:0: information: Skipping configuration 'EXIT_SUCCESS;_ALLOCA_H;YYSTACK_USE_ALLOCA;yyoverflow' since the value of 'yyoverflow' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]

^
* yacc.c:358  *:787:0: information: Skipping configuration 'YYPRINT' since the value of 'YYPRINT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]

^
* yacc.c:358  *:1231:0: information: Skipping configuration 'YYSTACK_USE_ALLOCA;_AIX;yyoverflow' since the value of 'yyoverflow' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]

^
* yacc.c:358  *:1231:0: information: Skipping configuration 'YYSTACK_USE_ALLOCA;_MSC_VER;yyoverflow' since the value of 'yyoverflow' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]

^
* yacc.c:358  *:1231:0: information: Skipping configuration 'YYSTACK_USE_ALLOCA;__BUILTIN_VA_ARG_INCR;yyoverflow' since the value of 'yyoverflow' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]

^
* yacc.c:358  *:1231:0: information: Skipping configuration 'YYSTACK_USE_ALLOCA;__GNUC__;yyoverflow' since the value of 'yyoverflow' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]

^
* yacc.c:358  *:1231:0: information: Skipping configuration 'YYSTACK_USE_ALLOCA;yyoverflow' since the value of 'yyoverflow' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]

^
* yacc.c:355  *:15:0: information: Skipping configuration 'YYSTYPE;YYSTYPE_IS_DECLARED' since the value of 'YYSTYPE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]

^
* yacc.c:358  *:186:0: information: Skipping configuration 'YYSTYPE;YYSTYPE_IS_DECLARED' since the value of 'YYSTYPE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]

^
* yacc.c:358  *:779:0: information: Skipping configuration 'YYSTYPE;YYSTYPE_IS_DECLARED' since the value of 'YYSTYPE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]

^
* yacc.c:358  *:798:0: information: Skipping configuration 'YYSTYPE;YYSTYPE_IS_DECLARED' since the value of 'YYSTYPE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]

^
* yacc.c:358  *:836:0: information: Skipping configuration 'YYSTYPE;YYSTYPE_IS_DECLARED' since the value of 'YYSTYPE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]

^
* yacc.c:358  *:1116:0: information: Skipping configuration 'YYSTYPE;YYSTYPE_IS_DECLARED' since the value of 'YYSTYPE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]

^
* yacc.c:358  *:1135:0: information: Skipping configuration 'YYSTYPE;YYSTYPE_IS_DECLARED' since the value of 'YYSTYPE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]

^
* yacc.c:358  *:1164:0: information: Skipping configuration 'YYSTYPE;YYSTYPE_IS_DECLARED' since the value of 'YYSTYPE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]

^
* yacc.c:358  *:1165:0: information: Skipping configuration 'YYSTYPE;YYSTYPE_IS_DECLARED' since the value of 'YYSTYPE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]

^
* yacc.c:358  *:1166:0: information: Skipping configuration 'YYSTYPE;YYSTYPE_IS_DECLARED' since the value of 'YYSTYPE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]

^
* yacc.c:358  *:1176:0: information: Skipping configuration 'YYSTYPE;YYSTYPE_IS_DECLARED' since the value of 'YYSTYPE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]

^
* yacc.c:358  *:1253:0: information: Skipping configuration 'YYSTYPE;YYSTYPE_IS_DECLARED' since the value of 'YYSTYPE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]

^
elks/tools/elks-compress/exomizer/src/bas_main.c:60:21: warning: The address of local variable 'reloc' might be accessed at non-zero index. [objectIndex]
        value_vector[i++] = value;
                    ^
elks/tools/elks-compress/exomizer/src/bas_main.c:117:44: note: Address of variable taken here.
        if (read_int_sequence(load_str, 1, &reloc) < 0)
                                           ^
elks/tools/elks-compress/exomizer/src/bas_main.c:117:44: note: Calling function 'read_int_sequence', 3rd argument '&reloc' value is lifetime=reloc
        if (read_int_sequence(load_str, 1, &reloc) < 0)
                                           ^
elks/tools/elks-compress/exomizer/src/bas_main.c:52:16: note: Assuming condition is Assuming condition is false
        if(str == str_end)
               ^
elks/tools/elks-compress/exomizer/src/bas_main.c:60:21: note: The address of local variable 'reloc' might be accessed at non-zero index.
        value_vector[i++] = value;
                    ^
elks/tools/elks-compress/exomizer/src/bprg_renumber.c:95:20: style: The scope of the variable 'number' can be reduced. [variableScope]
    unsigned short number;
                   ^
elks/tools/elks-compress/exomizer/src/bprg_trampoline.c:95:15: error: Uninitialized variable: *start [uninitvar]
    t.start = *start;
              ^
elks/tools/elks-compress/exomizer/src/bprg_trampoline.c:88:14: note: Assuming condition is false
    if(start == NULL)
             ^
elks/tools/elks-compress/exomizer/src/bprg_trampoline.c:95:15: note: Uninitialized variable: *start
    t.start = *start;
              ^
elks/tools/elks-compress/exomizer/src/buf.c:225:23: warning: Opposite inner 'if' condition leads to a dead code block. [oppositeInnerCondition]
        if (remaining == 0)
                      ^
elks/tools/elks-compress/exomizer/src/buf.c:222:37: note: outer condition: remaining>0
    for (remaining = off; remaining > 0; remaining -= skip)
                                    ^
elks/tools/elks-compress/exomizer/src/buf.c:225:23: note: opposite inner condition: remaining==0
        if (remaining == 0)
                      ^
elks/tools/elks-compress/exomizer/src/buf.c:282:19: warning: Identical inner 'if' condition is always true. [identicalInnerCondition]
        if (f_off < 0)
                  ^
elks/tools/elks-compress/exomizer/src/buf.c:268:15: note: outer condition: f_off<0
    if (f_off < 0)
              ^
elks/tools/elks-compress/exomizer/src/buf.c:282:19: note: identical inner condition: f_off<0
        if (f_off < 0)
                  ^
elks/tools/elks-compress/exomizer/src/buf.c:100:38: style:inconclusive: Function 'buf_reserve' argument 2 names different: declaration 'capacity' definition 'new_capacity'. [funcArgNamesDifferent]
void *buf_reserve(struct buf *b, int new_capacity)
                                     ^
elks/tools/elks-compress/exomizer/src/buf.h:72:38: note: Function 'buf_reserve' argument 2 names different: declaration 'capacity' definition 'new_capacity'.
void *buf_reserve(struct buf *b, int capacity);
                                     ^
elks/tools/elks-compress/exomizer/src/buf.c:100:38: note: Function 'buf_reserve' argument 2 names different: declaration 'capacity' definition 'new_capacity'.
void *buf_reserve(struct buf *b, int new_capacity)
                                     ^
elks/tools/elks-compress/exomizer/src/desfx.c:61:47: style:inconclusive: Function 'decrunch_sfx' argument 3 names different: declaration 'start' definition 'startp'. [funcArgNamesDifferent]
u16 decrunch_sfx(u8 mem[65536], u16 run, int *startp, int *endp, u32 *cyclesp)
                                              ^
elks/tools/elks-compress/exomizer/src/desfx.h:36:47: note: Function 'decrunch_sfx' argument 3 names different: declaration 'start' definition 'startp'.
u16 decrunch_sfx(u8 mem[65536], u16 run, int *start, int *end, u32 *cycles);
                                              ^
elks/tools/elks-compress/exomizer/src/desfx.c:61:47: note: Function 'decrunch_sfx' argument 3 names different: declaration 'start' definition 'startp'.
u16 decrunch_sfx(u8 mem[65536], u16 run, int *startp, int *endp, u32 *cyclesp)
                                              ^
elks/tools/elks-compress/exomizer/src/desfx.c:61:60: style:inconclusive: Function 'decrunch_sfx' argument 4 names different: declaration 'end' definition 'endp'. [funcArgNamesDifferent]
u16 decrunch_sfx(u8 mem[65536], u16 run, int *startp, int *endp, u32 *cyclesp)
                                                           ^
elks/tools/elks-compress/exomizer/src/desfx.h:36:59: note: Function 'decrunch_sfx' argument 4 names different: declaration 'end' definition 'endp'.
u16 decrunch_sfx(u8 mem[65536], u16 run, int *start, int *end, u32 *cycles);
                                                          ^
elks/tools/elks-compress/exomizer/src/desfx.c:61:60: note: Function 'decrunch_sfx' argument 4 names different: declaration 'end' definition 'endp'.
u16 decrunch_sfx(u8 mem[65536], u16 run, int *startp, int *endp, u32 *cyclesp)
                                                           ^
elks/tools/elks-compress/exomizer/src/desfx.c:61:71: style:inconclusive: Function 'decrunch_sfx' argument 5 names different: declaration 'cycles' definition 'cyclesp'. [funcArgNamesDifferent]
u16 decrunch_sfx(u8 mem[65536], u16 run, int *startp, int *endp, u32 *cyclesp)
                                                                      ^
elks/tools/elks-compress/exomizer/src/desfx.h:36:69: note: Function 'decrunch_sfx' argument 5 names different: declaration 'cycles' definition 'cyclesp'.
u16 decrunch_sfx(u8 mem[65536], u16 run, int *start, int *end, u32 *cycles);
                                                                    ^
elks/tools/elks-compress/exomizer/src/desfx.c:61:71: note: Function 'decrunch_sfx' argument 5 names different: declaration 'cycles' definition 'cyclesp'.
u16 decrunch_sfx(u8 mem[65536], u16 run, int *startp, int *endp, u32 *cyclesp)
                                                                      ^
elks/tools/elks-compress/exomizer/src/exo_helper.c:68:5: error: Address of local auto-variable assigned to a function parameter. [autoVariables]
    emd->out = &out;
    ^
elks/tools/elks-compress/exomizer/src/exo_helper.c:278:58: style: Boolean result is used in bitwise operation. Clarify expression with parentheses. [clarifyCondition]
                             !options->direction_forward ^
                                                         ^
elks/tools/elks-compress/exomizer/src/exo_helper.c:612:56: style: Boolean result is used in bitwise operation. Clarify expression with parentheses. [clarifyCondition]
                             !dopts->direction_forward ^
                                                       ^
elks/tools/elks-compress/exomizer/src/exo_helper.c:52:9: style: The scope of the variable 'pos' can be reduced. [variableScope]
    int pos;
        ^
elks/tools/elks-compress/exomizer/src/exo_helper.c:53:9: style: The scope of the variable 'pos_diff' can be reduced. [variableScope]
    int pos_diff;
        ^
elks/tools/elks-compress/exomizer/src/exo_helper.c:558:10: style: The scope of the variable 'tmp' can be reduced. [variableScope]
    char tmp;
         ^
elks/tools/elks-compress/exomizer/src/exo_helper.c:418:39: style:inconclusive: Function 'crunch_multi' argument 5 names different: declaration 'merged_info' definition 'infop'. [funcArgNamesDifferent]
                  struct crunch_info *infop) /* OUT */
                                      ^
elks/tools/elks-compress/exomizer/src/exo_helper.h:122:39: note: Function 'crunch_multi' argument 5 names different: declaration 'merged_info' definition 'infop'.
                  struct crunch_info *merged_info); /* OUT */
                                      ^
elks/tools/elks-compress/exomizer/src/exo_helper.c:418:39: note: Function 'crunch_multi' argument 5 names different: declaration 'merged_info' definition 'infop'.
                  struct crunch_info *infop) /* OUT */
                                      ^
elks/tools/elks-compress/exomizer/src/exo_helper.c:752:47: style:inconclusive: Function 'handle_crunch_flags' argument 5 names different: declaration 'options' definition 'flags'. [funcArgNamesDifferent]
                         struct common_flags *flags) /* OUT */
                                              ^
elks/tools/elks-compress/exomizer/src/exo_helper.h:84:47: note: Function 'handle_crunch_flags' argument 5 names different: declaration 'options' definition 'flags'.
                         struct common_flags *options); /* OUT */
                                              ^
elks/tools/elks-compress/exomizer/src/exo_helper.c:752:47: note: Function 'handle_crunch_flags' argument 5 names different: declaration 'options' definition 'flags'.
                         struct common_flags *flags) /* OUT */
                                              ^
elks/tools/elks-compress/exomizer/src/exo_main.c:1656:30: style: Array index 'i' is used before limits check. [arrayIndexThenCheck]
                for (i = 0; p[i] != '\0' && (i < 7 || (p[i] = '\0')); ++i)
                             ^
elks/tools/elks-compress/exomizer/src/exo_main.c:1218:46: style: Condition '(options.flags_proto&required)!=required' is always false [knownConditionTrueFalse]
        if ((options.flags_proto & required) != required)
                                             ^
elks/tools/elks-compress/exomizer/src/exo_main.c:1055:70: note: Assignment 'options.flags_proto=(1<<0)|(1<<1)|(1<<5)', assigned value is 35
    options.flags_proto = PFLAG_BITS_ORDER_BE | PFLAG_BITS_COPY_GT_7 |
                                                                     ^
elks/tools/elks-compress/exomizer/src/exo_main.c:1059:13: note: Assuming condition is false
    if(argc <= 1)
            ^
elks/tools/elks-compress/exomizer/src/exo_main.c:1218:46: note: Condition '(options.flags_proto&required)!=required' is always false
        if ((options.flags_proto & required) != required)
                                             ^
elks/tools/elks-compress/exomizer/src/exo_main.c:1226:49: style: Condition '(options.flags_proto&unsupported)!=0' is always false [knownConditionTrueFalse]
        if ((options.flags_proto & unsupported) != 0)
                                                ^
elks/tools/elks-compress/exomizer/src/exo_main.c:1055:70: note: Assignment 'options.flags_proto=(1<<0)|(1<<1)|(1<<5)', assigned value is 35
    options.flags_proto = PFLAG_BITS_ORDER_BE | PFLAG_BITS_COPY_GT_7 |
                                                                     ^
elks/tools/elks-compress/exomizer/src/exo_main.c:1059:13: note: Assuming condition is false
    if(argc <= 1)
            ^
elks/tools/elks-compress/exomizer/src/exo_main.c:1226:49: note: Condition '(options.flags_proto&unsupported)!=0' is always false
        if ((options.flags_proto & unsupported) != 0)
                                                ^
elks/tools/elks-compress/exomizer/src/exo_main.c:56:9: style: The scope of the variable 'read_len' can be reduced. [variableScope]
    int read_len;
        ^
elks/tools/elks-compress/exomizer/src/exo_main.c:564:32: style: Local variable 'p' shadows outer variable [shadowVariable]
                unsigned char *p = buf_insert(outbuf, -1, NULL, 2);
                               ^
elks/tools/elks-compress/exomizer/src/exo_main.c:557:21: note: Shadowed declaration
        const char *p;
                    ^
elks/tools/elks-compress/exomizer/src/exo_main.c:564:32: note: Shadow variable
                unsigned char *p = buf_insert(outbuf, -1, NULL, 2);
                               ^
elks/tools/elks-compress/exomizer/src/exo_main.c:571:32: style: Local variable 'p' shadows outer variable [shadowVariable]
                unsigned char *p = buf_insert(outbuf, 0, NULL, 2);
                               ^
elks/tools/elks-compress/exomizer/src/exo_main.c:557:21: note: Shadowed declaration
        const char *p;
                    ^
elks/tools/elks-compress/exomizer/src/exo_main.c:571:32: note: Shadow variable
                unsigned char *p = buf_insert(outbuf, 0, NULL, 2);
                               ^
elks/tools/elks-compress/exomizer/src/exo_main.c:1300:30: style: Local variable 'info' shadows outer variable [shadowVariable]
            struct load_info info;
                             ^
elks/tools/elks-compress/exomizer/src/exo_main.c:1044:24: note: Shadowed declaration
    struct crunch_info info;
                       ^
elks/tools/elks-compress/exomizer/src/exo_main.c:1300:30: note: Shadow variable
            struct load_info info;
                             ^
elks/tools/elks-compress/exomizer/src/exo_main.c:1796:20: style: Local variable 'mem' shadows outer function [shadowFunction]
        struct buf mem;
                   ^
elks/tools/elks-compress/exomizer/src/exo_main.c:740:6: note: Shadowed declaration
void mem(const char *appl, int argc, char *argv[])
     ^
elks/tools/elks-compress/exomizer/src/exo_main.c:1796:20: note: Shadow variable
        struct buf mem;
                   ^
elks/tools/elks-compress/exomizer/src/exo_main.c:1493:12: style: Variable 'in' is assigned a value that is never used. [unreadVariable]
        in = out;
           ^
* yacc.c:1909  *:15:0: information: Skipping configuration 'YYSTYPE;YYSTYPE_IS_DECLARED' since the value of 'YYSTYPE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]

^
elks/tools/elks-compress/exomizer/src/exo_util.c:90:19: style: Variable 'state' is reassigned a value before the old one has been used. 'break;' missing? [redundantAssignInSwitch]
            state = 4;
                  ^
elks/tools/elks-compress/exomizer/src/exo_util.c:81:19: note: $symbol is assigned
            state = 3;
                  ^
elks/tools/elks-compress/exomizer/src/exo_util.c:90:19: note: $symbol is overwritten
            state = 4;
                  ^
elks/tools/elks-compress/exomizer/src/exo_util.c:53:44: style:inconclusive: Function 'find_sys' argument 2 names different: declaration 'target' definition 'sys_token'. [funcArgNamesDifferent]
int find_sys(const unsigned char *buf, int sys_token, int *stub_lenp)
                                           ^
elks/tools/elks-compress/exomizer/src/exo_util.h:41:44: note: Function 'find_sys' argument 2 names different: declaration 'target' definition 'sys_token'.
int find_sys(const unsigned char *buf, int target, int *stub_lenp);
                                           ^
elks/tools/elks-compress/exomizer/src/exo_util.c:53:44: note: Function 'find_sys' argument 2 names different: declaration 'target' definition 'sys_token'.
int find_sys(const unsigned char *buf, int sys_token, int *stub_lenp)
                                           ^
elks/tools/elks-compress/exomizer/src/exo_util.c:724:16: style: Variable 'length' is assigned a value that is never used. [unreadVariable]
        length = 65536 - load_addr;
               ^
elks/tools/elks-compress/exomizer/src/getflag.c:59:17: style: The scope of the variable 'flagp' can be reduced. [variableScope]
    const char *flagp;
                ^
lex.yy.c:2227:2: warning: Possible null pointer dereference: b [nullPointer]

 ^
lex.yy.c:2120:18: note: Calling function 'yy_init_buffer', 1st argument '(yy_buffer_stack)?(yy_buffer_stack)[yy_buffer_stack_top]:NULL' value is 0

                 ^
lex.yy.c:2227:2: note: Null pointer dereference

 ^
lex.yy.c:2228:2: warning: Possible null pointer dereference: b [nullPointer]

 ^
lex.yy.c:2120:18: note: Calling function 'yy_init_buffer', 1st argument '(yy_buffer_stack)?(yy_buffer_stack)[yy_buffer_stack_top]:NULL' value is 0

                 ^
lex.yy.c:2228:2: note: Null pointer dereference

 ^
lex.yy.c:1889:3: style: Redundant initialization for 'c'. The initialized value is overwritten before it is read. [redundantInitialization]

  ^
lex.yy.c:1889:3: note: c is initialized

  ^
lex.yy.c:1889:3: note: c is overwritten

  ^
lex.yy.c:1968:59: style:inconclusive: Function 'yy_try_NUL_trans' argument 1 names different: declaration 'current_state' definition 'yy_current_state'. [funcArgNamesDifferent]

                                                          ^
lex.yy.c:343:55: note: Function 'yy_try_NUL_trans' argument 1 names different: declaration 'current_state' definition 'yy_current_state'.

                                                      ^
lex.yy.c:1968:59: note: Function 'yy_try_NUL_trans' argument 1 names different: declaration 'current_state' definition 'yy_current_state'.

                                                          ^
lex.yy.c:1993:40: style:inconclusive: Function 'yyunput' argument 2 names different: declaration 'buf_ptr' definition 'yy_bp'. [funcArgNamesDifferent]

                                       ^
lex.yy.c:798:40: note: Function 'yyunput' argument 2 names different: declaration 'buf_ptr' definition 'yy_bp'.

                                       ^
lex.yy.c:1993:40: note: Function 'yyunput' argument 2 names different: declaration 'buf_ptr' definition 'yy_bp'.

                                       ^
lex.yy.c:2412:46: style:inconclusive: Function 'yy_scan_string' argument 1 names different: declaration 'yy_str' definition 'yystr'. [funcArgNamesDifferent]

                                             ^
lex.yy.c:295:46: note: Function 'yy_scan_string' argument 1 names different: declaration 'yy_str' definition 'yystr'.

                                             ^
lex.yy.c:2412:46: note: Function 'yy_scan_string' argument 1 names different: declaration 'yy_str' definition 'yystr'.

                                             ^
lex.yy.c:2425:46: style:inconclusive: Function 'yy_scan_bytes' argument 1 names different: declaration 'bytes' definition 'yybytes'. [funcArgNamesDifferent]

                                             ^
lex.yy.c:296:45: note: Function 'yy_scan_bytes' argument 1 names different: declaration 'bytes' definition 'yybytes'.

                                            ^
lex.yy.c:2425:46: note: Function 'yy_scan_bytes' argument 1 names different: declaration 'bytes' definition 'yybytes'.

                                             ^
lex.yy.c:2425:60: style:inconclusive: Function 'yy_scan_bytes' argument 2 names different: declaration 'len' definition '_yybytes_len'. [funcArgNamesDifferent]

                                                           ^
lex.yy.c:296:56: note: Function 'yy_scan_bytes' argument 2 names different: declaration 'len' definition '_yybytes_len'.

                                                       ^
lex.yy.c:2425:60: note: Function 'yy_scan_bytes' argument 2 names different: declaration 'len' definition '_yybytes_len'.

                                                           ^
lex.yy.c:2595:24: style:inconclusive: Function 'yyset_debug' argument 1 names different: declaration 'debug_flag' definition '_bdebug'. [funcArgNamesDifferent]

                       ^
lex.yy.c:762:24: note: Function 'yyset_debug' argument 1 names different: declaration 'debug_flag' definition '_bdebug'.

                       ^
lex.yy.c:2595:24: note: Function 'yyset_debug' argument 1 names different: declaration 'debug_flag' definition '_bdebug'.

                       ^
lex.yy.c:942:0: information: Skipping configuration 'YY_USER_INIT' since the value of 'YY_USER_INIT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]

^
elks/tools/elks-compress/exomizer/src/log.c:207:1: error: va_list 'argp' was opened but not closed by va_end(). [va_end_missing]
}
^
elks/tools/elks-compress/exomizer/src/log.c:219:1: error: va_list 'argp' was opened but not closed by va_end(). [va_end_missing]
}
^
elks/tools/elks-compress/exomizer/src/map.c:178:41: style:inconclusive: Function 'map_get_iterator' argument 1 names different: declaration 'p' definition 'm'. [funcArgNamesDifferent]
void map_get_iterator(const struct map *m, struct map_iterator *i)
                                        ^
elks/tools/elks-compress/exomizer/src/map.h:69:41: note: Function 'map_get_iterator' argument 1 names different: declaration 'p' definition 'm'.
void map_get_iterator(const struct map *p, struct map_iterator *i);
                                        ^
elks/tools/elks-compress/exomizer/src/map.c:178:41: note: Function 'map_get_iterator' argument 1 names different: declaration 'p' definition 'm'.
void map_get_iterator(const struct map *m, struct map_iterator *i)
                                        ^
elks/tools/elks-compress/exomizer/src/match.c:58:10: error: Null pointer dereference: (volatile int*)0 [nullPointer]
        *(volatile int*)0;
         ^
elks/tools/elks-compress/exomizer/src/match.c:379:17: style: Local variable 'offset' shadows outer variable [shadowVariable]
            int offset = offset1 < offset2 ? offset1 : offset2;
                ^
elks/tools/elks-compress/exomizer/src/match.c:352:13: note: Shadowed declaration
        int offset;
            ^
elks/tools/elks-compress/exomizer/src/match.c:379:17: note: Shadow variable
            int offset = offset1 < offset2 ? offset1 : offset2;
                ^
elks/tools/elks-compress/exomizer/src/match.c:58:9: warning:inconclusive: Found suspicious operator '*' [constStatement]
        *(volatile int*)0;
        ^
elks/tools/elks-compress/exomizer/src/optimal.c:83:27: style: The scope of the variable 'inp2' can be reduced. [variableScope]
    struct interval_node *inp2;
                          ^
elks/tools/elks-compress/exomizer/src/optimal.c:290:9: style: The scope of the variable 'key' can be reduced. [variableScope]
    int key;
        ^
elks/tools/elks-compress/exomizer/src/optimal.c:163:48: style:inconclusive: Function 'optimal_encode' argument 2 names different: declaration 'emp' definition 'emd'. [funcArgNamesDifferent]
                     struct encode_match_data *emd,
                                               ^
elks/tools/elks-compress/exomizer/src/optimal.h:38:48: note: Function 'optimal_encode' argument 2 names different: declaration 'emp' definition 'emd'.
                     struct encode_match_data *emp,     /* IN */
                                               ^
elks/tools/elks-compress/exomizer/src/optimal.c:163:48: note: Function 'optimal_encode' argument 2 names different: declaration 'emp' definition 'emd'.
                     struct encode_match_data *emd,
                                               ^
elks/tools/elks-compress/exomizer/src/optimal.c:428:42: style:inconclusive: Function 'optimal_encoding_export' argument 2 names different: declaration 'export' definition 'target'. [funcArgNamesDifferent]
                             struct buf *target)
                                         ^
elks/tools/elks-compress/exomizer/src/optimal.h:56:42: note: Function 'optimal_encoding_export' argument 2 names different: declaration 'export' definition 'target'.
                             struct buf *export);    /* OUT */
                                         ^
elks/tools/elks-compress/exomizer/src/optimal.c:428:42: note: Function 'optimal_encoding_export' argument 2 names different: declaration 'export' definition 'target'.
                             struct buf *target)
                                         ^
elks/tools/elks-compress/exomizer/src/optimal.c:533:45: style:inconclusive: Function 'optimal_init' argument 1 names different: declaration 'emp' definition 'emd'. [funcArgNamesDifferent]
void optimal_init(struct encode_match_data *emd,/* IN/OUT */
                                            ^
elks/tools/elks-compress/exomizer/src/optimal.h:42:45: note: Function 'optimal_init' argument 1 names different: declaration 'emp' definition 'emd'.
void optimal_init(struct encode_match_data *emp,        /* IN/OUT */
                                            ^
elks/tools/elks-compress/exomizer/src/optimal.c:533:45: note: Function 'optimal_init' argument 1 names different: declaration 'emp' definition 'emd'.
void optimal_init(struct encode_match_data *emd,/* IN/OUT */
                                            ^
elks/tools/elks-compress/exomizer/src/optimal.c:613:29: style:inconclusive: Function 'optimal_optimize' argument 3 names different: declaration 'priv' definition 'matchp_enum'. [funcArgNamesDifferent]
                      void *matchp_enum)        /* IN */
                            ^
elks/tools/elks-compress/exomizer/src/optimal.h:50:29: note: Function 'optimal_optimize' argument 3 names different: declaration 'priv' definition 'matchp_enum'.
                      void *priv);      /* IN */
                            ^
elks/tools/elks-compress/exomizer/src/optimal.c:613:29: note: Function 'optimal_optimize' argument 3 names different: declaration 'priv' definition 'matchp_enum'.
                      void *matchp_enum)        /* IN */
                            ^
elks/tools/elks-compress/exomizer/src/optimal.c:735:56: style:inconclusive: Function 'optimal_dump' argument 2 names different: declaration 'emp' definition 'emd'. [funcArgNamesDifferent]
void optimal_dump(int level, struct encode_match_data *emd)
                                                       ^
elks/tools/elks-compress/exomizer/src/optimal.h:58:56: note: Function 'optimal_dump' argument 2 names different: declaration 'emp' definition 'emd'.
void optimal_dump(int level, struct encode_match_data *emp);       /* IN */
                                                       ^
elks/tools/elks-compress/exomizer/src/optimal.c:735:56: note: Function 'optimal_dump' argument 2 names different: declaration 'emp' definition 'emd'.
void optimal_dump(int level, struct encode_match_data *emd)
                                                       ^
elks/tools/elks-compress/exomizer/src/parse.c:618:19: style: The scope of the variable 'exprp' can be reduced. [variableScope]
    struct expr **exprp;
                  ^
elks/tools/elks-compress/exomizer/src/parse.c:656:9: style: The scope of the variable 'value' can be reduced. [variableScope]
    i32 value;
        ^
elks/tools/elks-compress/exomizer/src/parse.c:440:36: style:inconclusive: Function 'new_op' argument 2 names different: declaration 'op_size' definition 'atom_op_type'. [funcArgNamesDifferent]
struct atom *new_op(u8 op_code, u8 atom_op_type,
                                   ^
elks/tools/elks-compress/exomizer/src/parse.h:103:36: note: Function 'new_op' argument 2 names different: declaration 'op_size' definition 'atom_op_type'.
struct atom *new_op(u8 op_code, u8 op_size, struct expr *arg);
                                   ^
elks/tools/elks-compress/exomizer/src/parse.c:440:36: note: Function 'new_op' argument 2 names different: declaration 'op_size' definition 'atom_op_type'.
struct atom *new_op(u8 op_code, u8 atom_op_type,
                                   ^
elks/tools/elks-compress/exomizer/src/parse.c:441:34: style:inconclusive: Function 'new_op' argument 3 names different: declaration 'arg' definition 'op_arg'. [funcArgNamesDifferent]
                    struct expr *op_arg)
                                 ^
elks/tools/elks-compress/exomizer/src/parse.h:103:58: note: Function 'new_op' argument 3 names different: declaration 'arg' definition 'op_arg'.
struct atom *new_op(u8 op_code, u8 op_size, struct expr *arg);
                                                         ^
elks/tools/elks-compress/exomizer/src/parse.c:441:34: note: Function 'new_op' argument 3 names different: declaration 'arg' definition 'op_arg'.
                    struct expr *op_arg)
                                 ^
elks/tools/elks-compress/exomizer/src/parse.c:735:48: style:inconclusive: Function 'output_atoms' argument 2 names different: declaration 'mem' definition 'atoms'. [funcArgNamesDifferent]
void output_atoms(struct buf *out, struct vec *atoms)
                                               ^
elks/tools/elks-compress/exomizer/src/parse.h:139:48: note: Function 'output_atoms' argument 2 names different: declaration 'mem' definition 'atoms'.
void output_atoms(struct buf *out, struct vec *mem);
                                               ^
elks/tools/elks-compress/exomizer/src/parse.c:735:48: note: Function 'output_atoms' argument 2 names different: declaration 'mem' definition 'atoms'.
void output_atoms(struct buf *out, struct vec *atoms)
                                               ^
elks/tools/elks-compress/exomizer/src/pc.c:58:18: style: The scope of the variable 'old_pc1' can be reduced. [variableScope]
    struct expr *old_pc1;
                 ^
elks/tools/elks-compress/exomizer/src/pc.c:89:18: style: The scope of the variable 'old_pc1' can be reduced. [variableScope]
    struct expr *old_pc1;
                 ^
elks/tools/elks-compress/exomizer/src/radix.c:92:40: style:inconclusive: Function 'radix_node_set' argument 1 names different: declaration 'rr' definition 'rrp'. [funcArgNamesDifferent]
void radix_node_set(struct radix_root *rrp,    /* IN */
                                       ^
elks/tools/elks-compress/exomizer/src/radix.h:51:40: note: Function 'radix_node_set' argument 1 names different: declaration 'rr' definition 'rrp'.
void radix_node_set(struct radix_root *rr,      /* IN */
                                       ^
elks/tools/elks-compress/exomizer/src/radix.c:92:40: note: Function 'radix_node_set' argument 1 names different: declaration 'rr' definition 'rrp'.
void radix_node_set(struct radix_root *rrp,    /* IN */
                                       ^
elks/tools/elks-compress/exomizer/src/search.c:199:53: style: Condition 'snp->index+ctx->rle_r[snp->index]>=best_rle_snp->index' is always true [knownConditionTrueFalse]
                snp->index + ctx->rle_r[snp->index] >= best_rle_snp->index)
                                                    ^
elks/tools/elks-compress/exomizer/src/search.c:184:48: note: Assuming condition 'snp->index+ctx->rle_r[snp->index]<best_rle_snp->index' is false
           snp->index + ctx->rle_r[snp->index] < best_rle_snp->index)
                                               ^
elks/tools/elks-compress/exomizer/src/search.c:199:53: note: Condition 'snp->index+ctx->rle_r[snp->index]>=best_rle_snp->index' is always true
                snp->index + ctx->rle_r[snp->index] >= best_rle_snp->index)
                                                    ^
elks/tools/elks-compress/exomizer/src/search.c:386:51: style:inconclusive: Function 'match_snp_enum_get_next' argument 1 names different: declaration 'matchp_snp_enum' definition 'match_snp_enum'. [funcArgNamesDifferent]
const struct match *match_snp_enum_get_next(void *match_snp_enum)
                                                  ^
elks/tools/elks-compress/exomizer/src/search.h:112:51: note: Function 'match_snp_enum_get_next' argument 1 names different: declaration 'matchp_snp_enum' definition 'match_snp_enum'.
const struct match *match_snp_enum_get_next(void *matchp_snp_enum);
                                                  ^
elks/tools/elks-compress/exomizer/src/search.c:386:51: note: Function 'match_snp_enum_get_next' argument 1 names different: declaration 'matchp_snp_enum' definition 'match_snp_enum'.
const struct match *match_snp_enum_get_next(void *match_snp_enum)
                                                  ^
elks/tools/elks-compress/exomizer/src/table.c:85:17: style: The scope of the variable 'val' can be reduced. [variableScope]
    const char *val;
                ^
elks/tools/elks-compress/exomizer/src/table.c:154:23: style: The scope of the variable 'col' can be reduced. [variableScope]
    struct table_col *col;
                      ^
elks/tools/elks-compress/exomizer/src/table.c:162:15: style: The scope of the variable 'cell' can be reduced. [variableScope]
        char *cell;
              ^
elks/tools/elks-compress/exomizer/src/table.c:68:32: style:inconclusive: Function 'table_col_add' argument 2 names different: declaration 'column_title' definition 'title'. [funcArgNamesDifferent]
                   const char *title,
                               ^
elks/tools/elks-compress/exomizer/src/table.h:61:32: note: Function 'table_col_add' argument 2 names different: declaration 'column_title' definition 'title'.
                   const char *column_title,
                               ^
elks/tools/elks-compress/exomizer/src/table.c:68:32: note: Function 'table_col_add' argument 2 names different: declaration 'column_title' definition 'title'.
                   const char *title,
                               ^
elks/tools/elks-compress/exomizer/src/vec.c:43:17: style: The scope of the variable 'd' can be reduced. [variableScope]
    const void *d;
                ^
elks/tools/elks-compress/exomizer/src/vec.c:249:11: style: The scope of the variable 'ea' can be reduced. [variableScope]
    void *ea;
          ^
elks/tools/elks-compress/exomizer/src/vec.c:250:11: style: The scope of the variable 'eb' can be reduced. [variableScope]
    void *eb;
          ^
elks/tools/elks-compress/exomizer/src/vec.c:126:59: style:inconclusive: Function 'vec_find' argument 3 names different: declaration 'key' definition 'in'. [funcArgNamesDifferent]
int vec_find(const struct vec *p, cb_cmp * f, const void *in)
                                                          ^
elks/tools/elks-compress/exomizer/src/vec.h:85:59: note: Function 'vec_find' argument 3 names different: declaration 'key' definition 'in'.
int vec_find(const struct vec *p, cb_cmp * f, const void *key);
                                                          ^
elks/tools/elks-compress/exomizer/src/vec.c:126:59: note: Function 'vec_find' argument 3 names different: declaration 'key' definition 'in'.
int vec_find(const struct vec *p, cb_cmp * f, const void *in)
                                                          ^
elks/tools/elks-compress/exomizer/src/vec.c:173:71: style:inconclusive: Function 'vec_insert_uniq' argument 4 names different: declaration 'out' definition 'outp'. [funcArgNamesDifferent]
int vec_insert_uniq(struct vec *p, cb_cmp * f, const void *in, void **outp)
                                                                      ^
elks/tools/elks-compress/exomizer/src/vec.h:99:71: note: Function 'vec_insert_uniq' argument 4 names different: declaration 'out' definition 'outp'.
int vec_insert_uniq(struct vec *p, cb_cmp * f, const void *in, void **out);
                                                                      ^
elks/tools/elks-compress/exomizer/src/vec.c:173:71: note: Function 'vec_insert_uniq' argument 4 names different: declaration 'out' definition 'outp'.
int vec_insert_uniq(struct vec *p, cb_cmp * f, const void *in, void **outp)
                                                                      ^
elks/tools/mfs/dir.c:215:7: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
      printf("%2d, %3d ", (ino->i_zone[0]>>8) & 0xff, ino->i_zone[0] & 0xff);
      ^
elks/tools/mfs/dir.c:215:7: warning: %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
      printf("%2d, %3d ", (ino->i_zone[0]>>8) & 0xff, ino->i_zone[0] & 0xff);
      ^
elks/tools/mfs/dir.c:217:7: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
      printf("%7d ",ino->i_size);
      ^
elks/tools/mfs/dir.c:230:7: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
      printf("%7d ",ino->i_size);
      ^
elks/tools/mfs/dir.c:278:9: style: The scope of the variable 'bsz' can be reduced. [variableScope]
  int i,bsz,j;
        ^
elks/tools/mfs/genfs.c:312:43: warning: Either the condition '!fp' is redundant or there is possible null pointer dereference: fp. [nullPointerRedundantCheck]
 while (fgets(filename, sizeof(filename), fp))
                                          ^
elks/tools/mfs/genfs.c:310:6: note: Assuming that condition '!fp' is not redundant
 if (!fp) die(filelist);
     ^
elks/tools/mfs/genfs.c:312:43: note: Null pointer dereference
 while (fgets(filename, sizeof(filename), fp))
                                          ^
elks/tools/mfs/genfs.c:367:9: warning: Either the condition '!fp' is redundant or there is possible null pointer dereference: fp. [nullPointerRedundantCheck]
 fclose(fp);
        ^
elks/tools/mfs/genfs.c:310:6: note: Assuming that condition '!fp' is not redundant
 if (!fp) die(filelist);
     ^
elks/tools/mfs/genfs.c:367:9: note: Null pointer dereference
 fclose(fp);
        ^
elks/tools/mfs/genfs.c:479:3: warning: Either the condition '!root_node' is redundant or there is possible null pointer dereference: root_node. [nullPointerRedundantCheck]
  root_node->flags = S_IFDIR;
  ^
elks/tools/mfs/genfs.c:477:7: note: Assuming that condition '!root_node' is not redundant
  if (!root_node)
      ^
elks/tools/mfs/genfs.c:479:3: note: Null pointer dereference
  root_node->flags = S_IFDIR;
  ^
elks/tools/mfs/genfs.c:530:3: warning: Either the condition '!root_node' is redundant or there is possible null pointer dereference: root_node. [nullPointerRedundantCheck]
  root_node->flags = S_IFDIR;
  ^
elks/tools/mfs/genfs.c:528:7: note: Assuming that condition '!root_node' is not redundant
  if (!root_node)
      ^
elks/tools/mfs/genfs.c:530:3: note: Null pointer dereference
  root_node->flags = S_IFDIR;
  ^
elks/tools/mfs/genfs.c:492:7: style: Variable 'err' is assigned a value that is never used. [unreadVariable]
  err = compile_fs(fs);
      ^
elks/tools/mfs/genfs.c:544:7: style: Variable 'err' is assigned a value that is never used. [unreadVariable]
  err = compile_fs(fs);
      ^
elks/tools/mfs/getoptx.c:64:8: style: Variable 'osp' is assigned a value that is never used. [unreadVariable]
   osp = sp++;   /* get ready for next letter */
       ^
elks/tools/mfs/iname.c:61:9: style: The scope of the variable 'bsz' can be reduced. [variableScope]
  int i,bsz,j;
        ^
elks/tools/mfs/iname.c:135:6: style: The scope of the variable 'blk' can be reduced. [variableScope]
  u8 blk[BLOCK_SIZE];
     ^
elks/tools/mfs/mkfs.c:134:53: warning: Either the condition '!ifp' is redundant or there is possible null pointer dereference: ifp. [nullPointerRedundantCheck]
 count = fread(blk,1,MINIX_BOOT_BLOCKS * BLOCK_SIZE,ifp);
                                                    ^
elks/tools/mfs/mkfs.c:129:6: note: Assuming that condition '!ifp' is not redundant
 if (!ifp) die(argv[1]);
     ^
elks/tools/mfs/mkfs.c:134:53: note: Null pointer dereference
 count = fread(blk,1,MINIX_BOOT_BLOCKS * BLOCK_SIZE,ifp);
                                                    ^
elks/tools/mfs/mkfs.c:137:25: warning: Either the condition '!ofp' is redundant or there is possible null pointer dereference: ofp. [nullPointerRedundantCheck]
 if (fwrite(blk,1,count,ofp) != count) die("fwrite(%s)", argv[1]);
                        ^
elks/tools/mfs/mkfs.c:132:6: note: Assuming that condition '!ofp' is not redundant
 if (!ofp) die(filename);
     ^
elks/tools/mfs/mkfs.c:137:25: note: Null pointer dereference
 if (fwrite(blk,1,count,ofp) != count) die("fwrite(%s)", argv[1]);
                        ^
elks/tools/mfs/mkfs.c:138:9: warning: Either the condition '!ofp' is redundant or there is possible null pointer dereference: ofp. [nullPointerRedundantCheck]
 fclose(ofp);
        ^
elks/tools/mfs/mkfs.c:132:6: note: Assuming that condition '!ofp' is not redundant
 if (!ofp) die(filename);
     ^
elks/tools/mfs/mkfs.c:138:9: note: Null pointer dereference
 fclose(ofp);
        ^
elks/tools/mfs/mkfs.c:139:9: warning: Either the condition '!ifp' is redundant or there is possible null pointer dereference: ifp. [nullPointerRedundantCheck]
 fclose(ifp);
        ^
elks/tools/mfs/mkfs.c:129:6: note: Assuming that condition '!ifp' is not redundant
 if (!ifp) die(argv[1]);
     ^
elks/tools/mfs/mkfs.c:139:9: note: Null pointer dereference
 fclose(ifp);
        ^
elks/tools/mfs/mkfs.c:49:7: style: The scope of the variable 'c' can be reduced. [variableScope]
  int c;
      ^
elks/tools/mfs/reader.c:42:9: style: The scope of the variable 'bsz' can be reduced. [variableScope]
  int i,bsz,j;
        ^
elks/tools/mfs/super.c:164:3: warning: %ld in format string (no. 5) requires 'long' but the argument type is 'unsigned long'. [invalidPrintfArgType_sint]
  printf("image 1K blocks: boot %d, super 1, inodemap %d, filemap %d, inode %d, data %ld\n",
  ^
elks/tools/mfs/super.c:174:3: warning: %ld in format string (no. 1) requires 'long' but the argument type is 'unsigned long'. [invalidPrintfArgType_sint]
  printf("blocks inuse %ld, free %d, overhead %d, total %ld\n", fsize-FIRSTZONE(fs)-blkcount, blkcount, FIRSTZONE(fs), fsize);
  ^
elks/tools/mfs/super.c:174:3: warning: %ld in format string (no. 4) requires 'long' but the argument type is 'unsigned long'. [invalidPrintfArgType_sint]
  printf("blocks inuse %ld, free %d, overhead %d, total %ld\n", fsize-FIRSTZONE(fs)-blkcount, blkcount, FIRSTZONE(fs), fsize);
  ^
elks/tools/mfs/writer.c:181:17: warning: %o in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed int *'. [invalidScanfArgType_int]
  if (argc > 7) sscanf(argv[7], "%o", &mode);
                ^
elks/tools/mfs/writer.c:264:10: warning: Either the condition '!fp' is redundant or there is possible null pointer dereference: fp. [nullPointerRedundantCheck]
  fclose(fp);
         ^
elks/tools/mfs/writer.c:215:7: note: Assuming that condition '!fp' is not redundant
  if (!fp) die(argv[1]);
      ^
elks/tools/mfs/writer.c:264:10: note: Null pointer dereference
  fclose(fp);
         ^
elks/tools/mfsck/mfsck.c:530:31: portability: Undefined behaviour, when 'blknr%256' is -1 the pointer arithmetic 'ind+blknr%256' is out of bounds. [pointerOutOfBoundsCond]
 result = check_zone_nr2 (ind + blknr % 256, &blk_chg);
                              ^
elks/tools/mfsck/mfsck.c:499:12: note: Assuming that condition 'blknr>=256*256' is not redundant
 if (blknr >= 256 * 256) {
           ^
elks/tools/mfsck/mfsck.c:514:2: note: Compound assignment '-=', assigned value is -1
 blknr -= 256 * 256;
 ^
elks/tools/mfsck/mfsck.c:530:31: note: Pointer arithmetic overflow
 result = check_zone_nr2 (ind + blknr % 256, &blk_chg);
                              ^
elks/tools/mfsck/mfsck.c:1027:6: style: Condition 'inode' is always true [knownConditionTrueFalse]
 if (inode && S_ISDIR(inode->i_mode))
     ^
elks/tools/mfsck/mfsck.c:1010:6: note: Assuming that condition '!inode' is not redundant
 if (!inode)
     ^
elks/tools/mfsck/mfsck.c:1027:6: note: Condition 'inode' is always true
 if (inode && S_ISDIR(inode->i_mode))
     ^
elks/tools/mfsck/mfsck.c:1094:6: style: Condition 'inode' is always true [knownConditionTrueFalse]
 if (inode && S_ISDIR (inode->i_mode))
     ^
elks/tools/mfsck/mfsck.c:1079:6: note: Assuming that condition '!inode' is not redundant
 if (!inode)
     ^
elks/tools/mfsck/mfsck.c:1094:6: note: Condition 'inode' is always true
 if (inode && S_ISDIR (inode->i_mode))
     ^
elks/tools/mfsck/mfsck.c:658:3: warning: %ld in format string (no. 1) requires 'long' but the argument type is 'unsigned long'. [invalidPrintfArgType_sint]
  printf(_("%ld inodes\n"),INODES);
  ^
elks/tools/mfsck/mfsck.c:659:3: warning: %ld in format string (no. 1) requires 'long' but the argument type is 'unsigned long'. [invalidPrintfArgType_sint]
  printf(_("%ld blocks\n"),ZONES);
  ^
elks/tools/mfsck/mfsck.c:660:3: warning: %ld in format string (no. 1) requires 'long' but the argument type is 'unsigned long'. [invalidPrintfArgType_sint]
  printf(_("Firstdatazone=%ld (%ld)\n"),FIRSTZONE,NORM_FIRSTZONE);
  ^
elks/tools/mfsck/mfsck.c:660:3: portability: %ld in format string (no. 2) requires 'long' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]
  printf(_("Firstdatazone=%ld (%ld)\n"),FIRSTZONE,NORM_FIRSTZONE);
  ^
elks/tools/mfsck/mfsck.c:662:3: warning: %ld in format string (no. 1) requires 'long' but the argument type is 'unsigned long'. [invalidPrintfArgType_sint]
  printf(_("Maxsize=%ld\n"),MAXSIZE);
  ^
elks/tools/mfsck/mfsck.c:679:4: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
   printf(_("Inode %d marked unused, "
   ^
elks/tools/mfsck/mfsck.c:730:4: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
   printf (_("Inode %d marked unused, "
   ^
elks/tools/mfsck/mfsck.c:1380:3: warning: %ld in format string (no. 1) requires 'long' but the argument type is 'unsigned long'. [invalidPrintfArgType_sint]
  printf(_("\n%6ld inodes used (%ld%%)\n"),(INODES-free),
  ^
elks/tools/mfsck/mfsck.c:1380:3: warning: %ld in format string (no. 2) requires 'long' but the argument type is 'unsigned long'. [invalidPrintfArgType_sint]
  printf(_("\n%6ld inodes used (%ld%%)\n"),(INODES-free),
  ^
elks/tools/mfsck/mfsck.c:1385:3: warning: %ld in format string (no. 1) requires 'long' but the argument type is 'unsigned long'. [invalidPrintfArgType_sint]
  printf(_("%6ld zones used (%ld%%)\n"),(ZONES-free),
  ^
elks/tools/mfsck/mfsck.c:1385:3: warning: %ld in format string (no. 2) requires 'long' but the argument type is 'unsigned long'. [invalidPrintfArgType_sint]
  printf(_("%6ld zones used (%ld%%)\n"),(ZONES-free),
  ^
elks/tools/mfsck/mfsck.c:237:13: style: The scope of the variable 'ct' can be reduced. [variableScope]
 int i = 0, ct;
            ^
elks/tools/mfsck/mfsck.c:238:8: style: The scope of the variable 'p' can be reduced. [variableScope]
 char *p, *q;
       ^
elks/tools/mfsck/mfsck.c:255:6: style: The scope of the variable 'c' can be reduced. [variableScope]
 int c;
     ^
elks/tools/mfsck/mfsck.c:788:9: style: Variable 'result' is assigned a value that is never used. [unreadVariable]
 result = 0;
        ^
elks/tools/mfsck/mfsck.c:821:9: style: Variable 'result' is assigned a value that is never used. [unreadVariable]
 result = 0;
        ^
elks/tools/mkromfs/mkromfs.c:720:9: style: Condition 'fd>=0' is always false [knownConditionTrueFalse]
 if (fd >= 0) close (fd);
        ^
elks/tools/mkromfs/mkromfs.c:554:12: note: Assignment 'fd=-1', assigned value is -1
 int fd = -1;
           ^
elks/tools/mkromfs/mkromfs.c:720:9: note: Condition 'fd>=0' is always false
 if (fd >= 0) close (fd);
        ^
elks/tools/mkromfs/mkromfs.c:185:8: warning: sscanf() without field width limits can crash with huge input data. [invalidscanf]
   if (sscanf(buf, "%s %c %d %d", dev, &type, &major, &minor) != 4) break;
       ^
elks/tools/mkromfs/mkromfs.c:542:7: style: Variable 'err' is reassigned a value before the old one has been used. [redundantAssignment]
  err = 0;
      ^
elks/tools/mkromfs/mkromfs.c:502:9: note: err is assigned
    err = errno;
        ^
elks/tools/mkromfs/mkromfs.c:542:7: note: err is overwritten
  err = 0;
      ^
elks/tools/mkromfs/mkromfs.c:542:7: style: Variable 'err' is reassigned a value before the old one has been used. [redundantAssignment]
  err = 0;
      ^
elks/tools/mkromfs/mkromfs.c:514:9: note: err is assigned
    err = 1;
        ^
elks/tools/mkromfs/mkromfs.c:542:7: note: err is overwritten
  err = 0;
      ^
elks/tools/mkromfs/mkromfs.c:542:7: style: Variable 'err' is reassigned a value before the old one has been used. [redundantAssignment]
  err = 0;
      ^
elks/tools/mkromfs/mkromfs.c:521:9: note: err is assigned
    err = errno;
        ^
elks/tools/mkromfs/mkromfs.c:542:7: note: err is overwritten
  err = 0;
      ^
elks/tools/mkromfs/mkromfs.c:542:7: style: Variable 'err' is reassigned a value before the old one has been used. [redundantAssignment]
  err = 0;
      ^
elks/tools/mkromfs/mkromfs.c:530:9: note: err is assigned
    err = errno;
        ^
elks/tools/mkromfs/mkromfs.c:542:7: note: err is overwritten
  err = 0;
      ^
elks/tools/mkromfs/mkromfs.c:492:7: style: The scope of the variable 'count' can be reduced. [variableScope]
  int count;
      ^
elks/tools/mkromfs/mkromfs.c:560:7: style: Local variable 'fd' shadows outer variable [shadowVariable]
  int fd = open ("romfs.bin", O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP);
      ^
elks/tools/mkromfs/mkromfs.c:554:6: note: Shadowed declaration
 int fd = -1;
     ^
elks/tools/mkromfs/mkromfs.c:560:7: note: Shadow variable
  int fd = open ("romfs.bin", O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP);
      ^
elks/tools/mkromfs/mkromfs.c:707:8: style: Local variable 'count' shadows outer variable [shadowVariable]
   int count = write (fd, &inode_disk, sizeof (inode_disk_t));
       ^
elks/tools/mkromfs/mkromfs.c:662:7: note: Shadowed declaration
  int count = write (fd, &super, sizeof (super_disk_t));
      ^
elks/tools/mkromfs/mkromfs.c:707:8: note: Shadow variable
   int count = write (fd, &inode_disk, sizeof (inode_disk_t));
       ^
elks/tools/mkromfs/mkromfs.c:742:8: style: Variable 'err' is assigned a value that is never used. [unreadVariable]
   err = 1;
       ^
elks/tools/objdump86/objdump86.c:498:4: warning: %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
   printf("SYMS %u\n", num_syms);
   ^
elks/tools/objdump86/objdump86.c:244:17: style: The scope of the variable 'magic' can be reduced. [variableScope]
   unsigned int magic;
                ^
elks/tools/objdump86/objdump86.c:245:10: style: The scope of the variable 'filelength' can be reduced. [variableScope]
   long  filelength;
         ^
elks/tools/objdump86/objdump86.c:246:10: style: The scope of the variable 'archentry' can be reduced. [variableScope]
   char  archentry[sizeof(struct ar_hdr)]; /* sizeof ar_hdr.ar_name*/
         ^
elks/tools/objdump86/objdump86.c:758:13: style: The scope of the variable 'buf' can be reduced. [variableScope]
static char buf[20];
            ^
elks/tools/objdump86/objdump86.c:907:9: style: The scope of the variable 'n_value' can be reduced. [variableScope]
   long n_value;
        ^
elks/tools/objdump86/objdump86.c:908:8: style: The scope of the variable 'n_sclass' can be reduced. [variableScope]
   int n_sclass, n_numaux, n_type;
       ^
elks/tools/objdump86/objdump86.c:908:18: style: The scope of the variable 'n_numaux' can be reduced. [variableScope]
   int n_sclass, n_numaux, n_type;
                 ^
elks/tools/objdump86/objdump86.c:908:28: style: The scope of the variable 'n_type' can be reduced. [variableScope]
   int n_sclass, n_numaux, n_type;
                           ^
elks/tools/setboot/setboot.c:169:10: warning: %d in format string (no. 1) requires 'int *' but the argument type is 'unsigned int *'. [invalidScanfArgType_int]
     if (sscanf(&argv[1][2], "%d,%d,%d", &SecPerTrk, &NumHeads, &NumTracks) != 3)
         ^
elks/tools/setboot/setboot.c:169:10: warning: %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'. [invalidScanfArgType_int]
     if (sscanf(&argv[1][2], "%d,%d,%d", &SecPerTrk, &NumHeads, &NumTracks) != 3)
         ^
elks/tools/setboot/setboot.c:169:10: warning: %d in format string (no. 3) requires 'int *' but the argument type is 'unsigned int *'. [invalidScanfArgType_int]
     if (sscanf(&argv[1][2], "%d,%d,%d", &SecPerTrk, &NumHeads, &NumTracks) != 3)
         ^
elks/tools/setboot/setboot.c:171:6: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
     printf("Updating BPB to %d sectors, %d heads, %d tracks\n",
     ^
elks/tools/setboot/setboot.c:171:6: warning: %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
     printf("Updating BPB to %d sectors, %d heads, %d tracks\n",
     ^
elks/tools/setboot/setboot.c:171:6: warning: %d in format string (no. 3) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
     printf("Updating BPB to %d sectors, %d heads, %d tracks\n",
     ^
elks/tools/setboot/setboot.c:174:10: warning: %d in format string (no. 1) requires 'int *' but the argument type is 'unsigned int *'. [invalidScanfArgType_int]
     if (sscanf(&argv[1][2], "%d,%d", &SecPerTrk, &NumHeads) != 2)
         ^
elks/tools/setboot/setboot.c:174:10: warning: %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'. [invalidScanfArgType_int]
     if (sscanf(&argv[1][2], "%d,%d", &SecPerTrk, &NumHeads) != 2)
         ^
elks/tools/setboot/setboot.c:176:6: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
     printf("Updating BPB to %d sectors, %d heads\n", SecPerTrk, NumHeads);
     ^
elks/tools/setboot/setboot.c:176:6: warning: %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
     printf("Updating BPB to %d sectors, %d heads\n", SecPerTrk, NumHeads);
     ^
elks/tools/setboot/setboot.c:183:9: warning: %d in format string (no. 1) requires 'int *' but the argument type is 'unsigned int *'. [invalidScanfArgType_int]
    if (sscanf(&argv[1][2], "%d,%d,%d", &SecPerTrk, &NumHeads, &NumTracks) != 3)
        ^
elks/tools/setboot/setboot.c:183:9: warning: %d in format string (no. 2) requires 'int *' but the argument type is 'unsigned int *'. [invalidScanfArgType_int]
    if (sscanf(&argv[1][2], "%d,%d,%d", &SecPerTrk, &NumHeads, &NumTracks) != 3)
        ^
elks/tools/setboot/setboot.c:183:9: warning: %d in format string (no. 3) requires 'int *' but the argument type is 'unsigned int *'. [invalidScanfArgType_int]
    if (sscanf(&argv[1][2], "%d,%d,%d", &SecPerTrk, &NumHeads, &NumTracks) != 3)
        ^
elks/tools/setboot/setboot.c:185:5: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    printf("Creating partition table %d sectors, %d heads, %d cylinders\n",
    ^
elks/tools/setboot/setboot.c:185:5: warning: %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    printf("Creating partition table %d sectors, %d heads, %d cylinders\n",
    ^
elks/tools/setboot/setboot.c:185:5: warning: %d in format string (no. 3) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
    printf("Creating partition table %d sectors, %d heads, %d cylinders\n",
    ^
elks/tools/setboot/setboot.c:150:13: style: The scope of the variable 'i' can be reduced. [variableScope]
 int count, i;
            ^
elkscmd/advent/advgen.c:1696:7: style: Variable 'base' is assigned a value that is never used. [unreadVariable]
 base = sizeof(game);
      ^
elkscmd/advent/advgen.c:1685:14: style: Unused variable: t [unusedVariable]
 struct trav t;
             ^
elkscmd/advent/database.c:309:6: warning: Redundant assignment of 'loc' to itself. [selfAssignment]
 loc = loc;  /* eliminate compiler warning */
     ^
elkscmd/advent/database.c:319:8: warning: Redundant assignment of 'where' to itself. [selfAssignment]
 where = where;  /* eliminate compiler warning */
       ^
elkscmd/advent/database.c:42:8: style: The scope of the variable 'p' can be reduced. [variableScope]
 char *p;
       ^
elkscmd/advent/database.c:160:10: style: The scope of the variable 'm' can be reduced. [variableScope]
 uint8_t m[6];
         ^
elkscmd/advent/database.c:161:6: style: The scope of the variable 'i' can be reduced. [variableScope]
 int i;
     ^
elkscmd/advent/database.c:162:6: style: The scope of the variable 'n' can be reduced. [variableScope]
 int n = 0;
     ^
elkscmd/advent/database.c:195:17: style: The scope of the variable 'i' can be reduced. [variableScope]
 register short i;
                ^
elkscmd/advent/database.c:197:13: style: The scope of the variable 'sCmp' can be reduced. [variableScope]
 auto short sCmp;
            ^
elkscmd/advent/database.c:309:6: style: Variable 'loc' is assigned a value that is never used. [unreadVariable]
 loc = loc;  /* eliminate compiler warning */
     ^
elkscmd/advent/database.c:319:8: style: Variable 'where' is assigned a value that is never used. [unreadVariable]
 where = where;  /* eliminate compiler warning */
       ^
elkscmd/advent/english.c:101:22: style: The scope of the variable 'msg' can be reduced. [variableScope]
 auto short wordval, msg;
                     ^
elkscmd/advent/lib.c:54:2: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
 sprintf(buf, "%d", (unsigned int) v);
 ^
elkscmd/advent/turn.c:26:74: style:inconclusive: Boolean expression '8==0' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
 if (game.newloc != game.loc && !forced(game.loc) && game.cond[game.loc] & NOPIRAT == 0) {
                                                                         ^
elkscmd/advent/turn.c:675:89: style:inconclusive: Boolean expression '8==1' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
   if (j != game.odloc[i] && j != game.dloc[i] && !(i == (DWARFMAX - 1) && game.cond[j] & NOPIRAT == 1))
                                                                                        ^
elkscmd/advent/turn.c:26:74: style: Boolean result is used in bitwise operation. Clarify expression with parentheses. [clarifyCondition]
 if (game.newloc != game.loc && !forced(game.loc) && game.cond[game.loc] & NOPIRAT == 0) {
                                                                         ^
elkscmd/advent/turn.c:675:89: style: Boolean result is used in bitwise operation. Clarify expression with parentheses. [clarifyCondition]
   if (j != game.odloc[i] && j != game.dloc[i] && !(i == (DWARFMAX - 1) && game.cond[j] & NOPIRAT == 1))
                                                                                        ^
elkscmd/advent/turn.c:505:13: style: The scope of the variable 'yea' can be reduced. [variableScope]
 auto short yea, i, j;
            ^
elkscmd/advent/turn.c:505:18: style: The scope of the variable 'i' can be reduced. [variableScope]
 auto short yea, i, j;
                 ^
elkscmd/advent/turn.c:505:21: style: The scope of the variable 'j' can be reduced. [variableScope]
 auto short yea, i, j;
                    ^
elkscmd/advent/verb.c:970:12: warning: Either the condition 'verb>31' is redundant or the array 'actmsg[32]' is accessed at index 32, which is out of bounds. [arrayIndexOutOfBoundsCond]
 i = actmsg[verb];
           ^
elkscmd/advent/verb.c:968:23: note: Assuming that condition 'verb>31' is not redundant
 if (verb < 1 || verb > 31)
                      ^
elkscmd/advent/verb.c:970:12: note: Array index out of bounds
 i = actmsg[verb];
           ^
elkscmd/advent/verb.c:751:13: style: The scope of the variable 'i' can be reduced. [variableScope]
 auto short i;
            ^
elkscmd/ash/autocomplete.c:93:9: style: The scope of the variable 'path' can be reduced. [variableScope]
   char path[PATH_MAX];
        ^
elkscmd/ash/bltin/catf.c:32:0: information: Skipping configuration 'MAXBSIZE' since the value of 'MAXBSIZE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      char *buf = stalloc(BUFSIZE());
^
elkscmd/ash/bltin/catf.c:69:0: information: Skipping configuration 'MAXBSIZE' since the value of 'MAXBSIZE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
     while ((i = read(fd, buf, BUFSIZE())) > 0) {
^
elkscmd/ash/bltin/catf.c:32:0: information: Skipping configuration 'SBUFSIZE' since the value of 'SBUFSIZE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      char *buf = stalloc(BUFSIZE());
^
elkscmd/ash/bltin/catf.c:69:0: information: Skipping configuration 'SBUFSIZE' since the value of 'SBUFSIZE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
     while ((i = read(fd, buf, BUFSIZE())) > 0) {
^
elkscmd/ash/bltin/catf.c:46:16: error: Uninitialized variable: savehandler [uninitvar]
     handler = savehandler;
               ^
elkscmd/ash/bltin/expr.c:187:9: warning: %d in format string (no. 1) requires 'int' but the argument type is 'signed long'. [invalidPrintfArgType_sint]
        sprintf(p, "%d", valsp->u.num);
        ^
elkscmd/ash/bltin/expr.c:311:0: information: Skipping configuration 'S_IFIFO' since the value of 'S_IFIFO' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
     i = S_IFIFO;
^
elkscmd/ash/bltin/expr.c:131:10: warning: Either the condition 'opname==NULL' is redundant or there is possible null pointer dereference: opname. [nullPointerRedundantCheck]
     if (opname[0] == '(' && opname[1] == '\0') {
         ^
elkscmd/ash/bltin/expr.c:129:17: note: Assuming that condition 'opname==NULL' is not redundant
     if (opname == NULL)
                ^
elkscmd/ash/bltin/expr.c:131:10: note: Null pointer dereference
     if (opname[0] == '(' && opname[1] == '\0') {
         ^
elkscmd/ash/bltin/expr.c:419:16: warning: Either the condition '(sp+1)->u.num==0' is redundant or there is division by zero at line 419. [zerodivcond]
     sp->u.num /= (sp + 1)->u.num;
               ^
elkscmd/ash/bltin/expr.c:417:26: note: Assuming that condition '(sp+1)->u.num==0' is not redundant
     if ((sp + 1)->u.num == 0)
                         ^
elkscmd/ash/bltin/expr.c:419:16: note: Division by zero
     sp->u.num /= (sp + 1)->u.num;
               ^
elkscmd/ash/bltin/expr.c:424:16: warning: Either the condition '(sp+1)->u.num==0' is redundant or there is division by zero at line 424. [zerodivcond]
     sp->u.num %= (sp + 1)->u.num;
               ^
elkscmd/ash/bltin/expr.c:422:26: note: Assuming that condition '(sp+1)->u.num==0' is not redundant
     if ((sp + 1)->u.num == 0)
                         ^
elkscmd/ash/bltin/expr.c:424:16: note: Division by zero
     sp->u.num %= (sp + 1)->u.num;
               ^
elkscmd/ash/bltin/umask.c:12:11: style: Unused variable: mask [unusedVariable]
      int mask;
          ^
elkscmd/ash/cd.c:96:7: warning: Either the condition '(dest=bltinlookup("HOME",1))==(void*)0' is redundant or there is possible null pointer dereference: dest. [nullPointerRedundantCheck]
 if (*dest == '/' || (path = bltinlookup("CDPATH", 1)) == NULL)
      ^
elkscmd/ash/cd.c:92:39: note: Assuming that condition '(dest=bltinlookup("HOME",1))==(void*)0' is not redundant
  if ((dest = bltinlookup("HOME", 1)) == NULL)
                                      ^
elkscmd/ash/cd.c:96:7: note: Null pointer dereference
 if (*dest == '/' || (path = bltinlookup("CDPATH", 1)) == NULL)
      ^
elkscmd/ash/error.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/ash/error.c:219:0: information: Skipping configuration 'ECOMM' since the value of 'ECOMM' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 { ECOMM,     ALL,     "remote access failed"      },
^
elkscmd/ash/error.c:200:0: information: Skipping configuration 'EDQUOT' since the value of 'EDQUOT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 { EDQUOT,    ALL,     "disk quota exceeded"       },
^
elkscmd/ash/error.c:234:0: information: Skipping configuration 'ELIBACC' since the value of 'ELIBACC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 { ELIBACC,   E_EXEC,  "shared library missing"    },
^
elkscmd/ash/error.c:228:0: information: Skipping configuration 'ELOOP' since the value of 'ELOOP' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 { ELOOP,     ALL,     "symbolic link loop"        },
^
elkscmd/ash/error.c:216:0: information: Skipping configuration 'EMULTIHOP' since the value of 'EMULTIHOP' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 { EMULTIHOP, ALL,     "remote access failed"      },
^
elkscmd/ash/error.c:213:0: information: Skipping configuration 'ENOLINK' since the value of 'ENOLINK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 { ENOLINK,   ALL,     "remote access failed"      },
^
elkscmd/ash/error.c:203:0: information: Skipping configuration 'ENOSR' since the value of 'ENOSR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 { ENOSR,     ALL,     "no streams resources"      },
^
elkscmd/ash/error.c:222:0: information: Skipping configuration 'ESTALE' since the value of 'ESTALE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 { ESTALE,    ALL,     "remote access failed"      },
^
elkscmd/ash/eval.c:140:24: style: The scope of the variable 'p' can be reduced. [variableScope]
        register char *p;
                       ^
elkscmd/ash/eval.c:141:24: style: The scope of the variable 'concat' can be reduced. [variableScope]
        register char *concat;
                       ^
elkscmd/ash/eval.c:142:16: style: The scope of the variable 'ap' can be reduced. [variableScope]
        char **ap;
               ^
elkscmd/ash/exec.c:121:8: style: The scope of the variable 'cmdname' can be reduced. [variableScope]
 char *cmdname;
       ^
elkscmd/ash/exec.c:316:29: style: The scope of the variable 'pp' can be reduced. [variableScope]
 register struct tblentry **pp;
                            ^
elkscmd/ash/exec.c:633:20: style: The scope of the variable 'pp' can be reduced. [variableScope]
 struct tblentry **pp;
                   ^
elkscmd/ash/exec.c:668:20: style: The scope of the variable 'pp' can be reduced. [variableScope]
 struct tblentry **pp;
                   ^
elkscmd/ash/exec.c:498:17: style: Local variable 'i' shadows outer variable [shadowVariable]
   int ngroups, i;
                ^
elkscmd/ash/exec.c:407:6: note: Shadowed declaration
 int i;
     ^
elkscmd/ash/exec.c:498:17: note: Shadow variable
   int ngroups, i;
                ^
elkscmd/ash/exec.c:149:8: style: Unused variable: p [unusedVariable]
 char *p;
       ^
elkscmd/ash/expand.c:585:8: style: The scope of the variable 'ifs' can be reduced. [variableScope]
 char *ifs;
       ^
elkscmd/ash/expand.c:467:13: style: Local variable 'exitstatus' shadows outer variable [shadowVariable]
 extern int exitstatus;
            ^
elkscmd/ash/eval.h:40:12: note: Shadowed declaration
extern int exitstatus;  /* exit status of last command */
           ^
elkscmd/ash/expand.c:467:13: note: Shadow variable
 extern int exitstatus;
            ^
elkscmd/ash/expand.c:903:11: style: Local variable 'q' shadows outer variable [shadowVariable]
    char *q;
          ^
elkscmd/ash/expand.c:810:8: note: Shadowed declaration
 char *q;
       ^
elkscmd/ash/expand.c:903:11: note: Shadow variable
    char *q;
          ^
elkscmd/ash/expand.c:486:12: style: Variable 'temp[31]' is assigned a value that is never used. [unreadVariable]
  temp[31] = '\0';
           ^
elkscmd/ash/expand.c:750:8: style: Variable 'path' is assigned a value that is never used. [unreadVariable]
  path = r;
       ^
elkscmd/ash/expand.c:775:9: style: Variable 'path' is assigned a value that is never used. [unreadVariable]
   path = r;  /* succeed */
        ^
elkscmd/ash/input.c:135:6: style: The scope of the variable 'c' can be reduced. [variableScope]
 int c;
     ^
elkscmd/ash/input.c:331:6: style: The scope of the variable 'fd2' can be reduced. [variableScope]
 int fd2;
     ^
elkscmd/ash/input.c:252:0: information: Skipping configuration 'EWOULDBLOCK' since the value of 'EWOULDBLOCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                        if (parsefile->fd == 0 && errno == EWOULDBLOCK) {
^
elkscmd/ash/linenoise_elks.c:634:18: style: Condition 'maskmode==1' is always false [knownConditionTrueFalse]
    if (maskmode == 1) {
                 ^
elkscmd/ash/linenoise_elks.c:775:35: style: Condition 'maskmode==1' is always false [knownConditionTrueFalse]
                char d = (maskmode==1) ? '*' : c;
                                  ^
elkscmd/ash/linenoise_elks.c:1274:25: style: Condition 'history_max_len==0' is always false [knownConditionTrueFalse]
    if (history_max_len == 0) return 0;
                        ^
elkscmd/ash/linenoise_elks.c:939:19: style: Checking if unsigned expression 'c' is less than zero. [unsignedLessThanZero]
            if (c < 0) return l.len;
                  ^
elkscmd/ash/main.c:127:20: style: Condition 'state==0' is always true [knownConditionTrueFalse]
  } else if (state == 0 || iflag == 0 || ! rootshell)
                   ^
elkscmd/ash/main.c:115:10: note: Assignment 'state=0', assigned value is 0
 state = 0;
         ^
elkscmd/ash/main.c:127:20: note: Condition 'state==0' is always true
  } else if (state == 0 || iflag == 0 || ! rootshell)
                   ^
elkscmd/ash/miscbltin.c:151:6: style: The scope of the variable 'i' can be reduced. [variableScope]
 int i;
     ^
elkscmd/ash/mkinit.c:272:6: style: The scope of the variable 'indent' can be reduced. [variableScope]
 int indent;
     ^
elkscmd/ash/mkinit.c:330:7: style: The scope of the variable 'line' can be reduced. [variableScope]
 char line[1024];
      ^
elkscmd/ash/mkinit.c:331:21: style: The scope of the variable 'q' can be reduced. [variableScope]
 register char *p, *q;
                    ^
elkscmd/ash/mkinit.c:174:6: style: Unused variable: fd [unusedVariable]
 int fd;
     ^
elkscmd/ash/mkinit.c:175:7: style: Unused variable: c [unusedVariable]
 char c;
      ^
elkscmd/ash/mksignames.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/ash/mksignames.c:70:0: information: Skipping configuration 'SIGABRT' since the value of 'SIGABRT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 SIGABRT, "ABRT", "abort",
^
elkscmd/ash/mksignames.c:70:0: information: Skipping configuration 'SIGABRT;SIGIOT' since the value of 'SIGABRT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 SIGABRT, "ABRT", "abort",
^
elkscmd/ash/mksignames.c:95:0: information: Skipping configuration 'SIGCHLD;SIGCLD' since the value of 'SIGCLD' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 SIGCLD, "CLD", NULL,
^
elkscmd/ash/mksignames.c:95:0: information: Skipping configuration 'SIGCLD' since the value of 'SIGCLD' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 SIGCLD, "CLD", NULL,
^
elkscmd/ash/mksignames.c:117:0: information: Skipping configuration 'SIGCONT' since the value of 'SIGCONT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 SIGCONT, "CONT", NULL,
^
elkscmd/ash/mksignames.c:76:0: information: Skipping configuration 'SIGEMT' since the value of 'SIGEMT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 SIGEMT, "EMT", "EMT trap",
^
elkscmd/ash/mksignames.c:126:0: information: Skipping configuration 'SIGIO' since the value of 'SIGIO' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 SIGIO, "IO", NULL,
^
elkscmd/ash/mksignames.c:104:0: information: Skipping configuration 'SIGPOLL' since the value of 'SIGPOLL' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 SIGPOLL, "POLL", "Poll",
^
elkscmd/ash/mksignames.c:138:0: information: Skipping configuration 'SIGPROF' since the value of 'SIGPROF' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 SIGPROF, "PROF", "Profiling alarm",
^
elkscmd/ash/mksignames.c:101:0: information: Skipping configuration 'SIGPWR' since the value of 'SIGPWR' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 SIGPWR, "PWR", "Power fail",
^
elkscmd/ash/mksignames.c:111:0: information: Skipping configuration 'SIGSTOP' since the value of 'SIGSTOP' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 SIGSTOP, "STOP", "Stopped",
^
elkscmd/ash/mksyntax.c:255:8: style: Condition 'c<0' is always true [knownConditionTrueFalse]
 if (c < 0) sign = 1;
       ^
elkscmd/ash/mksyntax.c:254:7: note: Assignment 'c=-1', assigned value is -1
 c = -1;
      ^
elkscmd/ash/mksyntax.c:255:8: note: Condition 'c<0' is always true
 if (c < 0) sign = 1;
       ^
elkscmd/ash/mksyntax.c:261:30: style: Condition 'sign' is always true [knownConditionTrueFalse]
 printf("%s %d bit chars\n", sign ? "signed" : "unsigned", nbits);
                             ^
elkscmd/ash/mksyntax.c:255:20: note: Assignment 'sign=1', assigned value is 1
 if (c < 0) sign = 1;
                   ^
elkscmd/ash/mksyntax.c:261:30: note: Condition 'sign' is always true
 printf("%s %d bit chars\n", sign ? "signed" : "unsigned", nbits);
                             ^
elkscmd/ash/mksyntax.c:234:7: style: The scope of the variable 'd' can be reduced. [variableScope]
 char d;
      ^
elkscmd/ash/options.c:235:18: style: The scope of the variable 'ap' can be reduced. [variableScope]
 register char **ap;
                 ^
elkscmd/ash/options.c:161:9: error: Uninitialized variable: q [uninitvar]
    if (q == NULL || minusc != NULL)
        ^
elkscmd/ash/options.c:161:9: error: Uninitialized variable: q [uninitvar]
    if (q == NULL || minusc != NULL)
        ^
elkscmd/ash/options.c:158:12: note: Assuming condition is false
    if (*p == '\0')
           ^
elkscmd/ash/options.c:161:9: note: Uninitialized variable: q
    if (q == NULL || minusc != NULL)
        ^
elkscmd/ash/options.c:184:11: warning: Either the condition '(p=mystrchr(optchar,flag))==(void*)0' is redundant or there is overflow in pointer subtraction. [nullPointerArithmeticRedundantCheck]
 optval[p - optchar] = val;
          ^
elkscmd/ash/options.c:182:34: note: Assuming that condition '(p=mystrchr(optchar,flag))==(void*)0' is not redundant
 if ((p = strchr(optchar, flag)) == NULL)
                                 ^
elkscmd/ash/options.c:184:11: note: Null pointer subtraction
 optval[p - optchar] = val;
          ^
elkscmd/ash/output.c:502:6: style: The scope of the variable 'i' can be reduced. [variableScope]
 int i;
     ^
elkscmd/ash/output.c:428:22: warning: Either the condition 'num' is redundant or there is division by zero at line 428. [zerodivcond]
    *--p = digit[num % base];
                     ^
elkscmd/ash/output.c:427:11: note: Assuming that condition 'num' is not redundant
   while (num) {
          ^
elkscmd/ash/output.c:429:12: note: Assignment to 'num/=base'
    num /= base;
           ^
elkscmd/ash/output.c:428:22: note: Division by zero
    *--p = digit[num % base];
                     ^
elkscmd/ash/output.c:304:1: error: va_list 'ap' was opened but not closed by va_end(). [va_end_missing]
}
^
elkscmd/ash/parser.c:502:11: style: Redundant initialization for 'orig_rpp'. The initialized value is overwritten before it is read. [redundantInitialization]
 orig_rpp = rpp;
          ^
elkscmd/ash/parser.c:489:24: note: orig_rpp is initialized
 union node **orig_rpp = rpp;
                       ^
elkscmd/ash/parser.c:502:11: note: orig_rpp is overwritten
 orig_rpp = rpp;
          ^
elkscmd/ash/parser.c:224:6: style: The scope of the variable 't' can be reduced. [variableScope]
 int t;
     ^
elkscmd/ash/parser.c:251:19: style: The scope of the variable 'prev' can be reduced. [variableScope]
 struct nodelist *prev;
                  ^
elkscmd/ash/parser.c:1104:18: style: Local variable 'out' shadows outer variable [shadowVariable]
  register char *out;
                 ^
elkscmd/ash/parser.c:777:17: note: Shadowed declaration
 register char *out;
                ^
elkscmd/ash/parser.c:1104:18: note: Shadow variable
  register char *out;
                 ^
elkscmd/ash/parser.c:1105:7: style: Local variable 'c' shadows outer variable [shadowVariable]
  int c;
      ^
elkscmd/ash/parser.c:776:6: note: Shadowed declaration
 int c = firstc;
     ^
elkscmd/ash/parser.c:1105:7: note: Shadow variable
  int c;
      ^
elkscmd/ash/parser.c:1106:7: style: Local variable 'savelen' shadows outer variable [shadowVariable]
  int savelen;
      ^
elkscmd/ash/parser.c:1079:6: note: Shadowed declaration
 int savelen;
     ^
elkscmd/ash/parser.c:1106:7: note: Shadow variable
  int savelen;
      ^
elkscmd/ash/parser.c:1107:9: style: Local variable 'str' shadows outer variable [shadowVariable]
  char *str;
        ^
elkscmd/ash/parser.c:1076:17: note: Shadowed declaration
 char *volatile str;
                ^
elkscmd/ash/parser.c:1107:9: note: Shadow variable
  char *str;
        ^
elkscmd/ash/parser.c:1084:7: error: Uninitialized variable: str [uninitvar]
  if (str)
      ^
elkscmd/ash/parser.c:1087:13: error: Uninitialized variable: savehandler [uninitvar]
  handler = savehandler;
            ^
elkscmd/ash/parser.c:332:11: style: Variable 'got' is assigned a value that is never used. [unreadVariable]
  if ((got=readtoken()) != TDO) {
          ^
elkscmd/ash/redir.c:107:6: style: The scope of the variable 'fd' can be reduced. [variableScope]
 int fd;
     ^
elkscmd/ash/redir.c:341:0: information: Skipping configuration 'F_DUPFD' since the value of 'F_DUPFD' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 newfd = fcntl(from, F_DUPFD, to);
^
elkscmd/ash/redir.c:188:0: information: Skipping configuration 'O_APPEND' since the value of 'O_APPEND' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  if ((f = open(fname, O_WRONLY|O_CREAT|O_APPEND, 0666)) < 0)
^
elkscmd/ash/redir.c:178:0: information: Skipping configuration 'O_CREAT' since the value of 'O_CREAT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  if ((f = open(fname, O_WRONLY|O_CREAT|O_TRUNC, 0666)) < 0)
^
elkscmd/ash/redir.c:245:0: information: Skipping configuration 'SIGTSTP' since the value of 'SIGTSTP' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  signal(SIGTSTP, SIG_IGN);
^
elkscmd/ash/test/malloc.c:136:0: error: failed to evaluate #elif condition, division/modulo by zero [preprocessorErrorDirective]
#elif ALIGNMENT % _EM_LSIZE
^
elkscmd/ash/test/malloc.c:0:0: information: This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details. [noValidConfiguration]

^
elkscmd/ash/trap.c:207:7: style: Variable '*t' is reassigned a value before the old one has been used. [redundantAssignment]
   *t = S_HARD_IGN;
      ^
elkscmd/ash/trap.c:202:8: note: *t is assigned
    *t = S_HARD_IGN;
       ^
elkscmd/ash/trap.c:207:7: note: *t is overwritten
   *t = S_HARD_IGN;
      ^
elkscmd/ash/var.c:489:15: style: The scope of the variable 'vpp' can be reduced. [variableScope]
 struct var **vpp;
              ^
elkscmd/ash/var.c:531:23: style: The scope of the variable 'vp' can be reduced. [variableScope]
 register struct var *vp;
                      ^
elkscmd/basic/basic.c:226:31: portability: Casting between unsigned char * and float * which have an incompatible binary data representation. [invalidPointerCast]
            host_outputFloat(*(float*)p);
                              ^
elkscmd/basic/basic.c:336:6: portability: Casting between unsigned char * and float * which have an incompatible binary data representation. [invalidPointerCast]
    *(float *)p = val;
     ^
elkscmd/basic/basic.c:343:13: portability: Casting between unsigned char * and float * which have an incompatible binary data representation. [invalidPointerCast]
    return *(float *)p;
            ^
elkscmd/basic/basic.c:492:10: portability: Casting between unsigned char * and float * which have an incompatible binary data representation. [invalidPointerCast]
        *(float *)p = val;
         ^
elkscmd/basic/basic.c:510:10: portability: Casting between unsigned char * and float * which have an incompatible binary data representation. [invalidPointerCast]
        *(float *)p = val;
         ^
elkscmd/basic/basic.c:543:6: portability: Casting between unsigned char * and float * which have an incompatible binary data representation. [invalidPointerCast]
    *(float *)p = start;
     ^
elkscmd/basic/basic.c:545:6: portability: Casting between unsigned char * and float * which have an incompatible binary data representation. [invalidPointerCast]
    *(float *)p = step;
     ^
elkscmd/basic/basic.c:547:6: portability: Casting between unsigned char * and float * which have an incompatible binary data representation. [invalidPointerCast]
    *(float *)p = end;
     ^
elkscmd/basic/basic.c:668:6: portability: Casting between unsigned char * and float * which have an incompatible binary data representation. [invalidPointerCast]
    *(float *)p = val;
     ^
elkscmd/basic/basic.c:729:13: portability: Casting between unsigned char * and float * which have an incompatible binary data representation. [invalidPointerCast]
    return *(float *)p;
            ^
elkscmd/basic/basic.c:762:13: portability: Casting between unsigned char * and float * which have an incompatible binary data representation. [invalidPointerCast]
    return *(float *)p;
            ^
elkscmd/basic/basic.c:783:20: portability: Casting between unsigned char * and float * which have an incompatible binary data representation. [invalidPointerCast]
        ret.val = *(float *)p;
                   ^
elkscmd/basic/basic.c:785:21: portability: Casting between unsigned char * and float * which have an incompatible binary data representation. [invalidPointerCast]
        ret.step = *(float *)p;
                    ^
elkscmd/basic/basic.c:787:20: portability: Casting between unsigned char * and float * which have an incompatible binary data representation. [invalidPointerCast]
        ret.end = *(float *)p;
                   ^
elkscmd/basic/basic.c:882:14: portability: Casting between unsigned char * and float * which have an incompatible binary data representation. [invalidPointerCast]
            *(float*)tokenOut = (float)strtod(numStr, 0);
             ^
elkscmd/basic/basic.c:1013:19: portability: Casting between unsigned char * and float * which have an incompatible binary data representation. [invalidPointerCast]
        numVal = *(float*)tokenBuffer;
                  ^
elkscmd/basic/basic.c:1805:29: portability: Casting between unsigned char * and float * which have an incompatible binary data representation. [invalidPointerCast]
        ret = stackPushNum(*(float *)p);
                            ^
elkscmd/basic/basic.c:1730:9: style: The scope of the variable 'para' can be reduced. [variableScope]
    int para[n];
        ^
elkscmd/basic/basic.c:1616:27: style: Checking if unsigned expression 'startLine' is less than zero. [unsignedLessThanZero]
            if (startLine <= 0)
                          ^
elkscmd/basic/basic.c:1641:23: style: Checking if unsigned expression 'startLine' is less than zero. [unsignedLessThanZero]
        if (startLine <= 0)
                      ^
elkscmd/basic/basic.c:1991:23: style: Checking if unsigned expression 'startLine' is less than zero. [unsignedLessThanZero]
        if (startLine <= 0)
                      ^
elkscmd/basic/basic.c:504:24: style: Local variable 'p' shadows outer variable [shadowVariable]
        unsigned char *p = &mem[sysVARSTART];
                       ^
elkscmd/basic/basic.c:486:20: note: Shadowed declaration
    unsigned char *p = findVariable(name, VAR_TYPE_NUM|VAR_TYPE_FORNEXT);
                   ^
elkscmd/basic/basic.c:504:24: note: Shadow variable
        unsigned char *p = &mem[sysVARSTART];
                       ^
elkscmd/basic/basic.c:1830:13: style: Local variable 'val' shadows outer variable [shadowVariable]
        int val = parseExpression();
            ^
elkscmd/basic/basic.c:1828:9: note: Shadowed declaration
    int val;
        ^
elkscmd/basic/basic.c:1830:13: note: Shadow variable
        int val = parseExpression();
            ^
elkscmd/basic/host-8018x.c:36:43: style: Clarify calculation precedence for '&' and '?'. [clarifyCalculation]
            return inb(0x2003) & (1 << 3) ? 1 : 0;
                                          ^
elkscmd/basic/host-pc98.c:200:26: style: The scope of the variable 'intvec' can be reduced. [variableScope]
    unsigned long __far *intvec;
                         ^
elkscmd/basic/host-pc98.c:201:25: style: The scope of the variable 'lioaddr' can be reduced. [variableScope]
    unsigned int __far *lioaddr;
                        ^
elkscmd/basic/host-pc98.c:202:18: style: The scope of the variable 'i' can be reduced. [variableScope]
    unsigned int i;
                 ^
elkscmd/basic/host.c:237:16: style: Expression is always true because 'else if' condition is opposite to previous condition at line 232. [multiCondition]
  } else if (x < (float)0.0) {
               ^
elkscmd/basic/host.c:232:9: note: first condition
  if (x >= (float)0.0) {
        ^
elkscmd/basic/host.c:237:16: note: else if condition is opposite to first condition
  } else if (x < (float)0.0) {
               ^
elkscmd/bc/execute.c:728:11: style: Variable 'inchar' is assigned a value that is never used. [unreadVariable]
   inchar = byte(pc);
          ^
elkscmd/bc/execute.c:733:14: style: Variable 'inchar' is assigned a value that is never used. [unreadVariable]
      inchar = byte(pc);
             ^
elkscmd/bc/execute.c:741:9: style: Variable 'inchar' is assigned a value that is never used. [unreadVariable]
 inchar = byte(pc);
        ^
elkscmd/bc/load.c:220:29: portability: Shifting a negative value is technically undefined behaviour [shiftNegativeLHS]
  addbyte ( (char) label_no >> 8);
                            ^
elkscmd/bc/number.c:62:3: warning: Either the condition 'temp==NULL' is redundant or there is possible null pointer dereference: temp. [nullPointerRedundantCheck]
  temp->n_sign = PLUS;
  ^
elkscmd/bc/number.c:61:12: note: Assuming that condition 'temp==NULL' is not redundant
  if (temp == NULL) out_of_memory ();
           ^
elkscmd/bc/number.c:62:3: note: Null pointer dereference
  temp->n_sign = PLUS;
  ^
elkscmd/bc/number.c:63:3: warning: Either the condition 'temp==NULL' is redundant or there is possible null pointer dereference: temp. [nullPointerRedundantCheck]
  temp->n_len = length;
  ^
elkscmd/bc/number.c:61:12: note: Assuming that condition 'temp==NULL' is not redundant
  if (temp == NULL) out_of_memory ();
           ^
elkscmd/bc/number.c:63:3: note: Null pointer dereference
  temp->n_len = length;
  ^
elkscmd/bc/number.c:64:3: warning: Either the condition 'temp==NULL' is redundant or there is possible null pointer dereference: temp. [nullPointerRedundantCheck]
  temp->n_scale = scale;
  ^
elkscmd/bc/number.c:61:12: note: Assuming that condition 'temp==NULL' is not redundant
  if (temp == NULL) out_of_memory ();
           ^
elkscmd/bc/number.c:64:3: note: Null pointer dereference
  temp->n_scale = scale;
  ^
elkscmd/bc/number.c:65:3: warning: Either the condition 'temp==NULL' is redundant or there is possible null pointer dereference: temp. [nullPointerRedundantCheck]
  temp->n_refs = 1;
  ^
elkscmd/bc/number.c:61:12: note: Assuming that condition 'temp==NULL' is not redundant
  if (temp == NULL) out_of_memory ();
           ^
elkscmd/bc/number.c:65:3: note: Null pointer dereference
  temp->n_refs = 1;
  ^
elkscmd/bc/number.c:66:3: warning: Either the condition 'temp==NULL' is redundant or there is possible null pointer dereference: temp. [nullPointerRedundantCheck]
  temp->n_value[0] = 0;
  ^
elkscmd/bc/number.c:61:12: note: Assuming that condition 'temp==NULL' is not redundant
  if (temp == NULL) out_of_memory ();
           ^
elkscmd/bc/number.c:66:3: note: Null pointer dereference
  temp->n_value[0] = 0;
  ^
elkscmd/bc/number.c:787:11: warning: Either the condition 'num1==NULL' is redundant or there is possible null pointer dereference: num1. [nullPointerRedundantCheck]
  memset (num1, 0, n1->n_len+n1->n_scale+extra+2);
          ^
elkscmd/bc/number.c:786:12: note: Assuming that condition 'num1==NULL' is not redundant
  if (num1 == NULL) out_of_memory();
           ^
elkscmd/bc/number.c:787:11: note: Null pointer dereference
  memset (num1, 0, n1->n_len+n1->n_scale+extra+2);
          ^
elkscmd/bc/number.c:793:11: warning: Either the condition 'num2==NULL' is redundant or there is possible null pointer dereference: num2. [nullPointerRedundantCheck]
  memcpy (num2, n2->n_value, len2);
          ^
elkscmd/bc/number.c:792:12: note: Assuming that condition 'num2==NULL' is not redundant
  if (num2 == NULL) out_of_memory();
           ^
elkscmd/bc/number.c:793:11: note: Null pointer dereference
  memcpy (num2, n2->n_value, len2);
          ^
elkscmd/bc/number.c:796:11: warning: Either the condition 'num2==NULL' is redundant or there is possible null pointer dereference: n2ptr. [nullPointerRedundantCheck]
  while (*n2ptr == 0)
          ^
elkscmd/bc/number.c:792:12: note: Assuming that condition 'num2==NULL' is not redundant
  if (num2 == NULL) out_of_memory();
           ^
elkscmd/bc/number.c:795:11: note: Assignment 'n2ptr=num2', assigned value is 0
  n2ptr = num2;
          ^
elkscmd/bc/number.c:796:11: note: Null pointer dereference
  while (*n2ptr == 0)
          ^
elkscmd/bc/number.c:788:15: warning: Either the condition 'num1==NULL' is redundant or there is pointer arithmetic with NULL pointer. [nullPointerArithmeticRedundantCheck]
  memcpy (num1+1, n1->n_value, n1->n_len+n1->n_scale);
              ^
elkscmd/bc/number.c:786:12: note: Assuming that condition 'num1==NULL' is not redundant
  if (num1 == NULL) out_of_memory();
           ^
elkscmd/bc/number.c:788:15: note: Null pointer addition
  memcpy (num1+1, n1->n_value, n1->n_len+n1->n_scale);
              ^
elkscmd/bc/number.c:794:9: warning: Either the condition 'num2==NULL' is redundant or there is pointer arithmetic with NULL pointer. [nullPointerArithmeticRedundantCheck]
  *(num2+len2) = 0;
        ^
elkscmd/bc/number.c:792:12: note: Assuming that condition 'num2==NULL' is not redundant
  if (num2 == NULL) out_of_memory();
           ^
elkscmd/bc/number.c:794:9: note: Null pointer addition
  *(num2+len2) = 0;
        ^
elkscmd/bc/number.c:554:7: style: The scope of the variable 'cmp_res' can be reduced. [variableScope]
  int cmp_res;
      ^
elkscmd/bc/number.c:597:7: style: The scope of the variable 'cmp_res' can be reduced. [variableScope]
  int cmp_res;
      ^
elkscmd/bc/number.c:747:18: style: The scope of the variable 'ptr1' can be reduced. [variableScope]
  unsigned char *ptr1, *ptr2, *n2ptr, *qptr;
                 ^
elkscmd/bc/number.c:747:25: style: The scope of the variable 'ptr2' can be reduced. [variableScope]
  unsigned char *ptr1, *ptr2, *n2ptr, *qptr;
                        ^
elkscmd/bc/number.c:747:40: style: The scope of the variable 'qptr' can be reduced. [variableScope]
  unsigned char *ptr1, *ptr2, *n2ptr, *qptr;
                                       ^
elkscmd/bc/number.c:748:16: style: The scope of the variable 'val' can be reduced. [variableScope]
  int  scale1, val;
               ^
elkscmd/bc/number.c:749:53: style: The scope of the variable 'count' can be reduced. [variableScope]
  unsigned int  len1, len2, scale2, qdigits, extra, count;
                                                    ^
elkscmd/bc/number.c:750:17: style: The scope of the variable 'qdig' can be reduced. [variableScope]
  unsigned int  qdig, qguess, borrow, carry;
                ^
elkscmd/bc/number.c:750:23: style: The scope of the variable 'qguess' can be reduced. [variableScope]
  unsigned int  qdig, qguess, borrow, carry;
                      ^
elkscmd/bc/number.c:750:31: style: The scope of the variable 'borrow' can be reduced. [variableScope]
  unsigned int  qdig, qguess, borrow, carry;
                              ^
elkscmd/bc/number.c:750:39: style: The scope of the variable 'carry' can be reduced. [variableScope]
  unsigned int  qdig, qguess, borrow, carry;
                                      ^
elkscmd/bc/number.c:753:17: style: The scope of the variable 'norm' can be reduced. [variableScope]
  unsigned int  norm;
                ^
elkscmd/bc/storage.c:72:16: style: The scope of the variable 'f' can be reduced. [variableScope]
  bc_function *f;
               ^
elkscmd/bc/storage.c:369:16: style: The scope of the variable 'ix1' can be reduced. [variableScope]
  int log, ix, ix1;
               ^
elkscmd/bc/storage.c:454:8: style: The scope of the variable 'temp' can be reduced. [variableScope]
  long temp;
       ^
elkscmd/bc/storage.c:455:8: style: The scope of the variable 'toobig' can be reduced. [variableScope]
  char toobig;
       ^
elkscmd/bc/storage.c:552:11: style: The scope of the variable 'num_ptr' can be reduced. [variableScope]
  bc_num *num_ptr;
          ^
elkscmd/bc/storage.c:624:11: style: The scope of the variable 'num_ptr' can be reduced. [variableScope]
  bc_num *num_ptr;
          ^
elkscmd/bc/storage.c:692:11: style: The scope of the variable 'num_ptr' can be reduced. [variableScope]
  bc_num *num_ptr;
          ^
elkscmd/bc/storage.c:762:11: style: The scope of the variable 'num_ptr' can be reduced. [variableScope]
  bc_num *num_ptr;
          ^
elkscmd/bc/storage.c:824:7: style: The scope of the variable 'ix' can be reduced. [variableScope]
  int ix;
      ^
elkscmd/bc/storage.c:848:10: style: The scope of the variable 'ix' can be reduced. [variableScope]
  int    ix;
         ^
elkscmd/bc/storage.c:902:11: style: The scope of the variable 'n_temp' can be reduced. [variableScope]
  bc_num *n_temp;
          ^
elkscmd/bc/storage.c:928:10: style: Variable 'n_temp' is assigned a value that is never used. [unreadVariable]
  n_temp = get_array_num (ix, 0);
         ^
elkscmd/busyelks/cmd/banner.c:130:16: style: The scope of the variable 'len' can be reduced. [variableScope]
  int a, b, c, len, ind;
               ^
elkscmd/busyelks/cmd/basename.c:27:8: style: The scope of the variable 'line' can be reduced. [variableScope]
 char *line;
       ^
elkscmd/busyelks/cmd/cal.c:54:16: style: The scope of the variable 'year' can be reduced. [variableScope]
  register int year;
               ^
elkscmd/busyelks/cmd/cal.c:56:16: style: The scope of the variable 'arg1val' can be reduced. [variableScope]
  register int arg1val;
               ^
elkscmd/busyelks/cmd/cal.c:57:7: style: The scope of the variable 'arg1len' can be reduced. [variableScope]
  int arg1len;
      ^
elkscmd/busyelks/cmd/cal.c:58:7: style: The scope of the variable 'arg2val' can be reduced. [variableScope]
  int arg2val;
      ^
elkscmd/busyelks/cmd/cal.c:132:18: style: The scope of the variable 'outp' can be reduced. [variableScope]
  register char *outp;
                 ^
elkscmd/busyelks/cmd/cal.c:70:14: error: Uninitialized variable: year [uninitvar]
   do3months(year, arg1val);
             ^
elkscmd/busyelks/cmd/cal.c:118:7: error: Uninitialized variable: year [uninitvar]
  if (year < 1 || year > 9999) cal_usage(badarg);
      ^
elkscmd/busyelks/cmd/cal.c:70:14: note: Calling function 'domonth', 1st argument 'year' value is <Uninit>
   do3months(year, arg1val);
             ^
elkscmd/busyelks/cmd/cal.c:118:7: note: Uninitialized variable: year
  if (year < 1 || year > 9999) cal_usage(badarg);
      ^
elkscmd/busyelks/cmd/cat.c:35:6: style: The scope of the variable 'i' can be reduced. [variableScope]
 int i, fd;
     ^
elkscmd/busyelks/cmd/cat.c:35:9: style: The scope of the variable 'fd' can be reduced. [variableScope]
 int i, fd;
        ^
elkscmd/busyelks/cmd/cksum.c:98:23: warning: Either the condition 'aux>=sizeof(crctab)/sizeof(crctab[0])' is redundant or the array 'crctab[256]' is accessed at index 256, which is out of bounds. [arrayIndexOutOfBoundsCond]
 s = (s << 8) ^ crctab[i];
                      ^
elkscmd/busyelks/cmd/cksum.c:94:11: note: Assuming that condition 'aux>=sizeof(crctab)/sizeof(crctab[0])' is not redundant
  if (aux >= sizeof(crctab) / sizeof(crctab[0])) aux = 0;
          ^
elkscmd/busyelks/cmd/cksum.c:93:10: note: Assignment 'i=aux++', assigned value is 256
  i = aux++;
         ^
elkscmd/busyelks/cmd/cksum.c:98:23: note: Array index out of bounds
 s = (s << 8) ^ crctab[i];
                      ^
elkscmd/busyelks/cmd/cksum.c:84:16: style: The scope of the variable 'i' can be reduced. [variableScope]
  register int i;
               ^
elkscmd/busyelks/cmd/cksum.c:110:7: style: The scope of the variable 'nb' can be reduced. [variableScope]
  int nb;
      ^
elkscmd/busyelks/cmd/clock.c:409:7: style: Local variable 'save_control' shadows outer variable [shadowVariable]
      save_control = cmos_read (11);   /* tell the clock it's being set */
      ^
elkscmd/busyelks/cmd/clock.c:235:17: note: Shadowed declaration
  unsigned char save_control, save_freq_select;
                ^
elkscmd/busyelks/cmd/clock.c:409:7: note: Shadow variable
      save_control = cmos_read (11);   /* tell the clock it's being set */
      ^
elkscmd/busyelks/cmd/clock.c:231:10: style: Unused variable: last_time [unusedVariable]
  time_t last_time;
         ^
elkscmd/busyelks/cmd/clock.c:233:10: style: Unused variable: factor [unusedVariable]
  double factor;
         ^
elkscmd/busyelks/cmd/clock.c:234:10: style: Unused variable: not_adjusted [unusedVariable]
  double not_adjusted;
         ^
elkscmd/busyelks/cmd/clock.c:235:17: style: Unused variable: save_control [unusedVariable]
  unsigned char save_control, save_freq_select;
                ^
elkscmd/busyelks/cmd/clock.c:366:23: style: Unused variable: tz [unusedVariable]
      struct timezone tz;
                      ^
elkscmd/busyelks/cmd/cmp.c:22:7: style: The scope of the variable 'cc1' can be reduced. [variableScope]
 int  cc1;
      ^
elkscmd/busyelks/cmd/cmp.c:23:7: style: The scope of the variable 'cc2' can be reduced. [variableScope]
 int  cc2;
      ^
elkscmd/busyelks/cmd/cut.c:117:7: style: The scope of the variable 'flag' can be reduced. [variableScope]
  int flag;
      ^
elkscmd/busyelks/cmd/cut.c:154:13: style: The scope of the variable 'length' can be reduced. [variableScope]
  int i, j, length, maxcol;
            ^
elkscmd/busyelks/cmd/diff.c:1149:10: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
  eof1 = fscanf(ls1, "%s\n", file1);
         ^
elkscmd/busyelks/cmd/diff.c:1151:10: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
  eof2 = fscanf(ls2, "%s\n", file2);
         ^
elkscmd/busyelks/cmd/diff.c:1159:11: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
   eof1 = fscanf(ls1, "%s\n", file1);
          ^
elkscmd/busyelks/cmd/diff.c:1164:11: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
   eof2 = fscanf(ls2, "%s\n", file2);
          ^
elkscmd/busyelks/cmd/diff.c:1188:10: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
  eof1 = fscanf(ls1, "%s\n", file1);
         ^
elkscmd/busyelks/cmd/diff.c:1190:10: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
  eof2 = fscanf(ls2, "%s\n", file2);
         ^
elkscmd/busyelks/cmd/diff.c:1197:10: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
  eof1 = fscanf(ls1, " %s\n", file1);
         ^
elkscmd/busyelks/cmd/diff.c:1203:10: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
  eof2 = fscanf(ls2, " %s\n", file2);
         ^
elkscmd/busyelks/cmd/diff.c:439:2: warning: Either the condition 'l==0' is redundant or there is possible null pointer dereference: l. [nullPointerRedundantCheck]
 l->l_text = (char *) xmalloc((size + 2) * sizeof(char));
 ^
elkscmd/busyelks/cmd/diff.c:440:9: note: Assuming that condition 'l==0' is not redundant
 if ((l == 0) || (l->l_text == 0)) fatal_error("Out of memory", "");
        ^
elkscmd/busyelks/cmd/diff.c:439:2: note: Null pointer dereference
 l->l_text = (char *) xmalloc((size + 2) * sizeof(char));
 ^
elkscmd/busyelks/cmd/diff.c:305:9: style: The scope of the variable 'temp' can be reduced. [variableScope]
  FILE *temp;
        ^
elkscmd/busyelks/cmd/diff.c:1138:7: style: The scope of the variable 'difference' can be reduced. [variableScope]
  int difference, eof1, eof2;
      ^
elkscmd/busyelks/cmd/dirname.c:11:8: style: The scope of the variable 'line' can be reduced. [variableScope]
 char *line;
       ^
elkscmd/busyelks/cmd/echo.c:23:7: style: Condition '!first' is always true [knownConditionTrueFalse]
  if (!first)
      ^
elkscmd/busyelks/cmd/echo.c:21:10: note: Assignment 'first=0', assigned value is 0
 first = 0;
         ^
elkscmd/busyelks/cmd/echo.c:23:7: note: Condition '!first' is always true
  if (!first)
      ^
elkscmd/busyelks/cmd/echo.c:19:8: style: The scope of the variable 'sptr' can be reduced. [variableScope]
 char *sptr;
       ^
elkscmd/busyelks/cmd/ed.c:96:6: style: The scope of the variable 'len' can be reduced. [variableScope]
 int len;
     ^
elkscmd/busyelks/cmd/ed.c:590:6: style: The scope of the variable 'len' can be reduced. [variableScope]
 int len;
     ^
elkscmd/busyelks/cmd/ed.c:130:7: warning: In expression like '*A++' the result of '*' is unused. Did you intend to write '(*A)++;'? [clarifyStatement]
   *cp++;
      ^
elkscmd/busyelks/cmd/fdisk.c:377:6: warning: %ld in format string (no. 11) requires 'long' but the argument type is 'unsigned long'. [invalidPrintfArgType_sint]
     printf("%s%d  %c     %2d    %3d    %5d     %2d    %3d    %5d    %2x    %10ld\n",
     ^
elkscmd/busyelks/cmd/fdisk.c:352:30: style: The scope of the variable 'partition' can be reduced. [variableScope]
    unsigned char ptbl[512],*partition;
                             ^
elkscmd/busyelks/cmd/fdisk.c:353:19: style: The scope of the variable 'seccnt' can be reduced. [variableScope]
    unsigned long seccnt;
                  ^
elkscmd/busyelks/cmd/fdisk.c:350:7: style:inconclusive: Function 'list_partition' argument 1 names different: declaration 'dev' definition 'devname'. [funcArgNamesDifferent]
char *devname;
      ^
elkscmd/busyelks/cmd/fdisk.c:44:34: note: Function 'list_partition' argument 1 names different: declaration 'dev' definition 'devname'.
static void list_partition(char *dev);
                                 ^
elkscmd/busyelks/cmd/fdisk.c:350:7: note: Function 'list_partition' argument 1 names different: declaration 'dev' definition 'devname'.
char *devname;
      ^
elkscmd/busyelks/cmd/fdisk.c:174:0: information: Skipping configuration 'PART_TYPE' since the value of 'PART_TYPE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    pentry[4]=PART_TYPE;
^
elkscmd/busyelks/cmd/find.c:870:6: portability: Assigning an integer to a pointer is not portable. [AssignmentIntegerToAddress]
  *q = '\0';
     ^
elkscmd/busyelks/cmd/find.c:226:17: error: Allocation with Malloc, strcpy doesn't release it. [leakNoVarFunctionCall]
  return strcpy(Malloc(strlen(s) + 1), s);
                ^
elkscmd/busyelks/cmd/find.c:234:28: style: The scope of the variable 'last' can be reduced. [variableScope]
  char **pathlist, *path, *last;
                           ^
elkscmd/busyelks/cmd/find.c:275:8: style: The scope of the variable 'dp' can be reduced. [variableScope]
  DIR *dp;
       ^
elkscmd/busyelks/cmd/find.c:276:18: style: The scope of the variable 'de' can be reduced. [variableScope]
  struct dirent *de;
                 ^
elkscmd/busyelks/cmd/find.c:493:14: style: The scope of the variable 'w' can be reduced. [variableScope]
  int m = 0, w, op;
             ^
elkscmd/busyelks/cmd/find.c:493:17: style: The scope of the variable 'op' can be reduced. [variableScope]
  int m = 0, w, op;
                ^
elkscmd/busyelks/cmd/find.c:567:21: style: The scope of the variable 'p' can be reduced. [variableScope]
  struct node *nd, *p, *nd2;
                    ^
elkscmd/busyelks/cmd/find.c:601:20: style: The scope of the variable 'p' can be reduced. [variableScope]
  struct node *n, *p;
                   ^
elkscmd/busyelks/cmd/find.c:789:16: style: The scope of the variable 'n' can be reduced. [variableScope]
  register int n;
               ^
elkscmd/busyelks/cmd/find.c:570:10: style: Variable 't' is assigned a value that is never used. [unreadVariable]
  if ((t = find_lex(*++ipp)) == OP_OR) {
         ^
elkscmd/busyelks/cmd/find.c:652:0: information: Skipping configuration 'S_IFLNK' since the value of 'S_IFLNK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  p->n_info.n_int.n_val = S_IFLNK;
^
elkscmd/busyelks/cmd/fsck.c:498:6: style: Condition '!inode_buffer' is always false [knownConditionTrueFalse]
 if (!inode_buffer)
     ^
elkscmd/busyelks/cmd/fsck.c:734:6: style: Condition 'inode' is always true [knownConditionTrueFalse]
 if (inode && S_ISDIR(inode->i_mode))
     ^
elkscmd/busyelks/cmd/fsck.c:717:6: note: Assuming that condition '!inode' is not redundant
 if (!inode)
     ^
elkscmd/busyelks/cmd/fsck.c:734:6: note: Condition 'inode' is always true
 if (inode && S_ISDIR(inode->i_mode))
     ^
elkscmd/busyelks/cmd/fsck.c:157:2: warning: fprintf format string requires 1 parameter but 2 are given. [wrongPrintfScanfArgNum]
 fprintf(stderr,fmt_string,program_name,device_name);
 ^
elkscmd/busyelks/cmd/fsck.c:540:4: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
   printf("Inode %d marked not used, but used for file '",
   ^
elkscmd/busyelks/cmd/fsck.c:267:6: style: The scope of the variable 'c' can be reduced. [variableScope]
 int c;
     ^
elkscmd/busyelks/cmd/fsck.c:907:7: style: Local variable 'i' shadows outer variable [shadowVariable]
  int i, free;
      ^
elkscmd/busyelks/cmd/fsck.c:831:6: note: Shadowed declaration
 int i;
     ^
elkscmd/busyelks/cmd/fsck.c:907:7: note: Shadow variable
  int i, free;
      ^
elkscmd/busyelks/cmd/fsck.c:171:9: warning: Redundant code: Found a statement that begins with string constant. [constStatement]
 printd("Unmap requested: ");
        ^
elkscmd/busyelks/cmd/fsck.c:173:10: warning: Redundant code: Found a statement that begins with string constant. [constStatement]
  printd("not dirty\n");
         ^
elkscmd/busyelks/cmd/fsck.c:177:10: warning: Redundant code: Found a statement that begins with string constant. [constStatement]
  printd("none mapped\n");
         ^
elkscmd/busyelks/cmd/fsck.c:190:29: warning: Found suspicious operator ',' [constStatement]
 printd("Block %d unmapped.", mapped_block);
                            ^
elkscmd/busyelks/cmd/fsck.c:222:19: warning: Found suspicious operator ',' [constStatement]
  nr, inode_offset, inode_block);
                  ^
elkscmd/busyelks/cmd/fsck.c:228:11: warning: Redundant code: Found a statement that begins with string constant. [constStatement]
   printd("Block was already mapped.\n");
          ^
elkscmd/busyelks/cmd/fsck.c:340:33: warning: Found suspicious operator ',' [constStatement]
 printd("read_block %x %lx ", nr, dest);
                                ^
elkscmd/busyelks/cmd/fsck.c:400:35: warning: Found suspicious operator ',' [constStatement]
 printd("map_block %x %d (", inode, blknr);
                                  ^
elkscmd/busyelks/cmd/fsck.c:405:10: warning: Redundant code: Found a statement that begins with string constant. [constStatement]
  printd(")direct\n");
         ^
elkscmd/busyelks/cmd/fsck.c:410:10: warning: Redundant code: Found a statement that begins with string constant. [constStatement]
  printd(")ind\n");
         ^
elkscmd/busyelks/cmd/fsck.c:594:24: warning: Found suspicious operator ',' [constStatement]
 printd("add_zone %d\n", * znr);
                       ^
elkscmd/busyelks/cmd/fsck.c:629:28: warning: Found suspicious operator ',' [constStatement]
 printd("add_zone_ind %d\n", * znr);
                           ^
elkscmd/busyelks/cmd/fsck.c:646:29: warning: Found suspicious operator ',' [constStatement]
 printd("add_zone_dind %d\n", * znr);
                            ^
elkscmd/busyelks/cmd/fsck.c:661:9: warning: Redundant code: Found a statement that begins with string constant. [constStatement]
 printd("check_zones\n");
        ^
elkscmd/busyelks/cmd/fsck.c:675:9: warning: Redundant code: Found a statement that begins with string constant. [constStatement]
 printd("check_zones_end\n");
        ^
elkscmd/busyelks/cmd/fsck.c:692:33: warning: Found suspicious operator ',' [constStatement]
 printd("check_file %x %lx ",ino, offset);
                                ^
elkscmd/busyelks/cmd/fsck.c:693:9: warning: Redundant code: Found a statement that begins with string constant. [constStatement]
 printd("\n");
        ^
elkscmd/busyelks/cmd/fsck.c:746:31: warning: Found suspicious operator ',' [constStatement]
 printd("recursive_check %d\n", ino);
                              ^
elkscmd/busyelks/cmd/fsck.c:767:24: warning: Found suspicious operator ',' [constStatement]
 printd("bad_zone %d\n", i);
                       ^
elkscmd/busyelks/cmd/fsck.c:777:9: warning: Redundant code: Found a statement that begins with string constant. [constStatement]
 printd("check_counts\n");
        ^
elkscmd/busyelks/cmd/fsck.c:899:9: warning: Redundant code: Found a statement that begins with string constant. [constStatement]
 printd("check\n");
        ^
elkscmd/busyelks/cmd/fsck.c:472:6: style: Unused variable: foo [unusedVariable]
 int foo;
     ^
elkscmd/busyelks/cmd/fsck.c:595:9: style: Variable 'result' is assigned a value that is never used. [unreadVariable]
 result = 0;
        ^
elkscmd/busyelks/cmd/fsck.c:831:6: style: Unused variable: i [unusedVariable]
 int i;
     ^
elkscmd/busyelks/cmd/getty.c:95:39: style: The scope of the variable 'sz' can be reduced. [variableScope]
    int fp = open(HOSTFILE,O_RDONLY), sz;
                                      ^
elkscmd/busyelks/cmd/getty.c:147:9: style: The scope of the variable 'n' can be reduced. [variableScope]
    int n;
        ^
elkscmd/busyelks/cmd/getty.c:304:0: information: Skipping configuration 'ELKS_VERSION' since the value of 'ELKS_VERSION' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
       state(ELKS_VERSION);
^
elkscmd/busyelks/cmd/getty.c:183:11: style: Unused variable: ptr [unusedVariable]
    char *ptr;
          ^
elkscmd/busyelks/cmd/getty.c:124:2: warning: %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
 fprintf(stderr, "TRACE: put(%3d) => Col %u\n", ch, col);
 ^
elkscmd/busyelks/cmd/getty.c:126:2: warning: %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
 fprintf(stderr, "TRACE: put('%c') => Col %u\n", ch, col);
 ^
elkscmd/busyelks/cmd/grep.c:288:3: error: Common realloc mistake: 'mapped' nulled but not freed upon failure [memleakOnRealloc]
  mapped = (char *) realloc(mapped, buf_size);
  ^
elkscmd/busyelks/cmd/grep.c:234:16: style: The scope of the variable 'c' can be reduced. [variableScope]
  register int c;
               ^
elkscmd/busyelks/cmd/grep.c:236:10: style: The scope of the variable 'new_size' can be reduced. [variableScope]
  size_t new_size;
         ^
elkscmd/busyelks/cmd/head.c:19:9: style: The scope of the variable 'f' can be reduced. [variableScope]
  FILE *f;
        ^
elkscmd/busyelks/cmd/head.c:62:7: style: The scope of the variable 'c' can be reduced. [variableScope]
  int c;
      ^
elkscmd/busyelks/cmd/kill.c:27:6: style: The scope of the variable 'pid' can be reduced. [variableScope]
 int pid;
     ^
elkscmd/busyelks/cmd/l.c:54:7: style: The scope of the variable 'endslash' can be reduced. [variableScope]
 int  endslash;
      ^
elkscmd/busyelks/cmd/login.c:153:16: error: Uninitialized variable: entryp [uninitvar]
    login(pwd, entryp);
               ^
elkscmd/busyelks/cmd/login.c:99:14: style: Unused variable: entry [unusedVariable]
 struct utmp entry;
             ^
elkscmd/busyelks/cmd/login.c:101:14: style: Unused variable: newentry [unusedVariable]
 struct utmp newentry;
             ^
elkscmd/busyelks/cmd/login.c:103:9: style: Unused variable: tty_name [unusedVariable]
 char * tty_name;
        ^
elkscmd/busyelks/cmd/ls.c:114:19: style: The scope of the variable 'valid' can be reduced. [variableScope]
    int endslash, valid;
                  ^
elkscmd/busyelks/cmd/ls.c:268:9: style: The scope of the variable 'maxlen' can be reduced. [variableScope]
    int maxlen, i, len;
        ^
elkscmd/busyelks/cmd/ls.c:268:17: style: The scope of the variable 'i' can be reduced. [variableScope]
    int maxlen, i, len;
                ^
elkscmd/busyelks/cmd/ls.c:268:20: style: The scope of the variable 'len' can be reduced. [variableScope]
    int maxlen, i, len;
                   ^
elkscmd/busyelks/cmd/ls.c:269:12: style: The scope of the variable 'cp' can be reduced. [variableScope]
    char * cp;
           ^
elkscmd/busyelks/cmd/ls.c:239:8: style: Local variable 'cp' shadows outer variable [shadowVariable]
 char *cp;
       ^
elkscmd/busyelks/cmd/ls.c:156:12: note: Shadowed declaration
    char  *cp;
           ^
elkscmd/busyelks/cmd/ls.c:239:8: note: Shadow variable
 char *cp;
       ^
elkscmd/busyelks/cmd/ls.c:159:11: style: Unused variable: len [unusedVariable]
    long  len;
          ^
elkscmd/busyelks/cmd/ls.c:225:0: information: Skipping configuration 'S_ISLNK' since the value of 'S_ISLNK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 if (S_ISLNK (statbuf->st_mode))
^
elkscmd/busyelks/cmd/ls.c:250:0: information: Skipping configuration 'S_ISLNK' since the value of 'S_ISLNK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if ((flags & LSF_LONG) && S_ISLNK(statbuf->st_mode)) {
^
elkscmd/busyelks/cmd/ls.c:234:0: information: Skipping configuration 'S_ISSOCK' since the value of 'S_ISSOCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 else if (S_ISSOCK (statbuf->st_mode))
^
elkscmd/busyelks/cmd/man.c:231:14: error: The address of local variable 'nsu' is accessed at non-zero index. [objectIndex]
         curr[-1] = ':';
             ^
elkscmd/busyelks/cmd/man.c:172:35: note: Address of variable taken here.
      for(su=nsu=mansuff,step(&su,&nsu); su; step(&su, &nsu))
                                  ^
elkscmd/busyelks/cmd/man.c:172:35: note: Calling function 'step', 2nd argument '&nsu' value is lifetime=nsu
      for(su=nsu=mansuff,step(&su,&nsu); su; step(&su, &nsu))
                                  ^
elkscmd/busyelks/cmd/man.c:220:13: note: Assuming condition is false
   if( curr == 0 ) return;
            ^
elkscmd/busyelks/cmd/man.c:231:14: note: The address of local variable 'nsu' is accessed at non-zero index.
         curr[-1] = ':';
             ^
elkscmd/busyelks/cmd/man.c:231:14: error: The address of local variable 'nmc' is accessed at non-zero index. [objectIndex]
         curr[-1] = ':';
             ^
elkscmd/busyelks/cmd/man.c:184:33: note: Address of variable taken here.
   for(mc=nmc=manorcat,step(&mc,&nmc); mc; step(&mc, &nmc))
                                ^
elkscmd/busyelks/cmd/man.c:184:33: note: Calling function 'step', 2nd argument '&nmc' value is lifetime=nmc
   for(mc=nmc=manorcat,step(&mc,&nmc); mc; step(&mc, &nmc))
                                ^
elkscmd/busyelks/cmd/man.c:220:13: note: Assuming condition is false
   if( curr == 0 ) return;
            ^
elkscmd/busyelks/cmd/man.c:231:14: note: The address of local variable 'nmc' is accessed at non-zero index.
         curr[-1] = ':';
             ^
elkscmd/busyelks/cmd/man.c:231:14: error: The address of local variable 'nms' is accessed at non-zero index. [objectIndex]
         curr[-1] = ':';
             ^
elkscmd/busyelks/cmd/man.c:185:35: note: Address of variable taken here.
      for(ms=nms=mansect,step(&ms,&nms); ms; step(&ms, &nms))
                                  ^
elkscmd/busyelks/cmd/man.c:185:35: note: Calling function 'step', 2nd argument '&nms' value is lifetime=nms
      for(ms=nms=mansect,step(&ms,&nms); ms; step(&ms, &nms))
                                  ^
elkscmd/busyelks/cmd/man.c:220:13: note: Assuming condition is false
   if( curr == 0 ) return;
            ^
elkscmd/busyelks/cmd/man.c:231:14: note: The address of local variable 'nms' is accessed at non-zero index.
         curr[-1] = ':';
             ^
elkscmd/busyelks/cmd/man.c:231:14: error: The address of local variable 'nmp' is accessed at non-zero index. [objectIndex]
         curr[-1] = ':';
             ^
elkscmd/busyelks/cmd/man.c:186:31: note: Address of variable taken here.
  for(mp=nmp=manpath,step(&mp,&nmp); mp; step(&mp, &nmp))
                              ^
elkscmd/busyelks/cmd/man.c:186:31: note: Calling function 'step', 2nd argument '&nmp' value is lifetime=nmp
  for(mp=nmp=manpath,step(&mp,&nmp); mp; step(&mp, &nmp))
                              ^
elkscmd/busyelks/cmd/man.c:220:13: note: Assuming condition is false
   if( curr == 0 ) return;
            ^
elkscmd/busyelks/cmd/man.c:231:14: note: The address of local variable 'nmp' is accessed at non-zero index.
         curr[-1] = ':';
             ^
elkscmd/busyelks/cmd/man.c:391:27: style: Condition 'line_ptr!=0' is always true [knownConditionTrueFalse]
        else if( line_ptr != 0 && next_line_indent > 0 )
                          ^
elkscmd/busyelks/cmd/man.c:388:22: note: Assuming that condition 'line_ptr==0' is not redundant
        if( line_ptr == 0 || next_line_indent < 0 ||
                     ^
elkscmd/busyelks/cmd/man.c:391:27: note: Condition 'line_ptr!=0' is always true
        else if( line_ptr != 0 && next_line_indent > 0 )
                          ^
elkscmd/busyelks/cmd/man.c:245:9: style: The scope of the variable 'buf' can be reduced. [variableScope]
   char buf[256];
        ^
elkscmd/busyelks/cmd/man.c:507:9: style: The scope of the variable 'lbuf' can be reduced. [variableScope]
   char lbuf[10];
        ^
elkscmd/busyelks/cmd/man.c:506:8: style: Unused variable: ch [unusedVariable]
   int ch, i;
       ^
elkscmd/busyelks/cmd/man.c:815:14: style: Variable 'ch' is assigned a value that is never used. [unreadVariable]
   int *d, ch=0;
             ^
elkscmd/busyelks/cmd/min_init.c:90:14: style: Unused variable: fd [unusedVariable]
 int i, pid, fd;
             ^
elkscmd/busyelks/cmd/mkfs.c:238:6: style: Unused variable: i [unusedVariable]
 int i;
     ^
elkscmd/busyelks/cmd/mknod.c:14:17: style: The scope of the variable 'filetype' can be reduced. [variableScope]
 unsigned short filetype;
                ^
elkscmd/busyelks/cmd/mknod.c:15:6: style: The scope of the variable 'major' can be reduced. [variableScope]
 int major,minor;
     ^
elkscmd/busyelks/cmd/mknod.c:15:12: style: The scope of the variable 'minor' can be reduced. [variableScope]
 int major,minor;
           ^
elkscmd/busyelks/cmd/more.c:26:6: style: The scope of the variable 'fd' can be reduced. [variableScope]
 int fd;
     ^
elkscmd/busyelks/cmd/more.c:27:8: style: The scope of the variable 'name' can be reduced. [variableScope]
 char *name;
       ^
elkscmd/busyelks/cmd/more.c:29:6: style: The scope of the variable 'line' can be reduced. [variableScope]
 int line;
     ^
elkscmd/busyelks/cmd/more.c:30:6: style: The scope of the variable 'col' can be reduced. [variableScope]
 int col;
     ^
elkscmd/busyelks/cmd/more.c:25:8: style: Unused variable: fp [unusedVariable]
 FILE *fp;
       ^
elkscmd/busyelks/cmd/mount.c:23:8: style: The scope of the variable 'str' can be reduced. [variableScope]
 char *str;
       ^
elkscmd/busyelks/cmd/mv.c:26:8: style: The scope of the variable 'srcname' can be reduced. [variableScope]
 char *srcname;
       ^
elkscmd/busyelks/cmd/partype.c:111:47: style: The scope of the variable 'size' can be reduced. [variableScope]
    unsigned long min = 100UL, max = 16383UL, size;
                                              ^
elkscmd/busyelks/cmd/partype.c:45:19: style: struct member 'chs::head' is never used. [unusedStructMember]
    unsigned char head;
                  ^
elkscmd/busyelks/cmd/partype.c:46:19: style: struct member 'chs::sector' is never used. [unusedStructMember]
    unsigned char sector;
                  ^
elkscmd/busyelks/cmd/partype.c:47:19: style: struct member 'chs::cylinder' is never used. [unusedStructMember]
    unsigned char cylinder;
                  ^
elkscmd/busyelks/cmd/partype.c:51:19: style: struct member 'partentry::active' is never used. [unusedStructMember]
    unsigned char active;
                  ^
elkscmd/busyelks/cmd/partype.c:55:23: style: struct member 'partentry::system' is never used. [unusedStructMember]
    unsigned long int system;
                      ^
elkscmd/busyelks/cmd/passwd.c:37:9: style: Unused variable: n [unusedVariable]
    int n;
        ^
elkscmd/busyelks/cmd/ps.c:31:15: style: Unused variable: i [unusedVariable]
 unsigned int i;
              ^
elkscmd/busyelks/cmd/ps.c:65:9: style: Variable 'i' is assigned a value that is never used. [unreadVariable]
 if ((i = read(fd, dbuf, 64 )) != 64) {
        ^
elkscmd/busyelks/cmd/ps.c:48:9: style: Unused variable: j [unusedVariable]
 int i, j;
        ^
elkscmd/busyelks/cmd/ps.c:51:8: style: Unused variable: d [unusedVariable]
 int * d;
       ^
elkscmd/busyelks/cmd/ps.c:78:16: style: Unused variable: addr [unusedVariable]
 unsigned long addr;
               ^
elkscmd/busyelks/cmd/ramdisk.c:13:6: style: Unused variable: i [unusedVariable]
 int i;
     ^
elkscmd/busyelks/cmd/rm.c:12:6: style: Unused variable: fd [unusedVariable]
 int fd,er;
     ^
elkscmd/busyelks/cmd/rm.c:12:9: style: Unused variable: er [unusedVariable]
 int fd,er;
        ^
elkscmd/busyelks/cmd/sed.c:753:14: style: The scope of the variable 'numl' can be reduced. [variableScope]
  static int numl = 0;  /* current ind in addr-number table */
             ^
elkscmd/busyelks/cmd/sed.c:1041:27: style: The scope of the variable 'c' can be reduced. [variableScope]
  register char *p1, *p2, c;
                          ^
elkscmd/busyelks/cmd/sed.c:562:16: style: Local variable 'c' shadows outer variable [shadowVariable]
  register int c;  /* current-character pointer */
               ^
elkscmd/busyelks/cmd/sed.c:1529:12: note: Shadowed declaration
static int c;   /* Will be the next char to read, a kind of
           ^
elkscmd/busyelks/cmd/sed.c:562:16: note: Shadow variable
  register int c;  /* current-character pointer */
               ^
elkscmd/busyelks/cmd/sed.c:843:16: style: Local variable 'c' shadows outer variable [shadowVariable]
  register int c;
               ^
elkscmd/busyelks/cmd/sed.c:1529:12: note: Shadowed declaration
static int c;   /* Will be the next char to read, a kind of
           ^
elkscmd/busyelks/cmd/sed.c:843:16: note: Shadow variable
  register int c;
               ^
elkscmd/busyelks/cmd/sed.c:1005:7: style: Local variable 'c' shadows outer variable [shadowVariable]
  int c;
      ^
elkscmd/busyelks/cmd/sed.c:1529:12: note: Shadowed declaration
static int c;   /* Will be the next char to read, a kind of
           ^
elkscmd/busyelks/cmd/sed.c:1005:7: note: Shadow variable
  int c;
      ^
elkscmd/busyelks/cmd/sed.c:1041:27: style: Local variable 'c' shadows outer variable [shadowVariable]
  register char *p1, *p2, c;
                          ^
elkscmd/busyelks/cmd/sed.c:1529:12: note: Shadowed declaration
static int c;   /* Will be the next char to read, a kind of
           ^
elkscmd/busyelks/cmd/sed.c:1041:27: note: Shadow variable
  register char *p1, *p2, c;
                          ^
elkscmd/busyelks/cmd/sed.c:1090:8: style: Local variable 'c' shadows outer variable [shadowVariable]
  char c;   /* scratch character holder */
       ^
elkscmd/busyelks/cmd/sed.c:1529:12: note: Shadowed declaration
static int c;   /* Will be the next char to read, a kind of
           ^
elkscmd/busyelks/cmd/sed.c:1090:8: note: Shadow variable
  char c;   /* scratch character holder */
       ^
elkscmd/busyelks/cmd/sed.c:1238:7: style: Local variable 'c' shadows outer variable [shadowVariable]
  int c;
      ^
elkscmd/busyelks/cmd/sed.c:1529:12: note: Shadowed declaration
static int c;   /* Will be the next char to read, a kind of
           ^
elkscmd/busyelks/cmd/sed.c:1238:7: note: Shadow variable
  int c;
      ^
elkscmd/busyelks/cmd/sed.c:977:9: style: Variable 'ipc' is assigned a value that is never used. [unreadVariable]
    ipc = cmds;
        ^
elkscmd/busyelks/cmd/sh.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/busyelks/cmd/sh.c:497:3: error: printf format string requires 1 parameter but only 0 are given. [wrongPrintfScanfArgNum]
  printf("%s: no such file or directory\n");
  ^
elkscmd/busyelks/cmd/sh.c:131:8: style: Unused variable: cp [unusedVariable]
 char *cp;
       ^
elkscmd/busyelks/cmd/sh.c:132:7: style: Unused variable: buf [unusedVariable]
 char buf[PATH_MAX];
      ^
elkscmd/busyelks/cmd/sh.c:420:18: style: Unused variable: cp [unusedVariable]
 register char * cp;
                 ^
elkscmd/busyelks/cmd/sh.c:695:9: style: The scope of the variable 'alias' can be reduced. [variableScope]
 ALIAS *alias;
        ^
elkscmd/busyelks/cmd/sh.c:577:4: warning: Size of pointer 'alias' used instead of size of its data. [pointerSize]
   alias = (ALIAS *) malloc(sizeof(ALIAS *) * count);
   ^
elkscmd/busyelks/cmd/sort.c:301:7: style: The if condition is the same as the previous if condition [duplicateCondition]
  if (beg_fl) {   /* Check for end pos */
      ^
elkscmd/busyelks/cmd/sort.c:297:7: note: First condition
  if (beg_fl) {
      ^
elkscmd/busyelks/cmd/sort.c:301:7: note: Second condition
  if (beg_fl) {   /* Check for end pos */
      ^
elkscmd/busyelks/cmd/sort.c:465:8: style: The scope of the variable 'save_ch' can be reduced. [variableScope]
  char save_ch;   /* Used in stdin readings */
       ^
elkscmd/busyelks/cmd/sort.c:531:18: style: The scope of the variable 'ptr' can be reduced. [variableScope]
  register char *ptr;  /* Ptr to line */
                 ^
elkscmd/busyelks/cmd/sort.c:699:9: style: The scope of the variable 'last' can be reduced. [variableScope]
  char *last;   /* Pointer to end location */
        ^
elkscmd/busyelks/cmd/sort.c:891:7: style: The scope of the variable 'limit' can be reduced. [variableScope]
  int limit;
      ^
elkscmd/busyelks/cmd/sort.c:1013:16: style: The scope of the variable 'i' can be reduced. [variableScope]
  register int i;
               ^
elkscmd/busyelks/cmd/sort.c:1117:16: style: The scope of the variable 'ret' can be reduced. [variableScope]
  register int ret;  /* ret status of compare */
               ^
elkscmd/busyelks/cmd/sort.c:757:0: warning: Function 'cmp' argument order different: declaration 'el1, el2, field, ' definition 'el1, el1, el2, field' [funcArgOrderDifferent]
FIELD *field;
^
elkscmd/busyelks/cmd/sort.c:154:1: note: Function 'cmp' argument order different: declaration 'el1, el2, field, ' definition 'el1, el1, el2, field'
_PROTOTYPE(int cmp, (unsigned char *el1, unsigned char *el2, FIELD * field));
^
elkscmd/busyelks/cmd/sort.c:757:0: note: Function 'cmp' argument order different: declaration 'el1, el2, field, ' definition 'el1, el1, el2, field'
FIELD *field;
^
elkscmd/busyelks/cmd/stty.c:208:3: warning: %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'signed long'. [invalidPrintfArgType_uint]
  sprintf(line, "ispeed %lu baud; ospeed %lu baud;",
  ^
elkscmd/busyelks/cmd/stty.c:208:3: warning: %lu in format string (no. 2) requires 'unsigned long' but the argument type is 'signed long'. [invalidPrintfArgType_uint]
  sprintf(line, "ispeed %lu baud; ospeed %lu baud;",
  ^
elkscmd/busyelks/cmd/stty.c:214:3: warning: %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'signed long'. [invalidPrintfArgType_uint]
  sprintf(line, "speed %lu baud;", speed2long(ospeed));
  ^
elkscmd/busyelks/cmd/stty.c:462:12: warning: Char literal compared with pointer 'check'. Did you intend to dereference it? [charLiteralWithCharPtrCompare]
 if (check != '\0')
           ^
elkscmd/busyelks/cmd/stty.c:484:12: warning: Char literal compared with pointer 'check'. Did you intend to dereference it? [charLiteralWithCharPtrCompare]
 if (check != '\0')
           ^
elkscmd/busyelks/cmd/stty.c:310:0: information: Skipping configuration '_POSIX_VDISABLE' since the value of '_POSIX_VDISABLE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 print_char(termios.c_cc[VEOL], TEOL_DEF, "eol", all);
^
elkscmd/busyelks/cmd/stty.c:897:0: information: Skipping configuration '_POSIX_VDISABLE' since the value of '_POSIX_VDISABLE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 termios.c_cc[VEOL]= TEOL_DEF;
^
elkscmd/busyelks/cmd/stty.c:1082:0: information: Skipping configuration '_POSIX_VDISABLE' since the value of '_POSIX_VDISABLE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 if (chr == _POSIX_VDISABLE)
^
elkscmd/busyelks/cmd/stty.c:1203:0: information: Skipping configuration '_POSIX_VDISABLE' since the value of '_POSIX_VDISABLE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  chr= _POSIX_VDISABLE;
^
elkscmd/busyelks/cmd/swapon.c:22:10: style: Unused variable: sd [unusedVariable]
 int fd, sd;
         ^
elkscmd/busyelks/cmd/tail.c:97:7: style: The scope of the variable 'opt' can be reduced. [variableScope]
  int opt;
      ^
elkscmd/busyelks/cmd/tail.c:234:9: style: The scope of the variable 'start' can be reduced. [variableScope]
  char *start;   /* pointer to first desired character in buf */
        ^
elkscmd/busyelks/cmd/tar.c:323:6: style: The scope of the variable 'cc' can be reduced. [variableScope]
 int cc;
     ^
elkscmd/busyelks/cmd/tar.c:363:8: style: The scope of the variable 'cpold' can be reduced. [variableScope]
 char *cpold;
       ^
elkscmd/busyelks/cmd/tar.c:220:9: style: Variable 'chksum' is assigned a value that is never used. [unreadVariable]
 chksum = getoctal(hp->chksum, sizeof(hp->chksum));
        ^
elkscmd/busyelks/cmd/test.c:234:18: style: The scope of the variable 'opnd1' can be reduced. [variableScope]
  register char *opnd1, *opnd2;
                 ^
elkscmd/busyelks/cmd/test.c:234:26: style: The scope of the variable 'opnd2' can be reduced. [variableScope]
  register char *opnd1, *opnd2;
                         ^
elkscmd/busyelks/cmd/test.c:235:7: style: The scope of the variable 'res' can be reduced. [variableScope]
  int res;
      ^
elkscmd/busyelks/cmd/tinygrep.c:81:6: warning: %d in format string (no. 1) requires 'int' but the argument type is 'signed long'. [invalidPrintfArgType_sint]
     printf("%d: ", line);
     ^
elkscmd/busyelks/cmd/tinygrep.c:20:8: style: The scope of the variable 'fp' can be reduced. [variableScope]
 FILE *fp;
       ^
elkscmd/busyelks/cmd/tinygrep.c:22:8: style: The scope of the variable 'name' can be reduced. [variableScope]
 char *name;
       ^
elkscmd/busyelks/cmd/tinygrep.c:105:8: style: The scope of the variable 'cp1' can be reduced. [variableScope]
 char *cp1;
       ^
elkscmd/busyelks/cmd/tinygrep.c:106:8: style: The scope of the variable 'cp2' can be reduced. [variableScope]
 char *cp2;
       ^
elkscmd/busyelks/cmd/touch.c:13:9: style: The scope of the variable 'er' can be reduced. [variableScope]
 int fd,er;
        ^
elkscmd/busyelks/cmd/touch.c:22:9: style: Variable 'er' is assigned a value that is never used. [unreadVariable]
     er = close(creat(argv[i], 0666));
        ^
elkscmd/busyelks/cmd/touch.c:24:8: style: Variable 'er' is assigned a value that is never used. [unreadVariable]
    er = utime(argv[i],NULL);
       ^
elkscmd/busyelks/cmd/touch.c:13:6: style: Unused variable: fd [unusedVariable]
 int fd,er;
     ^
elkscmd/busyelks/cmd/tr.c:188:4: error: Common realloc mistake: 'buf' nulled but not freed upon failure [memleakOnRealloc]
   buf = realloc(buf, size);
   ^
elkscmd/busyelks/cmd/tr.c:221:4: error: Common realloc mistake: 'set2' nulled but not freed upon failure [memleakOnRealloc]
   set2 = realloc(set2, len1);
   ^
elkscmd/busyelks/cmd/tr.c:202:6: style: The scope of the variable 'len' can be reduced. [variableScope]
 int len, len1, len2;
     ^
elkscmd/busyelks/cmd/tr.c:216:13: error: Uninitialized variable: len2 [uninitvar]
 if (len1 > len2) {
            ^
elkscmd/busyelks/cmd/tr.c:216:13: error: Uninitialized variable: len2 [uninitvar]
 if (len1 > len2) {
            ^
elkscmd/busyelks/cmd/tr.c:209:15: note: Assuming condition is false
 if (num_args < argc) {
              ^
elkscmd/busyelks/cmd/tr.c:216:13: note: Uninitialized variable: len2
 if (len1 > len2) {
            ^
elkscmd/busyelks/cmd/tr.c:225:8: style: Variable 'len' is assigned a value that is never used. [unreadVariable]
   len = len1;
       ^
elkscmd/busyelks/cmd/tr.c:233:13: style: Variable 'ip' is assigned a value that is never used. [unreadVariable]
    if ((ip = strchr(set1, i)) != NULL) {
            ^
elkscmd/busyelks/cmd/tr.c:246:22: style: Variable 'ip' is assigned a value that is never used. [unreadVariable]
      (!set2 && ((ip = strchr(set1, i)) != NULL))) {
                     ^
elkscmd/busyelks/cmd/uniq.c:95:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 argc--;
 ^
elkscmd/busyelks/cmd/uniq.c:87:2: error: Return value of allocation function 'xfopen' is not stored. [leakReturnValNotUsed]
 xfopen(*argv++, "r");
 ^
elkscmd/busyelks/cmd/uniq.c:94:2: error: Return value of allocation function 'xfopen' is not stored. [leakReturnValNotUsed]
 xfopen(*argv++, "w");
 ^
elkscmd/busyelks/cmd/uniq.c:54:17: style: The scope of the variable 'outf' can be reduced. [variableScope]
  int inf = -1, outf;
                ^
elkscmd/busyelks/cmd/uniq.c:182:7: style: The scope of the variable 'c' can be reduced. [variableScope]
  int c;
      ^
elkscmd/busyelks/cmd/uniq.c:84:6: style: Variable 'inf' is assigned a value that is never used. [unreadVariable]
 inf = 0;
     ^
elkscmd/busyelks/cmd/uniq.c:91:7: style: Variable 'outf' is assigned a value that is never used. [unreadVariable]
 outf = 1;
      ^
elkscmd/busyelks/cmd/uniq.c:95:6: style: Variable 'argc' is assigned a value that is never used. [unreadVariable]
 argc--;
     ^
elkscmd/busyelks/cmd/which.c:12:8: style: The scope of the variable 'path' can be reduced. [variableScope]
 char *path, *cp;
       ^
elkscmd/busyelks/cmd/which.c:12:15: style: The scope of the variable 'cp' can be reduced. [variableScope]
 char *path, *cp;
              ^
elkscmd/busyelks/cmd/which.c:15:6: style: The scope of the variable 'quit' can be reduced. [variableScope]
 int quit, found;
     ^
elkscmd/busyelks/cmd/which.c:15:12: style: The scope of the variable 'found' can be reduced. [variableScope]
 int quit, found;
           ^
elkscmd/busyelks/cmd/which.c:29:6: style: Variable 'cp' is assigned a value that is never used. [unreadVariable]
  cp = path = patbuf;
     ^
elkscmd/busyelks/cmd/xargs.c:178:4: error: Common realloc mistake: 'buf' nulled but not freed upon failure [memleakOnRealloc]
   buf = realloc(buf, size);
   ^
elkscmd/busyelks/cmd/xargs.c:72:16: style: The scope of the variable 'k' can be reduced. [variableScope]
 int i = 1, j, k;
               ^
elkscmd/busyelks/cmd/xargs.c:223:6: style: The scope of the variable 'new_argc' can be reduced. [variableScope]
 int new_argc;
     ^
elkscmd/busyelks/lib/bsearch.c:17:9: style: Condition 'k<0' is always false [knownConditionTrueFalse]
   if(k < 0)
        ^
elkscmd/busyelks/lib/bsearch.c:15:6: note: Assuming condition 'k' is true
  if(k)
     ^
elkscmd/busyelks/lib/bsearch.c:17:9: note: Condition 'k<0' is always false
   if(k < 0)
        ^
elkscmd/busyelks/lib/getpass.c:27:9: style: Unused variable: n [unusedVariable]
    int n;
        ^
elkscmd/busyelks/lib/match.c:42:16: warning: Either the condition 'pattern==NULL' is redundant or there is possible null pointer dereference: pattern++. [nullPointerRedundantCheck]
  ch = *pattern++;
               ^
elkscmd/busyelks/lib/match.c:91:15: note: Assuming that condition 'pattern==NULL' is not redundant
  if (pattern == NULL)
              ^
elkscmd/busyelks/lib/match.c:44:11: note: Assuming condition is false
  switch (ch) {
          ^
elkscmd/busyelks/lib/match.c:42:16: note: Null pointer dereference
  ch = *pattern++;
               ^
elkscmd/busyelks/lib/match.c:42:16: warning: Either the condition 'pattern==NULL' is redundant or there is pointer arithmetic with NULL pointer. [nullPointerArithmeticRedundantCheck]
  ch = *pattern++;
               ^
elkscmd/busyelks/lib/match.c:91:15: note: Assuming that condition 'pattern==NULL' is not redundant
  if (pattern == NULL)
              ^
elkscmd/busyelks/lib/match.c:44:11: note: Assuming condition is false
  switch (ch) {
          ^
elkscmd/busyelks/lib/match.c:42:16: note: Null pointer addition
  ch = *pattern++;
               ^
elkscmd/busyelks/lib/match.c:35:6: style: The scope of the variable 'ch' can be reduced. [variableScope]
 int ch;
     ^
elkscmd/busyelks/lib/modestring.c:29:0: information: Skipping configuration 'S_ISLNK' since the value of 'S_ISLNK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (S_ISLNK(mode)) buf[0] = 'l';
^
elkscmd/busyelks/lib/modestring.c:32:0: information: Skipping configuration 'S_ISSOCK' since the value of 'S_ISSOCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (S_ISSOCK(mode)) buf[0] = 's';
^
elkscmd/busyelks/lib/sashlib.c:82:6: style: The scope of the variable 'len' can be reduced. [variableScope]
 int len;
     ^
elkscmd/busyelks/main.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/byacc/closure.c:122:14: style: Variable 'rsp' is reassigned a value before the old one has been used. [redundantAssignment]
    for (rsp = ruleset; rsp < rsend; rsp++)
             ^
elkscmd/byacc/closure.c:120:9: note: rsp is assigned
    rsp = ruleset;
        ^
elkscmd/byacc/closure.c:122:14: note: rsp is overwritten
    for (rsp = ruleset; rsp < rsend; rsp++)
             ^
elkscmd/byacc/closure.c:90:7: style: Variable 'vrow' is assigned a value that is never used. [unreadVariable]
 vrow += varsetsize;
      ^
elkscmd/byacc/closure.c:196:24: style: The scope of the variable 'rowp' can be reduced. [variableScope]
    register unsigned *rowp;
                       ^
elkscmd/byacc/closure.c:197:23: style: The scope of the variable 'word' can be reduced. [variableScope]
    register unsigned word;
                      ^
elkscmd/byacc/closure.c:198:23: style: The scope of the variable 'k' can be reduced. [variableScope]
    register unsigned k;
                      ^
elkscmd/byacc/closure.c:228:24: style: The scope of the variable 'rp' can be reduced. [variableScope]
    register unsigned *rp;
                       ^
elkscmd/byacc/closure.c:230:23: style: The scope of the variable 'k' can be reduced. [variableScope]
    register unsigned k;
                      ^
elkscmd/byacc/lalr.c:173:16: style: The scope of the variable 'state1' can be reduced. [variableScope]
  register int state1;
               ^
elkscmd/byacc/lalr.c:241:18: style: The scope of the variable 'middle' can be reduced. [variableScope]
    register int middle;
                 ^
elkscmd/byacc/lalr.c:242:18: style: The scope of the variable 's' can be reduced. [variableScope]
    register int s;
                 ^
elkscmd/byacc/lalr.c:274:16: style: The scope of the variable 'stateno' can be reduced. [variableScope]
  register int stateno;
               ^
elkscmd/byacc/lalr.c:349:16: style: The scope of the variable 'nedges' can be reduced. [variableScope]
  register int nedges;
               ^
elkscmd/byacc/lalr.c:351:16: style: The scope of the variable 'state1' can be reduced. [variableScope]
  register int state1;
               ^
elkscmd/byacc/lalr.c:353:16: style: The scope of the variable 'symbol1' can be reduced. [variableScope]
  register int symbol1;
               ^
elkscmd/byacc/lalr.c:469:16: style: The scope of the variable 'k' can be reduced. [variableScope]
  register int k;
               ^
elkscmd/byacc/lr0.c:37:18: style: The scope of the variable 'symbol' can be reduced. [variableScope]
    register int symbol;
                 ^
elkscmd/byacc/lr0.c:251:18: style: The scope of the variable 'symbol' can be reduced. [variableScope]
    register int symbol;
                 ^
elkscmd/byacc/lr0.c:325:18: style: The scope of the variable 'n' can be reduced. [variableScope]
    int i, j, k, n;
                 ^
elkscmd/byacc/lr0.c:381:12: style: The scope of the variable 'j' can be reduced. [variableScope]
    int i, j, k;
           ^
elkscmd/byacc/lr0.c:434:21: style: The scope of the variable 'rp2' can be reduced. [variableScope]
    register short *rp2;
                    ^
elkscmd/byacc/lr0.c:435:18: style: The scope of the variable 'item' can be reduced. [variableScope]
    register int item;
                 ^
elkscmd/byacc/lr0.c:438:21: style: The scope of the variable 'rend' can be reduced. [variableScope]
    register short *rend;
                    ^
elkscmd/byacc/main.c:94:0: information: Skipping configuration 'SIGHUP' since the value of 'SIGHUP' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (signal(SIGHUP, SIG_IGN) != SIG_IGN)
^
elkscmd/byacc/main.c:95:0: information: Skipping configuration 'SIGHUP' since the value of 'SIGHUP' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 signal(SIGHUP, onintr);
^
elkscmd/byacc/main.c:86:0: information: Skipping configuration 'SIGINT' since the value of 'SIGINT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (signal(SIGINT, SIG_IGN) != SIG_IGN)
^
elkscmd/byacc/main.c:87:0: information: Skipping configuration 'SIGINT' since the value of 'SIGINT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 signal(SIGINT, onintr);
^
elkscmd/byacc/main.c:90:0: information: Skipping configuration 'SIGTERM' since the value of 'SIGTERM' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if (signal(SIGTERM, SIG_IGN) != SIG_IGN)
^
elkscmd/byacc/main.c:91:0: information: Skipping configuration 'SIGTERM' since the value of 'SIGTERM' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 signal(SIGTERM, onintr);
^
elkscmd/byacc/mkpar.c:58:18: style: The scope of the variable 'i' can be reduced. [variableScope]
    register int i, k;
                 ^
elkscmd/byacc/mkpar.c:58:21: style: The scope of the variable 'k' can be reduced. [variableScope]
    register int i, k;
                    ^
elkscmd/byacc/mkpar.c:59:18: style: The scope of the variable 'symbol' can be reduced. [variableScope]
    register int symbol;
                 ^
elkscmd/byacc/mkpar.c:92:18: style: The scope of the variable 'ruleno' can be reduced. [variableScope]
    register int ruleno, tokensetsize;
                 ^
elkscmd/byacc/mkpar.c:93:24: style: The scope of the variable 'rowp' can be reduced. [variableScope]
    register unsigned *rowp;
                       ^
elkscmd/byacc/mkpar.c:205:18: style: The scope of the variable 'symbol' can be reduced. [variableScope]
    register int symbol;
                 ^
elkscmd/byacc/mkpar.c:57:21: style: Local variable 'to_state' shadows outer variable [shadowVariable]
    register short *to_state;
                    ^
elkscmd/byacc/defs.h:273:15: note: Shadowed declaration
extern short *to_state;
              ^
elkscmd/byacc/mkpar.c:57:21: note: Shadow variable
    register short *to_state;
                    ^
elkscmd/byacc/mkpar.c:156:21: style: Local variable 'to_state' shadows outer variable [shadowVariable]
    register short *to_state;
                    ^
elkscmd/byacc/defs.h:273:15: note: Shadowed declaration
extern short *to_state;
              ^
elkscmd/byacc/mkpar.c:156:21: note: Shadow variable
    register short *to_state;
                    ^
elkscmd/byacc/output.c:576:3: error: Common realloc mistake: 'table' nulled but not freed upon failure [memleakOnRealloc]
  table = (short *) REALLOC(table, newmax*sizeof(short));
  ^
elkscmd/byacc/output.c:578:3: error: Common realloc mistake: 'check' nulled but not freed upon failure [memleakOnRealloc]
  check = (short *) REALLOC(check, newmax*sizeof(short));
  ^
elkscmd/byacc/output.c:439:18: style: The scope of the variable 'state' can be reduced. [variableScope]
    register int state;
                 ^
elkscmd/byacc/output.c:502:18: style: The scope of the variable 'j' can be reduced. [variableScope]
    register int j;
                 ^
elkscmd/byacc/output.c:506:18: style: The scope of the variable 'match' can be reduced. [variableScope]
    register int match;
                 ^
elkscmd/byacc/output.c:779:20: style: The scope of the variable 's' can be reduced. [variableScope]
    register char *s;
                   ^
elkscmd/byacc/reader.c:1018:5: error: Common realloc mistake: 'pitem' nulled but not freed upon failure [memleakOnRealloc]
    pitem = (bucket **) REALLOC(pitem, maxitems*sizeof(bucket *));
    ^
elkscmd/byacc/reader.c:1026:5: error: Common realloc mistake: 'plhs' nulled but not freed upon failure [memleakOnRealloc]
    plhs = (bucket **) REALLOC(plhs, maxrules*sizeof(bucket *));
    ^
elkscmd/byacc/reader.c:1028:5: error: Common realloc mistake: 'rprec' nulled but not freed upon failure [memleakOnRealloc]
    rprec = (short *) REALLOC(rprec, maxrules*sizeof(short));
    ^
elkscmd/byacc/reader.c:1030:5: error: Common realloc mistake: 'rassoc' nulled but not freed upon failure [memleakOnRealloc]
    rassoc = (char *) REALLOC(rassoc, maxrules*sizeof(char));
    ^
elkscmd/byacc/reader.c:1672:5: error: Common realloc mistake: 'rprec' nulled but not freed upon failure [memleakOnRealloc]
    rprec = (short *) REALLOC(rprec, nrules*sizeof(short));
    ^
elkscmd/byacc/reader.c:728:11: style: The scope of the variable 's' can be reduced. [variableScope]
    char *s;
          ^
elkscmd/byacc/reader.c:832:9: style: The scope of the variable 'value' can be reduced. [variableScope]
    int value;
        ^
elkscmd/byacc/reader.c:937:18: style: The scope of the variable 'c' can be reduced. [variableScope]
    register int c, k;
                 ^
elkscmd/byacc/reader.c:937:21: style: The scope of the variable 'k' can be reduced. [variableScope]
    register int c, k;
                    ^
elkscmd/byacc/reader.c:1039:11: style: The scope of the variable 's_cptr' can be reduced. [variableScope]
    char *s_cptr;
          ^
elkscmd/byacc/reader.c:1102:18: style: The scope of the variable 'i' can be reduced. [variableScope]
    register int i;
                 ^
elkscmd/byacc/reader.c:1448:18: style: The scope of the variable 'c' can be reduced. [variableScope]
    register int c;
                 ^
elkscmd/byacc/reader.c:1497:24: style: The scope of the variable 's' can be reduced. [variableScope]
    register char *p, *s, *t;
                       ^
elkscmd/byacc/reader.c:1664:9: style: The scope of the variable 'assoc' can be reduced. [variableScope]
    int assoc, prec;
        ^
elkscmd/byacc/reader.c:1664:16: style: The scope of the variable 'prec' can be reduced. [variableScope]
    int assoc, prec;
               ^
elkscmd/byacc/reader.c:1664:16: style: Local variable 'prec' shadows outer variable [shadowVariable]
    int assoc, prec;
               ^
elkscmd/byacc/reader.c:21:5: note: Shadowed declaration
int prec;
    ^
elkscmd/byacc/reader.c:1664:16: note: Shadow variable
    int assoc, prec;
               ^
elkscmd/byacc/reader.c:875:8: style: Variable 'value' is assigned a value that is never used. [unreadVariable]
 value = UNDEFINED;
       ^
elkscmd/byacc/skeleton.c:290:18: style: The scope of the variable 'c' can be reduced. [variableScope]
    register int c;
                 ^
elkscmd/byacc/verbose.c:145:18: style: The scope of the variable 'rule' can be reduced. [variableScope]
    register int rule;
                 ^
elkscmd/byacc/verbose.c:148:21: style: The scope of the variable 'sp1' can be reduced. [variableScope]
    register short *sp1;
                    ^
elkscmd/byacc/verbose.c:225:18: style: The scope of the variable 'as' can be reduced. [variableScope]
    register int as;
                 ^
elkscmd/byacc/verbose.c:276:18: style: The scope of the variable 'k' can be reduced. [variableScope]
    register int k, anyreds;
                 ^
elkscmd/byacc/verbose.c:313:21: style: The scope of the variable 'k' can be reduced. [variableScope]
    register int i, k;
                    ^
elkscmd/byacc/verbose.c:314:18: style: The scope of the variable 'as' can be reduced. [variableScope]
    register int as;
                 ^
elkscmd/byacc/verbose.c:315:21: style: Local variable 'to_state' shadows outer variable [shadowVariable]
    register short *to_state;
                    ^
elkscmd/byacc/defs.h:273:15: note: Shadowed declaration
extern short *to_state;
              ^
elkscmd/byacc/verbose.c:315:21: note: Shadow variable
    register short *to_state;
                    ^
elkscmd/byacc/warshall.c:12:24: style: The scope of the variable 'ccol' can be reduced. [variableScope]
    register unsigned *ccol;
                       ^
elkscmd/cron/cron.c:281:5: warning: Return value of function freopen() is not used. [ignoredReturnValue]
    freopen("/dev/null", "r", stdin);
    ^
elkscmd/cron/cron.c:283:5: warning: Return value of function freopen() is not used. [ignoredReturnValue]
    freopen("/dev/null", "w", stderr);
    ^
elkscmd/cron/cron.c:154:18: warning: Obsolete function 'alloca' called. In C99 and later it is recommended to use a variable length array instead. [allocaCalled]
    char *line = alloca(strlen(path)+1);
                 ^
elkscmd/cron/cron.c:252:20: style: The scope of the variable 'ent' can be reduced. [variableScope]
    struct dirent *ent;
                   ^
elkscmd/cron/crontab.c:250:5: warning:inconclusive: The buffer 'whoami' may not be null-terminated after the call to strncpy(). [terminateStrncpy]
    strncpy(whoami, pwd->pw_name, sizeof whoami);
    ^
elkscmd/cron/crontab.c:59:18: style: The scope of the variable 'c' can be reduced. [variableScope]
    register int c;
                 ^
elkscmd/cron/lib.c:62:6: error: Resource leak: ftmp [resourceLeak]
     return;
     ^
elkscmd/cron/lib.c:232:13: error: Resource leak: ftmp [resourceLeak]
            return -1;
            ^
elkscmd/cron/lib.c:53:11: style: The scope of the variable 'ftmp' can be reduced. [variableScope]
    FILE *ftmp;
          ^
elkscmd/cron/readcrontab.c:137:14: style: The scope of the variable 'num2' can be reduced. [variableScope]
    int num, num2, skip;
             ^
elkscmd/cron/readcrontab.c:137:20: style: The scope of the variable 'skip' can be reduced. [variableScope]
    int num, num2, skip;
                   ^
elkscmd/cron/readcrontab.c:235:11: style: The scope of the variable 'p' can be reduced. [variableScope]
    char *p;
          ^
elkscmd/cron/readcrontab.c:236:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
elkscmd/cron/runjob.c:90:0: information: Skipping configuration '_PATH_MAIL' since the value of '_PATH_MAIL' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  execle(_PATH_MAIL, "mail", "-s", subject, to, (char*)0, tab->env);
^
elkscmd/cron/runjob.c:91:0: information: Skipping configuration '_PATH_MAIL' since the value of '_PATH_MAIL' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  fatal("can't exec(\"%s\"): %s", _PATH_MAIL, strerror(errno));
^
elkscmd/debug/dis.c:89:24: warning: %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
        if (!f_asmout) printf("%04hx:%04hx  ", cs, ip);
                       ^
elkscmd/debug/dis.c:89:24: warning: %hx in format string (no. 2) requires 'unsigned short' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
        if (!f_asmout) printf("%04hx:%04hx  ", cs, ip);
                       ^
elkscmd/debug/dis.c:128:24: warning: %hx in format string (no. 1) requires 'unsigned short' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
        if (!f_asmout) printf("%04hx  ", ip);
                       ^
elkscmd/debug/dis.c:84:9: style: The scope of the variable 'nextip' can be reduced. [variableScope]
    int nextip;
        ^
elkscmd/debug/dis.c:110:9: style: The scope of the variable 'nextip' can be reduced. [variableScope]
    int nextip;
        ^
elkscmd/debug/dis.c:145:9: style: Unused variable: fd [unusedVariable]
    int fd, ch;
        ^
elkscmd/debug/syms.c:33:10: style: The scope of the variable 'fullpath' can be reduced. [variableScope]
    char fullpath[PATH_MAX];
         ^
elkscmd/debug/syms.c:139:23: portability: 'addr' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
    if (exact && addr - lastaddr) {
                      ^
elkscmd/disk_utils/fdisk.c:323:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
elkscmd/disk_utils/fdisk.c:346:27: style:inconclusive: Function 'list_partition' argument 1 names different: declaration 'dev' definition 'devname'. [funcArgNamesDifferent]
void list_partition(char *devname)
                          ^
elkscmd/disk_utils/fdisk.c:80:27: note: Function 'list_partition' argument 1 names different: declaration 'dev' definition 'devname'.
void list_partition(char *dev);
                          ^
elkscmd/disk_utils/fdisk.c:346:27: note: Function 'list_partition' argument 1 names different: declaration 'dev' definition 'devname'.
void list_partition(char *devname)
                          ^
elkscmd/disk_utils/fdisk.c:372:9: style: Local variable 'p' shadows outer variable [shadowVariable]
  char *p = &device[strlen(device)];
        ^
elkscmd/disk_utils/fdisk.c:366:20: note: Shadowed declaration
 struct partition *p = (struct partition *)&table[PARTITION_START + (i<<4)];
                   ^
elkscmd/disk_utils/fdisk.c:372:9: note: Shadow variable
  char *p = &device[strlen(device)];
        ^
elkscmd/disk_utils/fdisk.c:436:8: style: Variable 'i' is assigned a value that is never used. [unreadVariable]
 if ((i=read(pFd,MBR,512)) != 512) {
       ^
elkscmd/disk_utils/fsck.c:793:6: style: Condition 'inode' is always true [knownConditionTrueFalse]
 if (inode && S_ISDIR(inode->i_mode))
     ^
elkscmd/disk_utils/fsck.c:775:6: note: Assuming that condition '!inode' is not redundant
 if (!inode)
     ^
elkscmd/disk_utils/fsck.c:793:6: note: Condition 'inode' is always true
 if (inode && S_ISDIR(inode->i_mode))
     ^
elkscmd/disk_utils/fsck.c:201:2: warning: fprintf format string requires 1 parameter but 2 are given. [wrongPrintfScanfArgNum]
 fprintf(stderr,fmt_string,program_name,device_name);
 ^
elkscmd/disk_utils/fsck.c:400:4: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
   printf("Read error: bad block %d error %d in file '", nr, n);
   ^
elkscmd/disk_utils/fsck.c:593:4: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
   printf("Inode %d marked not used, but used for file '",
   ^
elkscmd/disk_utils/fsck.c:652:3: warning: %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
  printf("Block %u has been used before. Now in file `", block);
  ^
elkscmd/disk_utils/fsck.c:664:3: warning: %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
  printf("Block %u in file `", block);
  ^
elkscmd/disk_utils/fsck.c:984:3: warning: %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
  printf("\n%6u regular files\n"
  ^
elkscmd/disk_utils/fsck.c:984:3: warning: %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
  printf("\n%6u regular files\n"
  ^
elkscmd/disk_utils/fsck.c:984:3: warning: %u in format string (no. 4) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
  printf("\n%6u regular files\n"
  ^
elkscmd/disk_utils/fsck.c:984:3: warning: %u in format string (no. 5) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
  printf("\n%6u regular files\n"
  ^
elkscmd/disk_utils/fsck.c:984:3: warning: %u in format string (no. 6) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
  printf("\n%6u regular files\n"
  ^
elkscmd/disk_utils/fsck.c:984:3: warning: %u in format string (no. 7) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
  printf("\n%6u regular files\n"
  ^
elkscmd/disk_utils/fsck.c:309:6: style: The scope of the variable 'c' can be reduced. [variableScope]
 int c;
     ^
elkscmd/disk_utils/mkfat.c:624:2: warning: %lu in format string (no. 2) requires 'unsigned long' but the argument type is 'signed long'. [invalidPrintfArgType_uint]
 printf("Created filesystem on %s, %lu blocks\n", image, (long)blocks);
 ^
elkscmd/disk_utils/mkfat.c:590:9: style: Local variable 'blocks' shadows outer variable [shadowVariable]
 uint32 blocks;
        ^
elkscmd/disk_utils/mkfat.c:46:8: note: Shadowed declaration
uint32 blocks;
       ^
elkscmd/disk_utils/mkfat.c:590:9: note: Shadow variable
 uint32 blocks;
        ^
elkscmd/disk_utils/partype.c:113:47: style: The scope of the variable 'size' can be reduced. [variableScope]
    unsigned long min = 100UL, max = 16383UL, size;
                                              ^
elkscmd/disk_utils/partype.c:47:19: style: struct member 'chs::head' is never used. [unusedStructMember]
    unsigned char head;
                  ^
elkscmd/disk_utils/partype.c:48:19: style: struct member 'chs::sector' is never used. [unusedStructMember]
    unsigned char sector;
                  ^
elkscmd/disk_utils/partype.c:49:19: style: struct member 'chs::cylinder' is never used. [unusedStructMember]
    unsigned char cylinder;
                  ^
elkscmd/disk_utils/partype.c:53:19: style: struct member 'partentry::active' is never used. [unusedStructMember]
    unsigned char active;
                  ^
elkscmd/disk_utils/partype.c:57:23: style: struct member 'partentry::system' is never used. [unusedStructMember]
    unsigned long int system;
                      ^
elkscmd/elvis/alias.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/alias.c:38:6: style: Unused variable: pid [unusedVariable]
 int pid, i, j;
     ^
elkscmd/elvis/alias.c:96:6: style: Variable 'pid' is assigned a value that is never used. [unreadVariable]
 pid = os9exec(chainc, argblk[0], argblk, environ, 0, 0, 3);
     ^
elkscmd/elvis/atari.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/atari.c:67:20: style: Variable 'nwritten' is assigned a value that is never used. [unreadVariable]
 int i, j, nwritten=0, hadnl=0;
                   ^
elkscmd/elvis/blk.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/blk.c:205:14: error: Array 'blk[3]' accessed at index 3, which is out of bounds. [arrayIndexOutOfBounds]
 if (lnum[blk[i].logical] == INFINITY)
             ^
elkscmd/elvis/blk.c:186:2: note: After for loop, i has value 3
 for (i = 0; i < NBUFS && bp != &blk[i].buf; i++)
 ^
elkscmd/elvis/blk.c:205:14: note: Array index out of bounds
 if (lnum[blk[i].logical] == INFINITY)
             ^
elkscmd/elvis/blk.c:68:6: style: The scope of the variable 'i' can be reduced. [variableScope]
 int i;
     ^
elkscmd/elvis/cmd1.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/cmd1.c:787:3: warning:inconclusive: The buffer 'prevtag' may not be null-terminated after the call to strncpy(). [terminateStrncpy]
  strncpy(prevtag, extra, sizeof prevtag);
  ^
elkscmd/elvis/cmd1.c:557:7: style: The scope of the variable 'oldflag' can be reduced. [variableScope]
 int  oldflag;
      ^
elkscmd/elvis/cmd1.c:606:12: style: The scope of the variable 'eow' can be reduced. [variableScope]
 REG char *eow;
           ^
elkscmd/elvis/cmd1.c:607:6: style: The scope of the variable 'col' can be reduced. [variableScope]
 int col;
     ^
elkscmd/elvis/cmd1.c:608:6: style: The scope of the variable 'arg' can be reduced. [variableScope]
 int arg;
     ^
elkscmd/elvis/cmd1.c:609:6: style: The scope of the variable 'addcols' can be reduced. [variableScope]
 int addcols;
     ^
elkscmd/elvis/cmd1.c:610:6: style: The scope of the variable 'scrolled' can be reduced. [variableScope]
 int scrolled = 0;
     ^
elkscmd/elvis/cmd1.c:712:12: style: The scope of the variable 'mapto' can be reduced. [variableScope]
 REG char *mapto;
           ^
elkscmd/elvis/cmd1.c:921:0: information: Skipping configuration 'COMPILED_BY' since the value of 'COMPILED_BY' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 msg("Compiled by %s", COMPILED_BY);
^
elkscmd/elvis/cmd1.c:924:0: information: Skipping configuration 'CREDIT' since the value of 'CREDIT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 msg("%s", CREDIT);
^
elkscmd/elvis/cmd1.c:42:12: style: The scope of the variable 'scan' can be reduced. [variableScope]
 REG char *scan;
           ^
elkscmd/elvis/cmd1.c:98:8: style: The scope of the variable 'scan' can be reduced. [variableScope]
 char *scan;
       ^
elkscmd/elvis/cmd2.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/cmd2.c:874:6: style: Condition 'nest' is always false [knownConditionTrueFalse]
 if (nest)
     ^
elkscmd/elvis/cmd2.c:869:16: note: Assignment 'nest=0', assigned value is 0
 static nest = FALSE;
               ^
elkscmd/elvis/cmd2.c:874:6: note: Condition 'nest' is always false
 if (nest)
     ^
elkscmd/elvis/cmd2.c:271:7: style: The scope of the variable 'curs2' can be reduced. [variableScope]
 MARK curs2; /* an altered form of the cursor */
      ^
elkscmd/elvis/cmd2.c:319:7: style: The scope of the variable 'l' can be reduced. [variableScope]
 long l; /* line counter */
      ^
elkscmd/elvis/cmd2.c:392:12: style: The scope of the variable 'scan' can be reduced. [variableScope]
 REG char *scan;
           ^
elkscmd/elvis/cmd2.c:0:0: error: Internal Error. MathLib::normalizeCharacterLiteral: Unhandled char constant '\l'. [cppcheckError]

^
elkscmd/elvis/cmd2.c:0:0: note: Internal Error. MathLib::normalizeCharacterLiteral: Unhandled char constant '\l'.

^
elkscmd/elvis/cmd2.c:0:0: note: Internal Error. MathLib::normalizeCharacterLiteral: Unhandled char constant '\l'.

^
elkscmd/elvis/ctags.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/wildcard.c:91:6: style: The scope of the variable 'err' can be reduced. [variableScope]
 int err;
     ^
elkscmd/elvis/wildcard.c:93:6: style: The scope of the variable 'lastn' can be reduced. [variableScope]
 int lastn;
     ^
elkscmd/elvis/ctags.c:321:7: portability: %d in format string (no. 1) requires 'int' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]
      sprintf(fmt, MAINFMT, strlen(name) - 2);
      ^
elkscmd/elvis/curses.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 25 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/curses.c:332:2: error: syntax error [syntaxError]
 refresh();
 ^
elkscmd/elvis/curses.c:234:0: information: Skipping configuration 'ANY_UNIX;TIOCSLTC' since the value of 'TIOCSLTC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 ioctl(2, TIOCSLTC, &ltbuf);
^
elkscmd/elvis/curses.c:292:0: information: Skipping configuration 'ANY_UNIX;TIOCSLTC' since the value of 'TIOCSLTC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  ioctl(2, TIOCSLTC, &ltbuf);
^
elkscmd/elvis/curses.c:264:0: information: Skipping configuration 'ANY_UNIX;UNIXV;VSWTCH' since the value of 'VSWTCH' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  newtermios.c_cc[VSWTCH] = 0;
^
elkscmd/elvis/cut.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/cut.c:461:8: style: The scope of the variable 'i' can be reduced. [variableScope]
 int   i;
       ^
elkscmd/elvis/cut.c:614:13: style: The scope of the variable 'src' can be reduced. [variableScope]
 REG char  *src;
            ^
elkscmd/elvis/ex.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/ex.c:318:3: error: syntax error [syntaxError]
  refresh();
  ^
elkscmd/elvis/input.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/input.c:774:8: error: syntax error [syntaxError]
       refresh();
       ^
elkscmd/elvis/main.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/main.c:132:4: error: syntax error [syntaxError]
   refresh();
   ^
elkscmd/elvis/main.c:257:0: information: Skipping configuration 'EXINIT' since the value of 'EXINIT' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 str = getenv(EXINIT);
^
elkscmd/elvis/main.c:251:0: information: Skipping configuration 'HMEXRC' since the value of 'HMEXRC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  sprintf(tmpblk.c, "%s%c%s", str, SLASH, HMEXRC);
^
elkscmd/elvis/misc.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/misc.c:24:7: style: The scope of the variable 'i' can be reduced. [variableScope]
 int  i;
      ^
elkscmd/elvis/misc.c:26:8: style: The scope of the variable 'l' can be reduced. [variableScope]
 long  l; /* line number counter */
       ^
elkscmd/elvis/modify.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/modify.c:28:2: warning: %ld in format string (no. 1) requires 'long' but the argument type is 'signed char *'. [invalidPrintfArgType_sint]
 fprintf(dbg, msg, arg1, arg2, arg3, arg4, arg5);
 ^
elkscmd/elvis/modify.c:28:2: warning: %d in format string (no. 2) requires 'int' but the argument type is 'signed char *'. [invalidPrintfArgType_sint]
 fprintf(dbg, msg, arg1, arg2, arg3, arg4, arg5);
 ^
elkscmd/elvis/modify.c:28:2: warning: %ld in format string (no. 3) requires 'long' but the argument type is 'signed char *'. [invalidPrintfArgType_sint]
 fprintf(dbg, msg, arg1, arg2, arg3, arg4, arg5);
 ^
elkscmd/elvis/modify.c:28:2: warning: %d in format string (no. 4) requires 'int' but the argument type is 'signed char *'. [invalidPrintfArgType_sint]
 fprintf(dbg, msg, arg1, arg2, arg3, arg4, arg5);
 ^
elkscmd/elvis/move1.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/move2.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/move3.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/move4.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/move4.c:0:0: error: Internal Error. MathLib::normalizeCharacterLiteral: Unhandled char constant '\l'. [cppcheckError]

^
elkscmd/elvis/move4.c:0:0: note: Internal Error. MathLib::normalizeCharacterLiteral: Unhandled char constant '\l'.

^
elkscmd/elvis/move4.c:0:0: note: Internal Error. MathLib::normalizeCharacterLiteral: Unhandled char constant '\l'.

^
elkscmd/elvis/move5.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/move5.c:29:7: style: The scope of the variable 'i' can be reduced. [variableScope]
 int  i;
      ^
elkscmd/elvis/move5.c:169:7: style: The scope of the variable 'i' can be reduced. [variableScope]
 int  i;
      ^
elkscmd/elvis/opts.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/pc.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/recycle.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 14 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/redraw.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/redraw.c:694:8: style: Variable 'same' is assigned a value that is never used. [unreadVariable]
  same = 0;
       ^
elkscmd/elvis/redraw.c:0:0: error: Internal Error. MathLib::normalizeCharacterLiteral: Unhandled char constant '\l'. [cppcheckError]

^
elkscmd/elvis/redraw.c:0:0: note: Internal Error. MathLib::normalizeCharacterLiteral: Unhandled char constant '\l'.

^
elkscmd/elvis/redraw.c:0:0: note: Internal Error. MathLib::normalizeCharacterLiteral: Unhandled char constant '\l'.

^
elkscmd/elvis/ref.c:135:11: style: Condition 'wlen<0' is always true [knownConditionTrueFalse]
 if (wlen < 0)
          ^
elkscmd/elvis/ref.c:125:17: note: Assignment 'wlen=-1', assigned value is -1
 static wlen = -1;/* length of the "word" variable's value */
                ^
elkscmd/elvis/ref.c:129:12: note: Assuming condition is false
 if (*line == '\t')
           ^
elkscmd/elvis/ref.c:135:11: note: Condition 'wlen<0' is always true
 if (wlen < 0)
          ^
elkscmd/elvis/refont.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/regexp.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/regexp.c:780:9: style: Unused variable: str [unusedVariable]
 char  *str;
        ^
elkscmd/elvis/regexp.c:703:6: style: Condition '!re' is always true [knownConditionTrueFalse]
 if (!re)
     ^
elkscmd/elvis/regexp.c:699:7: note: Assignment 're=(struct regexp*)0', assigned value is 0
 re = (regexp *)0;
      ^
elkscmd/elvis/regexp.c:703:6: note: Condition '!re' is always true
 if (!re)
     ^
elkscmd/elvis/regsub.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/shell.c:70:31: warning: Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead. [getsCalled]
  while (fputs("$ ", stdout), gets(buf))
                              ^
elkscmd/elvis/shell.c:175:6: style: The scope of the variable 'i' can be reduced. [variableScope]
 int i;
     ^
elkscmd/elvis/shell.c:220:18: style: The scope of the variable 'p' can be reduced. [variableScope]
 char buf[128], *p;
                 ^
elkscmd/elvis/sysdos.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/sysdos.c:110:22: style: Unused variable: old2 [unusedVariable]
 int fd, old0, old1, old2;
                     ^
elkscmd/elvis/sysdos.c:151:6: style: Unused variable: status [unusedVariable]
 int status;
     ^
elkscmd/elvis/sysdos.c:58:18: error: Modifying string literal "/c" directly or indirectly is undefined behaviour. [stringLiteralWrite]
 char *cmdswitch="/c";
                 ^
elkscmd/elvis/sysdos.c:60:3: note: Modifying string literal "/c" directly or indirectly is undefined behaviour.
  cmdswitch[0]=switchar();
  ^
elkscmd/elvis/sysdos.c:58:18: note: Modifying string literal "/c" directly or indirectly is undefined behaviour.
 char *cmdswitch="/c";
                 ^
elkscmd/elvis/system.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/system.c:291:12: style: The scope of the variable 'd' can be reduced. [variableScope]
 REG char *d;
           ^
elkscmd/elvis/system.c:359:10: error: Uninitialized variable: scrout [uninitvar]
  strcpy(scrout, o_directory);
         ^
elkscmd/elvis/system.c:360:17: error: Uninitialized variable: scrout [uninitvar]
  if ((i=strlen(scrout)) && strchr("\\/:", scrout[i-1]))
                ^
elkscmd/elvis/system.c:361:4: error: Uninitialized variable: scrout [uninitvar]
   scrout[i++]=SLASH;
   ^
elkscmd/elvis/system.c:362:10: error: Uninitialized variable: scrout [uninitvar]
  strcpy(scrout+i, SCRATCHOUT+3);
         ^
elkscmd/elvis/system.c:187:23: style: Redundant condition: If 'EXPR == ' '', the comparison 'EXPR' is always true. [redundantCondition]
  while (command[len] && command[len] == ' ')
                      ^
elkscmd/elvis/system.c:209:23: style: Redundant condition: If 'EXPR == ' '', the comparison 'EXPR' is always true. [redundantCondition]
  while (command[len] && command[len] == ' ')
                      ^
elkscmd/elvis/test.c:7:6: style: The scope of the variable 'n' can be reduced. [variableScope]
 int n;
     ^
elkscmd/elvis/tinytcap.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/tio.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/tio.c:52:2: error: syntax error [syntaxError]
 refresh();
 ^
elkscmd/elvis/tmp.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/tmp.c:136:15: style: Condition 'origfd>=0' is always true [knownConditionTrueFalse]
   if (origfd >= 0 && (statb.st_mode & S_IFMT) != S_IFREG)
              ^
elkscmd/elvis/tmp.c:124:14: note: Assuming that condition 'origfd>=0' is not redundant
  if (origfd >= 0)
             ^
elkscmd/elvis/tmp.c:126:31: note: Assuming condition is false
   if (stat(origname, &statb) < 0)
                              ^
elkscmd/elvis/tmp.c:136:15: note: Condition 'origfd>=0' is always true
   if (origfd >= 0 && (statb.st_mode & S_IFMT) != S_IFREG)
              ^
elkscmd/elvis/tmp.c:255:10: style: Variable 'nbytes' is assigned a value that is never used. [unreadVariable]
  nbytes = 1L;
         ^
elkscmd/elvis/tmp.c:131:15: style: Condition 'origfd>=0' is always true [knownConditionTrueFalse]
   if (origfd >= 0 && (statb.st_mode & S_IJDIR))
              ^
elkscmd/elvis/tmp.c:124:14: note: Assuming that condition 'origfd>=0' is not redundant
  if (origfd >= 0)
             ^
elkscmd/elvis/tmp.c:126:31: note: Assuming condition is false
   if (stat(origname, &statb) < 0)
                              ^
elkscmd/elvis/tmp.c:131:15: note: Condition 'origfd>=0' is always true
   if (origfd >= 0 && (statb.st_mode & S_IJDIR))
              ^
elkscmd/elvis/tmp.c:134:15: style: Condition 'origfd>=0' is always true [knownConditionTrueFalse]
   if (origfd >= 0 && (statb.st_mode & S_IFDIR))
              ^
elkscmd/elvis/tmp.c:124:14: note: Assuming that condition 'origfd>=0' is not redundant
  if (origfd >= 0)
             ^
elkscmd/elvis/tmp.c:126:31: note: Assuming condition is false
   if (stat(origname, &statb) < 0)
                              ^
elkscmd/elvis/tmp.c:134:15: note: Condition 'origfd>=0' is always true
   if (origfd >= 0 && (statb.st_mode & S_IFDIR))
              ^
elkscmd/elvis/tmp.c:467:0: information: Skipping configuration 'O_APPEND' since the value of 'O_APPEND' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  fd = open(filename, O_WRONLY|O_APPEND);
^
elkscmd/elvis/vars.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/vcmd.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/vcmd.c:631:2: error: syntax error [syntaxError]
 refresh();
 ^
elkscmd/elvis/vi.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/vi.c:532:6: error: syntax error [syntaxError]
     refresh();
     ^
elkscmd/elvis/virec.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 15 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/elvis/virec.c:101:7: style: Local variable 'tmpfd' shadows outer variable [shadowVariable]
 int  tmpfd;
      ^
elkscmd/elvis/vi.h:200:12: note: Shadowed declaration
extern int tmpfd;  /* fd used to access the tmp file */
           ^
elkscmd/elvis/virec.c:101:7: note: Shadow variable
 int  tmpfd;
      ^
elkscmd/elvis/wildcard.c:85:6: style: Local variable 'wildcard' shadows outer function [shadowFunction]
 int wildcard=0;
     ^
elkscmd/elvis/vi.h:224:14: note: Shadowed declaration
extern char *wildcard(); /* expand wildcards in filenames */
             ^
elkscmd/elvis/wildcard.c:85:6: note: Shadow variable
 int wildcard=0;
     ^
elkscmd/file_utils/cat.c:26:6: style: The scope of the variable 'i' can be reduced. [variableScope]
 int i, fd;
     ^
elkscmd/file_utils/cat.c:26:9: style: The scope of the variable 'fd' can be reduced. [variableScope]
 int i, fd;
        ^
elkscmd/file_utils/cp.c:410:19: warning: %d in format string (no. 3) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
 if (opt_verbose) printf("mknod %s %c %d %d\n", dstfile,
                  ^
elkscmd/file_utils/cp.c:410:19: warning: %d in format string (no. 4) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
 if (opt_verbose) printf("mknod %s %c %d %d\n", dstfile,
                  ^
elkscmd/file_utils/cp.c:262:9: style: Redundant initialization for 'p'. The initialized value is overwritten before it is read. [redundantInitialization]
      p = strchr(destination_dir+1, '/');
        ^
elkscmd/file_utils/cp.c:261:15: note: p is initialized
      char *p = destination_dir;
              ^
elkscmd/file_utils/cp.c:262:9: note: p is overwritten
      p = strchr(destination_dir+1, '/');
        ^
elkscmd/file_utils/cp.c:634:8: style: The scope of the variable 'srcname' can be reduced. [variableScope]
 char *srcname;
       ^
elkscmd/file_utils/cp.c:635:8: style: The scope of the variable 'destname' can be reduced. [variableScope]
 char *destname;
       ^
elkscmd/file_utils/cp.c:503:14: style: Local variable 'buf' shadows outer variable [shadowVariable]
 static char buf[PATH_MAX];
             ^
elkscmd/file_utils/cp.c:48:13: note: Shadowed declaration
static char buf[BUF_SIZE];
            ^
elkscmd/file_utils/cp.c:503:14: note: Shadow variable
 static char buf[PATH_MAX];
             ^
elkscmd/file_utils/df.c:235:9: style: The scope of the variable 'wptr' can be reduced. [variableScope]
  char *wptr;
        ^
elkscmd/file_utils/grep.c:21:8: style: The scope of the variable 'cp1' can be reduced. [variableScope]
 char *cp1;
       ^
elkscmd/file_utils/grep.c:22:8: style: The scope of the variable 'cp2' can be reduced. [variableScope]
 char *cp2;
       ^
elkscmd/file_utils/l.c:94:7: style: The scope of the variable 'endslash' can be reduced. [variableScope]
 int  endslash;
      ^
elkscmd/file_utils/ls.c:422:9: style: The scope of the variable 'maxlen' can be reduced. [variableScope]
    int maxlen, maxlen2, i, len;
        ^
elkscmd/file_utils/ls.c:422:17: style: The scope of the variable 'maxlen2' can be reduced. [variableScope]
    int maxlen, maxlen2, i, len;
                ^
elkscmd/file_utils/ls.c:422:26: style: The scope of the variable 'i' can be reduced. [variableScope]
    int maxlen, maxlen2, i, len;
                         ^
elkscmd/file_utils/ls.c:422:29: style: The scope of the variable 'len' can be reduced. [variableScope]
    int maxlen, maxlen2, i, len;
                            ^
elkscmd/file_utils/ls.c:423:12: style: The scope of the variable 'cp' can be reduced. [variableScope]
    char * cp;
           ^
elkscmd/file_utils/ls.c:205:11: style: Unused variable: len [unusedVariable]
    long  len;
          ^
elkscmd/file_utils/ls.c:276:0: information: Skipping configuration 'S_ISLNK' since the value of 'S_ISLNK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        if (S_ISLNK(statbuf->st_mode))
^
elkscmd/file_utils/ls.c:309:0: information: Skipping configuration 'S_ISLNK' since the value of 'S_ISLNK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    if ((flags & LSF_LONG) && S_ISLNK(statbuf->st_mode)) {
^
elkscmd/file_utils/ls.c:347:0: information: Skipping configuration 'S_ISLNK' since the value of 'S_ISLNK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    else if (S_ISLNK(mode))
^
elkscmd/file_utils/ls.c:285:0: information: Skipping configuration 'S_ISSOCK' since the value of 'S_ISSOCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        else if (S_ISSOCK(statbuf->st_mode))
^
elkscmd/file_utils/ls.c:351:0: information: Skipping configuration 'S_ISSOCK' since the value of 'S_ISSOCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    else if (S_ISSOCK(mode))
^
elkscmd/file_utils/more.c:66:9: style: Condition '*p=='\0'' is always false [knownConditionTrueFalse]
 if (*p == '\0')
        ^
elkscmd/file_utils/more.c:63:12: note: Assuming that condition '*p!=';'' is not redundant
 while (*p != ';')
           ^
elkscmd/file_utils/more.c:66:9: note: Condition '*p=='\0'' is always false
 if (*p == '\0')
        ^
elkscmd/file_utils/more.c:137:11: style: Variable 'cnt' is assigned a value that is never used. [unreadVariable]
      cnt = read(1, &buf[2], sizeof(buf)-2);
          ^
elkscmd/file_utils/rm.c:42:24: style: The scope of the variable 'dp' can be reduced. [variableScope]
        struct dirent *dp;
                       ^
elkscmd/file_utils/rm.c:43:14: style: The scope of the variable 'dirp' can be reduced. [variableScope]
        DIR *dirp;
             ^
elkscmd/file_utils/rm.c:44:14: style: The scope of the variable 'name' can be reduced. [variableScope]
        char name[PATH_MAX];
             ^
elkscmd/file_utils/rm.c:111:8: style: The scope of the variable 'arg' can be reduced. [variableScope]
 char *arg;
       ^
elkscmd/file_utils/split.c:123:21: style: The scope of the variable 'len' can be reduced. [variableScope]
 register int dist, len;
                    ^
elkscmd/file_utils/split.c:174:15: style: The scope of the variable 'len' can be reduced. [variableScope]
 register int len, bcnt;
              ^
elkscmd/inet/ftp/ftp.c:289:4: warning:inconclusive: The buffer 'lbuf' may not be null-terminated after the call to strncpy(). [terminateStrncpy]
   strncpy(lbuf, cp, sizeof(lbuf)); // save the extra reply
   ^
elkscmd/inet/ftp/ftp.c:830:35: error: The address of local variable 'myport' is accessed at non-zero index. [objectIndex]
 get_port_string(str, myip, (int) UC(p[1]), (int) UC(p[0]));
                                  ^
elkscmd/inet/ftp/ftp.c:822:14: note: Address of variable taken here.
 p = (char *)&myport;
             ^
elkscmd/inet/ftp/ftp.c:824:20: note: Assuming condition is false
 if (listen(fd, 1) < 0) {
                   ^
elkscmd/inet/ftp/ftp.c:830:35: note: The address of local variable 'myport' is accessed at non-zero index.
 get_port_string(str, myip, (int) UC(p[1]), (int) UC(p[0]));
                                  ^
elkscmd/inet/ftp/ftp.c:203:3: warning: Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead. [getsCalled]
  gets(buf);
  ^
elkscmd/inet/ftp/ftp.c:1079:9: warning: Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead. [getsCalled]
  lip = gets(localbf);
        ^
elkscmd/inet/ftp/ftp.c:1097:13: warning: Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead. [getsCalled]
 if (strlen(gets(localbf)) > 2) strcpy(user, localbf); /* no boundary checking */
            ^
elkscmd/inet/ftp/ftp.c:1208:3: warning: %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
  printf("cmd line: ip %s port %u %s\n", srvr_ip, server_port, (server_port == DFLT_PORT)? "(default)" : "");
  ^
elkscmd/inet/ftp/ftp.c:249:6: style: The scope of the variable 'l' can be reduced. [variableScope]
 int l = 0;
     ^
elkscmd/inet/ftp/ftp.c:621:25: style: The scope of the variable 'select_return' can be reduced. [variableScope]
 struct timeval tv; int select_return, icount = 0;
                        ^
elkscmd/inet/ftp/ftp.c:249:8: style: Variable 'l' is assigned a value that is never used. [unreadVariable]
 int l = 0;
       ^
elkscmd/inet/ftp/ftpd.c:703:4: warning:inconclusive: The buffer 'real_ip' may not be null-terminated after the call to strncpy(). [terminateStrncpy]
   strncpy(real_ip, in_ntoa(client.sin_addr.s_addr), 20); // Save for QEMU hack
   ^
elkscmd/inet/ftp/ftpd.c:344:6: style: Condition '!glob' is always false [knownConditionTrueFalse]
 if (!glob) {
     ^
elkscmd/inet/ftp/ftpd.c:321:28: note: Assignment 'glob=0', assigned value is 0
 int len, nlst = 0, glob = 0, status = 1;
                           ^
elkscmd/inet/ftp/ftpd.c:341:2: note: glob is incremented', new value is 1
 glob++;
 ^
elkscmd/inet/ftp/ftpd.c:344:6: note: Condition '!glob' is always false
 if (!glob) {
     ^
elkscmd/inet/ftp/ftpd.c:400:7: style: Condition '!glob' is always false [knownConditionTrueFalse]
  if (!glob) closedir(dir);
      ^
elkscmd/inet/ftp/ftpd.c:321:28: note: Assignment 'glob=0', assigned value is 0
 int len, nlst = 0, glob = 0, status = 1;
                           ^
elkscmd/inet/ftp/ftpd.c:341:2: note: glob is incremented', new value is 1
 glob++;
 ^
elkscmd/inet/ftp/ftpd.c:400:7: note: Condition '!glob' is always false
  if (!glob) closedir(dir);
      ^
elkscmd/inet/ftp/ftpd.c:408:6: style: Condition 'dir' is always false [knownConditionTrueFalse]
 if (dir) closedir(dir); //FIXME - part of the LIST/NDIR mess
     ^
elkscmd/inet/ftp/ftpd.c:320:13: note: Assignment 'dir=NULL', assigned value is 0
 DIR *dir = NULL;
            ^
elkscmd/inet/ftp/ftpd.c:354:6: note: Assuming condition is false
 if (nlst) {
     ^
elkscmd/inet/ftp/ftpd.c:408:6: note: Condition 'dir' is always false
 if (dir) closedir(dir); //FIXME - part of the LIST/NDIR mess
     ^
elkscmd/inet/ftp/ftpd.c:227:4: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
   printf("Bind: Could not connect on port %d\n", server_port-1);
   ^
elkscmd/inet/ftp/ftpd.c:257:8: style: Variable 'param' is reassigned a value before the old one has been used. [redundantAssignment]
 param = strtok(NULL, "\r\n"); /* get the rest of the line */
       ^
elkscmd/inet/ftp/ftpd.c:256:8: note: param is assigned
 param = strtok(input, " "); /* skip command name */
       ^
elkscmd/inet/ftp/ftpd.c:257:8: note: param is overwritten
 param = strtok(NULL, "\r\n"); /* get the rest of the line */
       ^
elkscmd/inet/ftp/ftpd.c:169:6: style: The scope of the variable 'ret' can be reduced. [variableScope]
 int ret;
     ^
elkscmd/inet/ftp/ftpd.c:519:6: style: The scope of the variable 'fd' can be reduced. [variableScope]
 int fd, len;
     ^
elkscmd/inet/ftp/ftpd.c:519:10: style: The scope of the variable 'len' can be reduced. [variableScope]
 int fd, len;
         ^
elkscmd/inet/ftp/ftpd.c:553:13: style: The scope of the variable 'len' can be reduced. [variableScope]
 int n = 0, len;
            ^
elkscmd/inet/httpd/httpd.c:145:11: style: The scope of the variable 'conn_sock' can be reduced. [variableScope]
 int ret, conn_sock;
          ^
elkscmd/inet/nettools/netstat.c:132:4: warning: %d in format string (no. 2) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
   printf(" (%d.%d secs)", secs, tenthsecs);
   ^
elkscmd/inet/nettools/netstat.c:65:11: style: The scope of the variable 'addrbytes' can be reduced. [variableScope]
    __u8 *addrbytes;
          ^
elkscmd/inet/telnet/telnet.c:104:8: style: Condition 'iacptr' is always true [knownConditionTrueFalse]
   if (iacptr && iacptr>bp)
       ^
elkscmd/inet/telnet/telnet.c:98:8: note: Assuming that condition '!iacptr' is not redundant
   if (!iacptr)
       ^
elkscmd/inet/telnet/telnet.c:104:8: note: Condition 'iacptr' is always true
   if (iacptr && iacptr>bp)
       ^
elkscmd/inet/telnet/telnet.c:114:8: style: Condition 'iacptr' is always true [knownConditionTrueFalse]
   if (iacptr)
       ^
elkscmd/inet/telnet/telnet.c:98:8: note: Assuming that condition '!iacptr' is not redundant
   if (!iacptr)
       ^
elkscmd/inet/telnet/telnet.c:104:15: note: Assuming condition is false
   if (iacptr && iacptr>bp)
              ^
elkscmd/inet/telnet/telnet.c:114:8: note: Condition 'iacptr' is always true
   if (iacptr)
       ^
elkscmd/inet/telnet/telnet.c:341:6: style: The scope of the variable 'result' can be reduced. [variableScope]
 int result;
     ^
elkscmd/inet/telnet/telnet.c:107:13: portability: %d in format string (no. 1) requires 'int' but the argument type is 'ptrdiff_t {aka signed int}'. [invalidPrintfArgType_sint]
 { where(); fprintf(stderr, " ptr-bp= %d\r\n", iacptr-bp); }
            ^
elkscmd/inet/telnet/telnet.c:453:13: warning: %x in format string (no. 1) requires 'unsigned int' but the argument type is 'signed char *'. [invalidPrintfArgType_uint]
 { where(); fprintf(stderr, "process_opt(bp= 0x%x, count= %d)\r\n",
            ^
elkscmd/inet/telnet/telnet.c:72:8: style: Unused variable: bp [unusedVariable]
 char *bp, *iacptr;
       ^
elkscmd/inet/telnet/telnet.c:72:13: style: Unused variable: iacptr [unusedVariable]
 char *bp, *iacptr;
            ^
elkscmd/inet/telnet/telnet.c:73:13: style: Unused variable: optsize [unusedVariable]
 int count, optsize;
            ^
elkscmd/inet/telnetd/telnet.c:118:5: style: The scope of the variable 'c' can be reduced. [variableScope]
int c;
    ^
elkscmd/inet/telnetd/telnet.c:235:5: style: The scope of the variable 'got_iac' can be reduced. [variableScope]
int got_iac, len;
    ^
elkscmd/inet/telnetd/telnet.c:235:14: style: The scope of the variable 'len' can be reduced. [variableScope]
int got_iac, len;
             ^
elkscmd/inet/tinyirc/tinyirc.c:521:15: style: Array index 'i' is used before limits check. [arrayIndexThenCheck]
    while (TOK[i] != NULL && i < 15)
              ^
elkscmd/inet/tinyirc/tinyirc.c:598:15: style: Array index 'i' is used before limits check. [arrayIndexThenCheck]
    while (TOK[i] != NULL && i < 5)
              ^
elkscmd/inet/tinyirc/tinyirc.c:985:3: warning:inconclusive: The buffer 'IRCNAME' may not be null-terminated after the call to strncpy(). [terminateStrncpy]
  strncpy(IRCNAME, argv[i], sizeof(IRCNAME));
  ^
elkscmd/inet/tinyirc/tinyirc.c:1001:6: warning:inconclusive: The buffer 'IRCNAME' may not be null-terminated after the call to strncpy(). [terminateStrncpy]
     strncpy(IRCNAME, userinfo->pw_name, sizeof(IRCNAME));
     ^
elkscmd/inet/tinyirc/tinyirc.c:1003:6: warning:inconclusive: The buffer 'IRCNAME' may not be null-terminated after the call to strncpy(). [terminateStrncpy]
     strncpy(IRCNAME, tmp, sizeof(IRCNAME));
     ^
elkscmd/inet/tinyirc/tinyirc.c:132:22: warning: Either the condition 'str2!=0' is redundant or there is possible null pointer dereference: str2. [nullPointerRedundantCheck]
    return (*str1 - *str2);
                     ^
elkscmd/inet/tinyirc/tinyirc.c:120:31: note: Assuming that condition 'str2!=0' is not redundant
    while (*str1 != 0 && str2 != 0) {
                              ^
elkscmd/inet/tinyirc/tinyirc.c:132:22: note: Null pointer dereference
    return (*str1 - *str2);
                     ^
elkscmd/inet/tinyirc/tinyirc.c:185:9: style: The scope of the variable 'ch' can be reduced. [variableScope]
    int ch, i, j, k, l;
        ^
elkscmd/inet/tinyirc/tinyirc.c:218:9: style: The scope of the variable 'n' can be reduced. [variableScope]
    int n;
        ^
elkscmd/inet/tinyirc/tinyirc.c:736:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i, z;
        ^
elkscmd/inet/tinyirc/tinyirc.c:736:12: style: The scope of the variable 'z' can be reduced. [variableScope]
    int i, z;
           ^
elkscmd/inet/tinyirc/tinyirc.c:185:9: style: Local variable 'ch' shadows outer variable [shadowVariable]
    int ch, i, j, k, l;
        ^
elkscmd/inet/tinyirc/tinyirc.c:79:19: note: Shadowed declaration
 serverdata[512], ch, bp[1024], lineout[512], *hist[HISTLEN], termcap[1024];
                  ^
elkscmd/inet/tinyirc/tinyirc.c:185:9: note: Shadow variable
    int ch, i, j, k, l;
        ^
elkscmd/inet/tinyirc/tinyirc.c:696:13: style: Variable 'outcol' is assigned a value that is never used. [unreadVariable]
     outcol = wordwrapout(encoded);
            ^
elkscmd/inet/tinyirc/tinyirc.c:456:0: information: Skipping configuration 'AUTOJOIN' since the value of 'AUTOJOIN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 sprintf(lineout, AUTOJOIN);
^
elkscmd/inet/tinyirc/tinyirc.c:937:0: information: Skipping configuration 'AUTOJOIN' since the value of 'AUTOJOIN' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
     sprintf(lineout, AUTOJOIN);
^
elkscmd/inet/tinyirc/tinyircd.c:84:22: warning: Either the condition 'str2!=0' is redundant or there is possible null pointer dereference: str2. [nullPointerRedundantCheck]
    return (*str1 - *str2);
                     ^
elkscmd/inet/tinyirc/tinyircd.c:72:31: note: Assuming that condition 'str2!=0' is not redundant
    while (*str1 != 0 && str2 != 0) {
                              ^
elkscmd/inet/tinyirc/tinyircd.c:84:22: note: Null pointer dereference
    return (*str1 - *str2);
                     ^
elkscmd/inet/tinyirc/tinyircd.c:47:11: style: struct member 'channel_list::name' is never used. [unusedStructMember]
    char *name;
          ^
elkscmd/inet/tinyirc/tinyircd.c:48:11: style: struct member 'channel_list::users' is never used. [unusedStructMember]
    char *users;
          ^
elkscmd/inet/tinyirc/tinyircd.c:49:11: style: struct member 'channel_list::modes' is never used. [unusedStructMember]
    char *modes;
          ^
elkscmd/inet/tinyirc/tinyircd.c:50:11: style: struct member 'channel_list::banlist' is never used. [unusedStructMember]
    char *banlist;
          ^
elkscmd/inet/tinyirc/tinyircd.c:51:11: style: struct member 'channel_list::moderators' is never used. [unusedStructMember]
    char *moderators;
          ^
elkscmd/inet/tinyirc/tinyircd.c:52:12: style: struct member 'channel_list::creation' is never used. [unusedStructMember]
    time_t creation;
           ^
elkscmd/inet/tinyirc/tinyircd.c:53:26: style: struct member 'channel_list::next' is never used. [unusedStructMember]
    struct channel_list *next;
                         ^
elkscmd/inet/tinyirc/tinyircd.c:57:11: style: struct member 'user_list::nick' is never used. [unusedStructMember]
    char *nick;
          ^
elkscmd/inet/tinyirc/tinyircd.c:58:11: style: struct member 'user_list::logname' is never used. [unusedStructMember]
    char *logname;
          ^
elkscmd/inet/tinyirc/tinyircd.c:59:11: style: struct member 'user_list::loghost' is never used. [unusedStructMember]
    char *loghost;
          ^
elkscmd/inet/tinyirc/tinyircd.c:60:11: style: struct member 'user_list::realname' is never used. [unusedStructMember]
    char *realname;
          ^
elkscmd/inet/tinyirc/tinyircd.c:61:11: style: struct member 'user_list::mode' is never used. [unusedStructMember]
    char *mode;
          ^
elkscmd/inet/tinyirc/tinyircd.c:62:12: style: struct member 'user_list::creation' is never used. [unusedStructMember]
    time_t creation;
           ^
elkscmd/inet/tinyirc/tinyircd.c:63:9: style: struct member 'user_list::hopcount' is never used. [unusedStructMember]
    int hopcount;
        ^
elkscmd/inet/urlget/urlget.c:229:5: warning: %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
    sprintf(buffer, "Content-Length: %u\r\n", len);
    ^
elkscmd/inet/urlget/urlget.c:390:6: style: Variable 's' is reassigned a value before the old one has been used. [redundantAssignment]
   s = ftpcmd(fpw, fpr, "TYPE", typec);
     ^
elkscmd/inet/urlget/urlget.c:379:9: note: s is assigned
      s = ftpcmd(fpw, fpr, "CWD", unesc(p)); /* assume success */
        ^
elkscmd/inet/urlget/urlget.c:390:6: note: s is overwritten
   s = ftpcmd(fpw, fpr, "TYPE", typec);
     ^
elkscmd/inet/urlget/urlget.c:195:10: style: The scope of the variable 'a' can be reduced. [variableScope]
   char *a, *qs;
         ^
elkscmd/inet/urlget/urlget.c:287:5: style: The scope of the variable 'ft' can be reduced. [variableScope]
int ft;
    ^
elkscmd/inet/urlget/urlget.c:487:8: style: The scope of the variable 's2' can be reduced. [variableScope]
   int s2;
       ^
elkscmd/inet/urlget/urlget.c:576:10: style: Variable 'argc' is assigned a value that is never used. [unreadVariable]
     argc++;
         ^
elkscmd/ktcp/hexdump.c:75:10: style: The scope of the variable 'ch' can be reduced. [variableScope]
  int j, ch;
         ^
elkscmd/ktcp/ktcp.c:72:9: style: The scope of the variable 'count' can be reduced. [variableScope]
    int count;
        ^
elkscmd/ktcp/slip.c:79:0: information: Skipping configuration 'B1000000' since the value of 'B1000000' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 case 1000000: return B1000000;
^
elkscmd/ktcp/slip.c:64:0: information: Skipping configuration 'B230400' since the value of 'B230400' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 case 230400: return B230400;
^
elkscmd/ktcp/slip.c:67:0: information: Skipping configuration 'B460800' since the value of 'B460800' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 case 460800: return B460800;
^
elkscmd/ktcp/slip.c:70:0: information: Skipping configuration 'B500000' since the value of 'B500000' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 case 500000: return B500000;
^
elkscmd/ktcp/slip.c:73:0: information: Skipping configuration 'B576000' since the value of 'B576000' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 case 576000: return B576000;
^
elkscmd/ktcp/slip.c:76:0: information: Skipping configuration 'B921600' since the value of 'B921600' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 case 921600: return B921600;
^
elkscmd/ktcp/tcp.c:368:20: style: Variable 'cb->time_wait_exp' is reassigned a value before the old one has been used. [redundantAssignment]
 cb->time_wait_exp = Now;
                   ^
elkscmd/ktcp/tcp.c:362:6: note: cb->time_wait_exp is assigned
     ENTER_TIME_WAIT(cb);
     ^
elkscmd/ktcp/tcp.c:368:20: note: cb->time_wait_exp is overwritten
 cb->time_wait_exp = Now;
                   ^
elkscmd/ktcp/tcp.c:233:11: style: The scope of the variable 'data' can be reduced. [variableScope]
    __u8 *data;
          ^
elkscmd/ktcp/tcp_output.c:292:5: warning: %u in format string (no. 10) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
    printf("tcp retrans: seq %lu+%u size %d rcvwnd %u unack %lu rto %ld rtt %ld (RETRY %d cnt %d mem %u)\n",
    ^
elkscmd/ktcp/tcp_output.c:310:2: warning: %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
 printf("ktcp: retransmit memory over limit (cnt %d, mem %u)\n", tcp_timeruse, tcp_retrans_memory);
 ^
elkscmd/ktcp/tcp_output.c:306:18: style: The scope of the variable 'datalen' can be reduced. [variableScope]
    unsigned int datalen;
                 ^
elkscmd/ktcp/tcpdev.c:340:10: style: Redundant initialization for 'sock'. The initialized value is overwritten before it is read. [redundantInitialization]
    sock = db->sock;
         ^
elkscmd/ktcp/tcpdev.c:337:18: note: sock is initialized
    void *  sock = db->sock;
                 ^
elkscmd/ktcp/tcpdev.c:340:10: note: sock is overwritten
    sock = db->sock;
         ^
elkscmd/ktcp/tcpdev.c:61:37: style:inconclusive: Function 'retval_to_sock' argument 2 names different: declaration 'r' definition 'retval'. [funcArgNamesDifferent]
void retval_to_sock(void *sock, int retval)
                                    ^
elkscmd/ktcp/tcpdev.h:10:37: note: Function 'retval_to_sock' argument 2 names different: declaration 'r' definition 'retval'.
void retval_to_sock(void *sock, int r);
                                    ^
elkscmd/ktcp/tcpdev.c:61:37: note: Function 'retval_to_sock' argument 2 names different: declaration 'r' definition 'retval'.
void retval_to_sock(void *sock, int retval)
                                    ^
elkscmd/levee/termcap.i:141:16: style: Unused variable: ptr [unusedVariable]
    char *lp, *ptr;
               ^
elkscmd/levee/editcor.c:303:48: style:inconclusive: Boolean expression 'cmd==49' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
  newend = insertion(1,setstep[ (cmd==OPENUP_C)&1 ],
                                               ^
elkscmd/levee/editcor.c:43:2: style: The scope of the variable 'DLEnum' can be reduced. [variableScope]
 DLEnum;
 ^
elkscmd/levee/editcor.c:90:10: style: The scope of the variable 'ok' can be reduced. [variableScope]
    bool ok;
         ^
elkscmd/levee/editcor.c:91:9: style: The scope of the variable 'lp' can be reduced. [variableScope]
    int lp, first;
        ^
elkscmd/levee/editcor.c:91:13: style: The scope of the variable 'first' can be reduced. [variableScope]
    int lp, first;
            ^
elkscmd/levee/editcor.c:122:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
elkscmd/levee/editcor.c:504:13: style: The scope of the variable 'cmd' can be reduced. [variableScope]
    cmdtype cmd;
            ^
elkscmd/levee/editcor.c:90:10: style: Local variable 'ok' shadows outer variable [shadowVariable]
    bool ok;
         ^
elkscmd/levee/editcor.c:26:6: note: Shadowed declaration
bool ok;
     ^
elkscmd/levee/editcor.c:90:10: note: Shadow variable
    bool ok;
         ^
elkscmd/levee/exec.c:260:20: style: Expression is always true because 'else if' condition is opposite to previous condition at line 251. [multiCondition]
 else if (*execstr != 0) {
                   ^
elkscmd/levee/exec.c:251:18: note: first condition
    if (*execstr == 0)
                 ^
elkscmd/levee/exec.c:260:20: note: else if condition is opposite to first condition
 else if (*execstr != 0) {
                   ^
elkscmd/levee/exec.c:1071:6: style: Variable 'zotscreen' is reassigned a value before the old one has been used. [redundantAssignment]
     exprintln();
     ^
elkscmd/levee/exec.c:1070:16: note: zotscreen is assigned
     zotscreen = YES;
               ^
elkscmd/levee/exec.c:1071:6: note: zotscreen is overwritten
     exprintln();
     ^
elkscmd/levee/exec.c:278:20: style: The scope of the variable 'p' can be reduced. [variableScope]
    register char *p;
                   ^
elkscmd/levee/exec.c:292:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
elkscmd/levee/exec.c:545:9: style: The scope of the variable 'status' can be reduced. [variableScope]
    int status;
        ^
elkscmd/levee/exec.c:239:20: style: Local variable 'macro' shadows outer variable [shadowVariable]
    register char *macro, c;
                   ^
elkscmd/levee/extern.h:172:5: note: Shadowed declaration
int macro;    /* Index into MCR macro execution stack */
    ^
elkscmd/levee/exec.c:239:20: note: Shadow variable
    register char *macro, c;
                   ^
elkscmd/levee/exec.c:803:10: style: Local variable 'line' shadows outer function [shadowFunction]
    char line[120];
         ^
elkscmd/levee/extern.h:196:13: note: Shadowed declaration
extern char line(), peekc(), readchar();
            ^
elkscmd/levee/exec.c:803:10: note: Shadow variable
    char line[120];
         ^
elkscmd/levee/exec.c:119:9: style: Unused variable: len [unusedVariable]
    int len,i;
        ^
elkscmd/levee/exec.c:119:13: style: Unused variable: i [unusedVariable]
    int len,i;
            ^
elkscmd/levee/exec.c:521:11: style: Unused variable: p [unusedVariable]
    char *p;
          ^
elkscmd/levee/exec.c:695:2: style: Unused variable: what [unusedVariable]
 what,
 ^
elkscmd/levee/find.c:327:9: style: The scope of the variable 'ep' can be reduced. [variableScope]
    int ep;
        ^
elkscmd/levee/find.c:343:9: style: The scope of the variable 'ep' can be reduced. [variableScope]
    int ep,i, j;
        ^
elkscmd/levee/find.c:343:15: style: The scope of the variable 'j' can be reduced. [variableScope]
    int ep,i, j;
              ^
elkscmd/levee/find.c:405:10: style: The scope of the variable 'c' can be reduced. [variableScope]
    char c;
         ^
elkscmd/levee/find.c:161:20: style: Local variable 'p' shadows outer variable [shadowVariable]
    register char *p = 1+pattern;
                   ^
elkscmd/levee/find.c:171:7: note: Shadowed declaration
char *p;
      ^
elkscmd/levee/find.c:161:20: note: Shadow variable
    register char *p = 1+pattern;
                   ^
elkscmd/levee/find.c:162:18: style: Local variable 'count' shadows outer variable [shadowVariable]
    register int count;
                 ^
elkscmd/levee/extern.h:153:5: note: Shadowed declaration
    count,  /* Latest count */
    ^
elkscmd/levee/find.c:162:18: note: Shadow variable
    register int count;
                 ^
elkscmd/levee/find.c:372:11: style: Local variable 'p' shadows outer variable [shadowVariable]
    char *p;
          ^
elkscmd/levee/find.c:171:7: note: Shadowed declaration
char *p;
      ^
elkscmd/levee/find.c:372:11: note: Shadow variable
    char *p;
          ^
elkscmd/levee/find.c:138:14: warning: Unused variable value 'count' [constStatement]
    register count;
             ^
elkscmd/levee/find.c:263:10: error: Uninitialized variable: cp [uninitvar]
 oldcp = cp;
         ^
elkscmd/levee/insert.c:71:14: error: Uninitialized variable: i [uninitvar]
 if (curr == i) {
             ^
elkscmd/levee/insert.c:71:14: error: Uninitialized variable: i [uninitvar]
 if (curr == i) {
             ^
elkscmd/levee/insert.c:69:6: note: Assuming condition is false
 if (autoindent)
     ^
elkscmd/levee/insert.c:71:14: note: Uninitialized variable: i
 if (curr == i) {
             ^
elkscmd/levee/main.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/levee/main.c:240:15: style: Local variable 'mode' shadows outer variable [shadowVariable]
    exec_type mode;
              ^
elkscmd/levee/extern.h:25:11: note: Shadowed declaration
exec_type mode;   /* editor init state */
          ^
elkscmd/levee/main.c:240:15: note: Shadow variable
    exec_type mode;
              ^
elkscmd/levee/main.c:44:11: style: Unused variable: p [unusedVariable]
    char *p, *getenv();
          ^
elkscmd/levee/misc.c:363:10: style: The scope of the variable 'c' can be reduced. [variableScope]
    char c;
         ^
elkscmd/levee/misc.c:108:14: style: Local variable 'xp' shadows outer variable [shadowVariable]
    int top, xp;
             ^
elkscmd/levee/extern.h:154:5: note: Shadowed declaration
    xp, yp,  /* Cursor window position */
    ^
elkscmd/levee/misc.c:108:14: note: Shadow variable
    int top, xp;
             ^
elkscmd/levee/misc.c:129:9: style: Local variable 'yp' shadows outer variable [shadowVariable]
    int yp, ix;
        ^
elkscmd/levee/extern.h:154:9: note: Shadowed declaration
    xp, yp,  /* Cursor window position */
        ^
elkscmd/levee/misc.c:129:9: note: Shadow variable
    int yp, ix;
        ^
elkscmd/levee/misc.c:146:13: style: Local variable 'line' shadows outer function [shadowFunction]
    int tdx,line;
            ^
elkscmd/levee/extern.h:196:13: note: Shadowed declaration
extern char line(), peekc(), readchar();
            ^
elkscmd/levee/misc.c:146:13: note: Shadow variable
    int tdx,line;
            ^
elkscmd/levee/misc.c:448:17: style: Local variable 'count' shadows outer variable [shadowVariable]
    int bottom, count;
                ^
elkscmd/levee/extern.h:153:5: note: Shadowed declaration
    count,  /* Latest count */
    ^
elkscmd/levee/misc.c:448:17: note: Shadow variable
    int bottom, count;
                ^
elkscmd/levee/misc.c:467:14: style: Local variable 'yp' shadows outer variable [shadowVariable]
    int top, yp;
             ^
elkscmd/levee/extern.h:154:9: note: Shadowed declaration
    xp, yp,  /* Cursor window position */
        ^
elkscmd/levee/misc.c:467:14: note: Shadow variable
    int top, yp;
             ^
elkscmd/levee/modify.c:31:12: style: The scope of the variable 'f' can be reduced. [variableScope]
    HANDLE f;
           ^
elkscmd/levee/move.c:349:18: warning: Either the condition 'cp>=0' is redundant or the array 'core[0]' is accessed at index -1, which is out of bounds. [negativeIndex]
 ccl = class(core[cp]);
                 ^
elkscmd/levee/move.c:343:15: note: Assuming that condition 'cp>=0' is not redundant
    while (cp >= 0 && cp < bufmax && count-- > 0) {
              ^
elkscmd/levee/move.c:349:18: note: Negative array index
 ccl = class(core[cp]);
                 ^
elkscmd/levee/move.c:264:10: style: The scope of the variable 'srcchar' can be reduced. [variableScope]
    char srcchar, dstchar;
         ^
elkscmd/levee/move.c:264:19: style: The scope of the variable 'dstchar' can be reduced. [variableScope]
    char srcchar, dstchar;
                  ^
elkscmd/levee/move.c:265:14: style: The scope of the variable 'step' can be reduced. [variableScope]
    int lev, step;
             ^
elkscmd/levee/move.c:393:10: style: The scope of the variable 'c' can be reduced. [variableScope]
    char c;
         ^
elkscmd/levee/move.c:410:10: style: The scope of the variable 'c' can be reduced. [variableScope]
    char c;
         ^
elkscmd/levee/undo.c:57:9: style: The scope of the variable 'chunk' can be reduced. [variableScope]
    int chunk;
        ^
elkscmd/levee/undo.c:166:9: style: The scope of the variable 'chunk' can be reduced. [variableScope]
    int chunk, loc;
        ^
elkscmd/levee/undo.c:235:10: style: The scope of the variable 'closeio' can be reduced. [variableScope]
    bool closeio, ok;
         ^
elkscmd/levee/undo.c:235:19: style: The scope of the variable 'ok' can be reduced. [variableScope]
    bool closeio, ok;
                  ^
elkscmd/lib/tiny_vfprintf.c:130:10: style: Unused variable: tmp [unusedVariable]
   char  tmp[64];
         ^
elkscmd/m4/eval.c:133:16: style: Condition 'argc>2' is always true [knownConditionTrueFalse]
   pbnum((argc > 2) ? strlen(argv[2]) : 0);
               ^
elkscmd/m4/eval.c:132:12: note: Assuming that condition 'argc>2' is not redundant
  if (argc > 2)
           ^
elkscmd/m4/eval.c:133:16: note: Condition 'argc>2' is always true
   pbnum((argc > 2) ? strlen(argv[2]) : 0);
               ^
elkscmd/m4/eval.c:44:6: style: The scope of the variable 'fd' can be reduced. [variableScope]
 int fd;
     ^
elkscmd/m4/expr.c:118:29: style: The scope of the variable 'vr' can be reduced. [variableScope]
        register int c, vl, vr;
                            ^
elkscmd/m4/expr.c:138:29: style: The scope of the variable 'vr' can be reduced. [variableScope]
        register int c, vl, vr;
                            ^
elkscmd/m4/expr.c:158:26: style: The scope of the variable 'vr' can be reduced. [variableScope]
        register int vl, vr, c;
                         ^
elkscmd/m4/expr.c:179:26: style: The scope of the variable 'vr' can be reduced. [variableScope]
        register int vl, vr;
                         ^
elkscmd/m4/expr.c:197:26: style: The scope of the variable 'vr' can be reduced. [variableScope]
        register int vl, vr, c;
                         ^
elkscmd/m4/expr.c:218:26: style: The scope of the variable 'vr' can be reduced. [variableScope]
        register int vl, vr, rel;
                         ^
elkscmd/m4/expr.c:243:26: style: The scope of the variable 'vr' can be reduced. [variableScope]
        register int vl, vr, rel;
                         ^
elkscmd/m4/expr.c:274:26: style: The scope of the variable 'vr' can be reduced. [variableScope]
        register int vl, vr, c;
                         ^
elkscmd/m4/expr.c:298:29: style: The scope of the variable 'vr' can be reduced. [variableScope]
        register int c, vl, vr;
                            ^
elkscmd/m4/expr.c:319:29: style: The scope of the variable 'vr' can be reduced. [variableScope]
        register int c, vl, vr;
                            ^
elkscmd/m4/expr.c:347:22: style: The scope of the variable 'val' can be reduced. [variableScope]
        register int val, c;
                     ^
elkscmd/m4/expr.c:372:22: style: The scope of the variable 'val' can be reduced. [variableScope]
        register int val;
                     ^
elkscmd/m4/expr.c:397:25: style: The scope of the variable 'c' can be reduced. [variableScope]
        register char   c;
                        ^
elkscmd/m4/main.c:256:15: style: The scope of the variable 't' can be reduced. [variableScope]
 register int t, l;
              ^
elkscmd/m4/main.c:436:15: style: The scope of the variable 'h' can be reduced. [variableScope]
 register int h;
              ^
elkscmd/m4/main.c:254:7: style: Variable 'token' is not assigned a value. [unassignedVariable]
 char token[MAXTOK];
      ^
elkscmd/m4/serv.c:304:22: style: The scope of the variable 'ind' can be reduced. [variableScope]
        register int ind;
                     ^
elkscmd/m4/serv.c:384:24: style: The scope of the variable 'tmp' can be reduced. [variableScope]
        register char *tmp;
                       ^
elkscmd/m4/serv.c:385:23: style: The scope of the variable 'sch' can be reduced. [variableScope]
        register char sch, dch;
                      ^
elkscmd/m4/serv.c:385:28: style: The scope of the variable 'dch' can be reduced. [variableScope]
        register char sch, dch;
                           ^
elkscmd/m4/serv.c:217:22: style: The scope of the variable 'c' can be reduced. [variableScope]
        register int c;
                     ^
elkscmd/minix1/banner.c:128:16: style: The scope of the variable 'len' can be reduced. [variableScope]
  int a, b, c, len, ind;
               ^
elkscmd/minix1/cksum.c:95:23: warning: Either the condition 'aux>=sizeof(crctab)/sizeof(crctab[0])' is redundant or the array 'crctab[256]' is accessed at index 256, which is out of bounds. [arrayIndexOutOfBoundsCond]
 s = (s << 8) ^ crctab[i];
                      ^
elkscmd/minix1/cksum.c:91:11: note: Assuming that condition 'aux>=sizeof(crctab)/sizeof(crctab[0])' is not redundant
  if (aux >= sizeof(crctab) / sizeof(crctab[0])) aux = 0;
          ^
elkscmd/minix1/cksum.c:90:10: note: Assignment 'i=aux++', assigned value is 256
  i = aux++;
         ^
elkscmd/minix1/cksum.c:95:23: note: Array index out of bounds
 s = (s << 8) ^ crctab[i];
                      ^
elkscmd/minix1/cksum.c:81:16: style: The scope of the variable 'i' can be reduced. [variableScope]
  register int i;
               ^
elkscmd/minix1/cksum.c:105:7: style: The scope of the variable 'nb' can be reduced. [variableScope]
  int nb;
      ^
elkscmd/minix1/cut.c:114:7: style: The scope of the variable 'flag' can be reduced. [variableScope]
  int flag;
      ^
elkscmd/minix1/cut.c:151:13: style: The scope of the variable 'length' can be reduced. [variableScope]
  int i, j, length, maxcol = 0;
            ^
elkscmd/minix1/decomp16.c:385:11: style: Condition 'pnum==0' is always true [knownConditionTrueFalse]
 if (pnum == 0) ffork();
          ^
elkscmd/minix1/decomp16.c:384:9: note: Assignment 'pnum=0', assigned value is 0
 pnum = 0;
        ^
elkscmd/minix1/decomp16.c:385:11: note: Condition 'pnum==0' is always true
 if (pnum == 0) ffork();
          ^
elkscmd/minix1/fgrep.c:257:9: style: The scope of the variable 'str' can be reduced. [variableScope]
  char *str, *p;
        ^
elkscmd/minix1/fgrep.c:90:0: information: Skipping configuration 'noperprintf' since the value of 'noperprintf' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  noperprintf(stdout);
^
elkscmd/minix1/grep.c:288:3: error: Common realloc mistake: 'mapped' nulled but not freed upon failure [memleakOnRealloc]
  mapped = (char *) realloc(mapped, buf_size);
  ^
elkscmd/minix1/grep.c:234:16: style: The scope of the variable 'c' can be reduced. [variableScope]
  register int c = 0;
               ^
elkscmd/minix1/grep.c:236:10: style: The scope of the variable 'new_size' can be reduced. [variableScope]
  size_t new_size;
         ^
elkscmd/minix1/grep.c:234:18: style: Variable 'c' is assigned a value that is never used. [unreadVariable]
  register int c = 0;
                 ^
elkscmd/minix1/proto.c:198:8: style: Condition 'oldw' is always false [knownConditionTrueFalse]
   if (oldw && !strcmp(oldw->string, "unsigned")) {
       ^
elkscmd/minix1/proto.c:191:16: note: Assignment 'oldw=0', assigned value is 0
  Word *oldw = 0;
               ^
elkscmd/minix1/proto.c:198:8: note: Condition 'oldw' is always false
   if (oldw && !strcmp(oldw->string, "unsigned")) {
       ^
elkscmd/minix1/proto.c:234:4: style: Variable 'c' is reassigned a value before the old one has been used. [redundantAssignment]
 c = ngetc(f);
   ^
elkscmd/minix1/proto.c:233:4: note: c is assigned
 c = ngetc(f);  /* skip a character */
   ^
elkscmd/minix1/proto.c:234:4: note: c is overwritten
 c = ngetc(f);
   ^
elkscmd/minix1/proto.c:409:9: style: Variable 'plist' is reassigned a value before the old one has been used. [redundantAssignment]
  plist = word_alloc("");
        ^
elkscmd/minix1/proto.c:387:10: note: plist is assigned
   plist = word_alloc("");
         ^
elkscmd/minix1/proto.c:409:9: note: plist is overwritten
  plist = word_alloc("");
        ^
elkscmd/minix1/proto.c:81:9: style: The scope of the variable 'oldw' can be reduced. [variableScope]
  Word *oldw;
        ^
elkscmd/minix1/proto.c:229:10: style: The scope of the variable 'lastc' can be reduced. [variableScope]
  int c, lastc, incomment;
         ^
elkscmd/minix1/proto.c:229:17: style: The scope of the variable 'incomment' can be reduced. [variableScope]
  int c, lastc, incomment;
                ^
elkscmd/minix1/proto.c:298:7: style: The scope of the variable 'inbrack' can be reduced. [variableScope]
  int inbrack = 0;
      ^
elkscmd/minix1/proto.c:347:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
elkscmd/minix1/proto.c:598:9: style: The scope of the variable 'f' can be reduced. [variableScope]
  FILE *f, *g;
        ^
elkscmd/minix1/proto.c:599:9: style: The scope of the variable 't' can be reduced. [variableScope]
  char *t;
        ^
elkscmd/minix1/proto.c:600:8: style: The scope of the variable 'newname' can be reduced. [variableScope]
  char newname[40];
       ^
elkscmd/minix1/proto.c:298:15: style: Variable 'inbrack' is assigned a value that is never used. [unreadVariable]
  int inbrack = 0;
              ^
elkscmd/minix1/uniq.c:167:2: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
 argc--;
 ^
elkscmd/minix1/uniq.c:161:2: error: Return value of allocation function 'xfopen' is not stored. [leakReturnValNotUsed]
 xfopen(*argv++, "r");
 ^
elkscmd/minix1/uniq.c:166:2: error: Return value of allocation function 'xfopen' is not stored. [leakReturnValNotUsed]
 xfopen(*argv++, "w");
 ^
elkscmd/minix1/uniq.c:110:7: style: The scope of the variable 'c' can be reduced. [variableScope]
  int c;
      ^
elkscmd/minix1/uniq.c:158:6: style: Variable 'inf' is assigned a value that is never used. [unreadVariable]
 inf = 0;
     ^
elkscmd/minix1/uniq.c:167:6: style: Variable 'argc' is assigned a value that is never used. [unreadVariable]
 argc--;
     ^
elkscmd/minix2/install.c:575:10: style: The scope of the variable 'base' can be reduced. [variableScope]
   char *base;
         ^
elkscmd/minix2/install.c:306:0: information: Skipping configuration 'A_NSYM' since the value of 'A_NSYM' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
     hdr->a_flags &= ~A_NSYM;
^
elkscmd/minix2/install.c:190:0: information: Skipping configuration 'A_PAL' since the value of 'A_PAL' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  if (hdr->a_flags & A_PAL) total+= hdr->a_hdrlen;
^
elkscmd/minix2/lpd.c:318:9: style: The scope of the variable 'n' can be reduced. [variableScope]
    int n;
        ^
elkscmd/minix2/lpd.c:103:10: style: Local variable 'spool' shadows outer function [shadowFunction]
    DIR *spool;
         ^
elkscmd/minix2/lpd.c:41:6: note: Shadowed declaration
void spool(char *path) {
     ^
elkscmd/minix2/lpd.c:103:10: note: Shadow variable
    DIR *spool;
         ^
elkscmd/minix2/lpd.c:276:17: style: Local variable 'job' shadows outer function [shadowFunction]
    struct job *job;
                ^
elkscmd/minix2/lpd.c:97:5: note: Shadowed declaration
int job(void) {
    ^
elkscmd/minix2/lpd.c:276:17: note: Shadow variable
    struct job *job;
                ^
elkscmd/minix2/lpd.c:34:11: style: Variable 'e' is assigned a value that is never used. [unreadVariable]
    int e = errno;
          ^
elkscmd/minix2/man.c:566:19: style: Redundant condition: If 'EXPR == ':'', the comparison 'EXPR != 0' is always true. [redundantCondition]
  while (*pp != 0 && *pp == ':') pp++;
                  ^
elkscmd/minix2/man.c:97:7: style: The scope of the variable 'mid0' can be reduced. [variableScope]
 long mid0, mid1;
      ^
elkscmd/minix2/man.c:97:13: style: The scope of the variable 'mid1' can be reduced. [variableScope]
 long mid0, mid1;
            ^
elkscmd/minix2/man.c:245:6: style: The scope of the variable 'last' can be reduced. [variableScope]
 int last;
     ^
elkscmd/minix2/man.c:563:22: style: The scope of the variable 'pd' can be reduced. [variableScope]
 char *pp= manpath, *pd;
                     ^
elkscmd/minix2/man.c:592:8: style: The scope of the variable 'title' can be reduced. [variableScope]
 char *title, *section= ALL;
       ^
elkscmd/minix2/man.c:450:7: style: Local variable 'whatis' shadows outer variable [shadowVariable]
 char whatis[1024], pagename[1024], *wpage, *wsection;
      ^
elkscmd/minix2/man.c:207:5: note: Shadowed declaration
int whatis= 0;  /* man -f word == whatis word. */
    ^
elkscmd/minix2/man.c:450:7: note: Shadow variable
 char whatis[1024], pagename[1024], *wpage, *wsection;
      ^
elkscmd/minix2/man.c:240:17: warning: Found suspicious operator ',' [constStatement]
 char *(*plp)[8], **argv;
                ^
elkscmd/minix2/man.c:430:21: error: Uninitialized variable: word [uninitvar]
 size_t len= strlen(word);
                    ^
elkscmd/minix2/man.c:469:33: note: Assuming condition is false
 if (strlen(mandir) + 1 + 6 + 1 > arraysize(whatis)) return 0;
                                ^
elkscmd/minix2/man.c:486:15: note: Calling function 'member', 1st argument 'wsection' value is <Uninit>
  if (!member(wsection, section)) continue;
              ^
elkscmd/minix2/man.c:430:21: note: Uninitialized variable: word
 size_t len= strlen(word);
                    ^
elkscmd/minix2/man.c:486:15: error: Uninitialized variable: wsection [uninitvar]
  if (!member(wsection, section)) continue;
              ^
elkscmd/minix2/man.c:469:33: note: Assuming condition is false
 if (strlen(mandir) + 1 + 6 + 1 > arraysize(whatis)) return 0;
                                ^
elkscmd/minix2/man.c:486:15: note: Uninitialized variable: wsection
  if (!member(wsection, section)) continue;
              ^
elkscmd/minix2/pwdauth.c:37:17: style: The scope of the variable 'pw' can be reduced. [variableScope]
 struct passwd *pw;
                ^
elkscmd/minix2/pwdauth.c:35:7: style: Local variable 'key' shadows outer variable [shadowVariable]
 char key[LEN];
      ^
elkscmd/minix2/pwdauth.c:96:21: note: Shadowed declaration
static struct block key;
                    ^
elkscmd/minix2/pwdauth.c:35:7: note: Shadow variable
 char key[LEN];
      ^
elkscmd/minix2/pwdauth.c:242:11: style: Local variable 'r' shadows outer variable [shadowVariable]
  int xb, r;
          ^
elkscmd/minix2/pwdauth.c:227:25: note: Shadowed declaration
 unsigned char *p, *q, *r;
                        ^
elkscmd/minix2/pwdauth.c:242:11: note: Shadow variable
  int xb, r;
          ^
elkscmd/minix2/remsync.c:308:23: style: The scope of the variable 'new_fake_ino' can be reduced. [variableScope]
 static unsigned long new_fake_ino= 0;
                      ^
elkscmd/minix2/remsync.c:977:17: style: The scope of the variable 'p' can be reduced. [variableScope]
 unsigned char *p;
                ^
elkscmd/minix2/remsync.c:809:6: style: Local variable 'indent' shadows outer function [shadowFunction]
 int indent, depth;
     ^
elkscmd/minix2/remsync.c:501:6: note: Shadowed declaration
void indent(int depth)
     ^
elkscmd/minix2/remsync.c:809:6: note: Shadow variable
 int indent, depth;
     ^
elkscmd/minix2/remsync.c:258:6: error: Uninitialized variable: names [uninitvar]
 if (names != nil && names->next != nil) sort(&names);
     ^
elkscmd/minix2/remsync.c:242:25: note: Assuming condition is false
 if ((dp= opendir(dir)) == nil) return nil;
                        ^
elkscmd/minix2/remsync.c:258:6: note: Uninitialized variable: names
 if (names != nil && names->next != nil) sort(&names);
     ^
elkscmd/minix2/synctree.c:1096:0: error: Syntax Error: AST broken, binary operator '=' doesn't have two operands. [internalAstError]
static enum action { ADD, COMPARE, DELETE } action()
^
elkscmd/minix2/synctree.c:946:0: information: Skipping configuration 'S_IFLNK' since the value of 'S_IFLNK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 case S_IFLNK:
^
elkscmd/minix2/synctree.c:1068:0: information: Skipping configuration 'S_IFLNK' since the value of 'S_IFLNK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 case S_IFLNK: return strcmp(lnkpth, Slnkpth) != 0;
^
elkscmd/minix2/tget.c:26:7: style: Variable 'string' is not assigned a value. [unassignedVariable]
 char string[256], *pstr;
      ^
elkscmd/minix3/cal.c:52:16: style: The scope of the variable 'year' can be reduced. [variableScope]
  register int year;
               ^
elkscmd/minix3/cal.c:54:16: style: The scope of the variable 'arg1val' can be reduced. [variableScope]
  register int arg1val;
               ^
elkscmd/minix3/cal.c:55:7: style: The scope of the variable 'arg1len' can be reduced. [variableScope]
  int arg1len;
      ^
elkscmd/minix3/cal.c:56:7: style: The scope of the variable 'arg2val' can be reduced. [variableScope]
  int arg2val;
      ^
elkscmd/minix3/cal.c:130:18: style: The scope of the variable 'outp' can be reduced. [variableScope]
  register char *outp;
                 ^
elkscmd/minix3/cal.c:68:14: error: Uninitialized variable: year [uninitvar]
   do3months(year, arg1val);
             ^
elkscmd/minix3/cal.c:116:7: error: Uninitialized variable: year [uninitvar]
  if (year < 1 || year > 9999) usage(badarg);
      ^
elkscmd/minix3/cal.c:68:14: note: Calling function 'domonth', 1st argument 'year' value is <Uninit>
   do3months(year, arg1val);
             ^
elkscmd/minix3/cal.c:116:7: note: Uninitialized variable: year
  if (year < 1 || year > 9999) usage(badarg);
      ^
elkscmd/minix3/diff.c:1128:10: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
  eof1 = fscanf(ls1, "%s\n", file1);
         ^
elkscmd/minix3/diff.c:1130:10: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
  eof2 = fscanf(ls2, "%s\n", file2);
         ^
elkscmd/minix3/diff.c:1138:11: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
   eof1 = fscanf(ls1, "%s\n", file1);
          ^
elkscmd/minix3/diff.c:1143:11: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
   eof2 = fscanf(ls2, "%s\n", file2);
          ^
elkscmd/minix3/diff.c:1167:10: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
  eof1 = fscanf(ls1, "%s\n", file1);
         ^
elkscmd/minix3/diff.c:1169:10: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
  eof2 = fscanf(ls2, "%s\n", file2);
         ^
elkscmd/minix3/diff.c:1176:10: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
  eof1 = fscanf(ls1, " %s\n", file1);
         ^
elkscmd/minix3/diff.c:1182:10: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
  eof2 = fscanf(ls2, " %s\n", file2);
         ^
elkscmd/minix3/diff.c:427:2: warning: Either the condition 'l==0' is redundant or there is possible null pointer dereference: l. [nullPointerRedundantCheck]
 l->l_text = (char *) xmalloc((size + 2) * sizeof(char));
 ^
elkscmd/minix3/diff.c:428:9: note: Assuming that condition 'l==0' is not redundant
 if ((l == 0) || (l->l_text == 0)) fatal_error("Out of memory", "");
        ^
elkscmd/minix3/diff.c:427:2: note: Null pointer dereference
 l->l_text = (char *) xmalloc((size + 2) * sizeof(char));
 ^
elkscmd/minix3/diff.c:297:9: style: The scope of the variable 'temp' can be reduced. [variableScope]
  FILE *temp;
        ^
elkscmd/minix3/diff.c:1117:7: style: The scope of the variable 'difference' can be reduced. [variableScope]
  int difference, eof1, eof2;
      ^
elkscmd/minix3/find.c:891:6: portability: Assigning an integer to a pointer is not portable. [AssignmentIntegerToAddress]
  *q = '\0';
     ^
elkscmd/minix3/find.c:227:17: error: Allocation with Malloc, strcpy doesn't release it. [leakNoVarFunctionCall]
  return strcpy(Malloc(strlen(s) + 1), s);
                ^
elkscmd/minix3/find.c:236:28: style: The scope of the variable 'last' can be reduced. [variableScope]
  char **pathlist, *path, *last;
                           ^
elkscmd/minix3/find.c:278:8: style: The scope of the variable 'dp' can be reduced. [variableScope]
  DIR *dp;
       ^
elkscmd/minix3/find.c:279:18: style: The scope of the variable 'de' can be reduced. [variableScope]
  struct dirent *de;
                 ^
elkscmd/minix3/find.c:508:14: style: The scope of the variable 'w' can be reduced. [variableScope]
  int m = 0, w, op;
             ^
elkscmd/minix3/find.c:508:17: style: The scope of the variable 'op' can be reduced. [variableScope]
  int m = 0, w, op;
                ^
elkscmd/minix3/find.c:583:21: style: The scope of the variable 'p' can be reduced. [variableScope]
  struct node *nd, *p, *nd2;
                    ^
elkscmd/minix3/find.c:619:20: style: The scope of the variable 'p' can be reduced. [variableScope]
  struct node *n, *p;
                   ^
elkscmd/minix3/find.c:586:10: style: Variable 't' is assigned a value that is never used. [unreadVariable]
  if ((t = lex(*++ipp)) == OP_OR) {
         ^
elkscmd/minix3/find.c:671:0: information: Skipping configuration 'S_IFLNK' since the value of 'S_IFLNK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  p->n_info.n_int.n_val = S_IFLNK;
^
elkscmd/minix3/head.c:19:9: style: The scope of the variable 'f' can be reduced. [variableScope]
  FILE *f;
        ^
elkscmd/minix3/head.c:62:7: style: The scope of the variable 'c' can be reduced. [variableScope]
  int c;
      ^
elkscmd/minix3/mail.c:616:31: style:inconclusive: Boolean expression 'ferror(savefp)!=0' is used in bitwise operation. Did you mean '||'? [bitwiseOnBoolean]
    if ((ferror(savefp) != 0) | (fclose(savefp) != 0)) {
                              ^
elkscmd/minix3/mail.c:627:9: style: The scope of the variable 'locktries' can be reduced. [variableScope]
    int locktries = 0;  /* tries when box is locked */
        ^
elkscmd/minix3/mail.c:200:0: information: Skipping configuration 'MAILER' since the value of 'MAILER' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        execv(MAILER, argvec);
^
elkscmd/minix3/mail.c:201:0: information: Skipping configuration 'MAILER' since the value of 'MAILER' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
        fprintf(stderr, "mail: couldn't exec %s\n", MAILER);
^
elkscmd/minix3/sed.c:507:20: warning: Either the condition 'nwfiles>=10' is redundant or the array 'fname[10]' is accessed at index 10, which is out of bounds. [arrayIndexOutOfBoundsCond]
 fp = gettext(fname[nwfiles] = fp); /* filename will be in pool */
                   ^
elkscmd/minix3/sed.c:506:14: note: Assuming that condition 'nwfiles>=10' is not redundant
 if (nwfiles >= WFILES) ABORT(TMWFI);
             ^
elkscmd/minix3/sed.c:507:20: note: Array index out of bounds
 fp = gettext(fname[nwfiles] = fp); /* filename will be in pool */
                   ^
elkscmd/minix3/sed.c:516:31: warning: Either the condition 'nwfiles>=10' is redundant or the array 'fname[10]' is accessed at index 10, which is out of bounds. [arrayIndexOutOfBoundsCond]
 if ((cmdp->fout = fopen(fname[nwfiles], "w")) == NULL) {
                              ^
elkscmd/minix3/sed.c:506:14: note: Assuming that condition 'nwfiles>=10' is not redundant
 if (nwfiles >= WFILES) ABORT(TMWFI);
             ^
elkscmd/minix3/sed.c:516:31: note: Array index out of bounds
 if ((cmdp->fout = fopen(fname[nwfiles], "w")) == NULL) {
                              ^
elkscmd/minix3/sed.c:752:14: style: The scope of the variable 'numl' can be reduced. [variableScope]
  static int numl = 0;  /* current ind in addr-number table */
             ^
elkscmd/minix3/sed.c:1049:27: style: The scope of the variable 'c' can be reduced. [variableScope]
  register char *p1, *p2, c;
                          ^
elkscmd/minix3/sed.c:561:16: style: Local variable 'c' shadows outer variable [shadowVariable]
  register int c;  /* current-character pointer */
               ^
elkscmd/minix3/sed.c:1537:12: note: Shadowed declaration
static int c;   /* Will be the next char to read, a kind of
           ^
elkscmd/minix3/sed.c:561:16: note: Shadow variable
  register int c;  /* current-character pointer */
               ^
elkscmd/minix3/sed.c:842:16: style: Local variable 'c' shadows outer variable [shadowVariable]
  register int c;
               ^
elkscmd/minix3/sed.c:1537:12: note: Shadowed declaration
static int c;   /* Will be the next char to read, a kind of
           ^
elkscmd/minix3/sed.c:842:16: note: Shadow variable
  register int c;
               ^
elkscmd/minix3/sed.c:1013:7: style: Local variable 'c' shadows outer variable [shadowVariable]
  int c;
      ^
elkscmd/minix3/sed.c:1537:12: note: Shadowed declaration
static int c;   /* Will be the next char to read, a kind of
           ^
elkscmd/minix3/sed.c:1013:7: note: Shadow variable
  int c;
      ^
elkscmd/minix3/sed.c:1049:27: style: Local variable 'c' shadows outer variable [shadowVariable]
  register char *p1, *p2, c;
                          ^
elkscmd/minix3/sed.c:1537:12: note: Shadowed declaration
static int c;   /* Will be the next char to read, a kind of
           ^
elkscmd/minix3/sed.c:1049:27: note: Shadow variable
  register char *p1, *p2, c;
                          ^
elkscmd/minix3/sed.c:1098:8: style: Local variable 'c' shadows outer variable [shadowVariable]
  char c;   /* scratch character holder */
       ^
elkscmd/minix3/sed.c:1537:12: note: Shadowed declaration
static int c;   /* Will be the next char to read, a kind of
           ^
elkscmd/minix3/sed.c:1098:8: note: Shadow variable
  char c;   /* scratch character holder */
       ^
elkscmd/minix3/sed.c:1246:7: style: Local variable 'c' shadows outer variable [shadowVariable]
  int c;
      ^
elkscmd/minix3/sed.c:1537:12: note: Shadowed declaration
static int c;   /* Will be the next char to read, a kind of
           ^
elkscmd/minix3/sed.c:1246:7: note: Shadow variable
  int c;
      ^
elkscmd/minix3/sed.c:985:9: style: Variable 'ipc' is assigned a value that is never used. [unreadVariable]
    ipc = cmds;
        ^
elkscmd/minix3/sort.c:301:7: style: The if condition is the same as the previous if condition [duplicateCondition]
  if (beg_fl) {   /* Check for end pos */
      ^
elkscmd/minix3/sort.c:297:7: note: First condition
  if (beg_fl) {
      ^
elkscmd/minix3/sort.c:301:7: note: Second condition
  if (beg_fl) {   /* Check for end pos */
      ^
elkscmd/minix3/sort.c:465:8: style: The scope of the variable 'save_ch' can be reduced. [variableScope]
  char save_ch;   /* Used in stdin readings */
       ^
elkscmd/minix3/sort.c:531:18: style: The scope of the variable 'ptr' can be reduced. [variableScope]
  register char *ptr;  /* Ptr to line */
                 ^
elkscmd/minix3/sort.c:699:9: style: The scope of the variable 'last' can be reduced. [variableScope]
  char *last;   /* Pointer to end location */
        ^
elkscmd/minix3/sort.c:891:7: style: The scope of the variable 'limit' can be reduced. [variableScope]
  int limit;
      ^
elkscmd/minix3/sort.c:1013:16: style: The scope of the variable 'i' can be reduced. [variableScope]
  register int i;
               ^
elkscmd/minix3/sort.c:1117:16: style: The scope of the variable 'ret' can be reduced. [variableScope]
  register int ret;  /* ret status of compare */
               ^
elkscmd/minix3/sort.c:757:0: warning: Function 'cmp' argument order different: declaration 'el1, el2, field, ' definition 'el1, el1, el2, field' [funcArgOrderDifferent]
FIELD *field;
^
elkscmd/minix3/sort.c:154:1: note: Function 'cmp' argument order different: declaration 'el1, el2, field, ' definition 'el1, el1, el2, field'
_PROTOTYPE(int cmp, (unsigned char *el1, unsigned char *el2, FIELD * field));
^
elkscmd/minix3/sort.c:757:0: note: Function 'cmp' argument order different: declaration 'el1, el2, field, ' definition 'el1, el1, el2, field'
FIELD *field;
^
elkscmd/minix3/sort.c:823:0: warning: Function 'digits' argument order different: declaration 'str1, str2, check_sign, ' definition 'str1, str1, str2, check_sign' [funcArgOrderDifferent]
BOOL check_sign;  /* True if sign must be checked */
^
elkscmd/minix3/sort.c:155:1: note: Function 'digits' argument order different: declaration 'str1, str2, check_sign, ' definition 'str1, str1, str2, check_sign'
_PROTOTYPE(int digits, (unsigned char *str1, unsigned char *str2, BOOL check_sign));
^
elkscmd/minix3/sort.c:823:0: note: Function 'digits' argument order different: declaration 'str1, str2, check_sign, ' definition 'str1, str1, str2, check_sign'
BOOL check_sign;  /* True if sign must be checked */
^
elkscmd/minix3/tail.c:97:7: style: The scope of the variable 'opt' can be reduced. [variableScope]
  int opt;
      ^
elkscmd/minix3/tail.c:234:9: style: The scope of the variable 'start' can be reduced. [variableScope]
  char *start;   /* pointer to first desired character in buf */
        ^
elkscmd/misc_utils/compress.c:722:5: style: Suspicious condition (assignment + comparison); Clarify expression with parentheses. [clarifyCondition]
 if ((fgnd_flag = (signal(SIGINT, SIG_IGN)) != SIG_IGN))
    ^
elkscmd/misc_utils/compress.c:837:20: style: Condition '*filelist!=NULL' is always false [knownConditionTrueFalse]
     if (*filelist != NULL) {
                   ^
elkscmd/misc_utils/compress.c:735:18: note: Assignment '*filelist=NULL', assigned value is 0
     *filelist = NULL;
                 ^
elkscmd/misc_utils/compress.c:837:20: note: Condition '*filelist!=NULL' is always false
     if (*filelist != NULL) {
                   ^
elkscmd/misc_utils/compress.c:472:7: style: union member 'bytes::word' is never used. [unusedStructMember]
 long word;
      ^
elkscmd/misc_utils/compress.c:475:13: style: struct member 'Anonymous0::b1' is never used. [unusedStructMember]
  char_type b1;
            ^
elkscmd/misc_utils/compress.c:476:13: style: struct member 'Anonymous0::b2' is never used. [unusedStructMember]
  char_type b2;
            ^
elkscmd/misc_utils/compress.c:477:13: style: struct member 'Anonymous0::b3' is never used. [unusedStructMember]
  char_type b3;
            ^
elkscmd/misc_utils/compress.c:478:13: style: struct member 'Anonymous0::b4' is never used. [unusedStructMember]
  char_type b4;
            ^
elkscmd/misc_utils/compress.c:608:27: error: Invalid memset() argument nr 3. The value is -484264 but the valid values are '0:'. [invalidFunctionArg]
  memset(htab8, -1, sizeof(htab8));
                          ^
elkscmd/misc_utils/ed.c:96:6: style: The scope of the variable 'len' can be reduced. [variableScope]
 int len;
     ^
elkscmd/misc_utils/ed.c:590:6: style: The scope of the variable 'len' can be reduced. [variableScope]
 int len;
     ^
elkscmd/misc_utils/fdtest.c:60:17: style: The scope of the variable 'start_dma_page' can be reduced. [variableScope]
 unsigned short start_dma_page, end_dma_page;
                ^
elkscmd/misc_utils/fdtest.c:60:33: style: The scope of the variable 'end_dma_page' can be reduced. [variableScope]
 unsigned short start_dma_page, end_dma_page;
                                ^
elkscmd/misc_utils/fdtest.c:61:16: style: The scope of the variable 'normalized_seg' can be reduced. [variableScope]
 unsigned long normalized_seg;
               ^
elkscmd/misc_utils/float.c:65:16: style: Expression is always true because 'else if' condition is opposite to previous condition at line 60. [multiCondition]
  } else if (x < 0.0) {
               ^
elkscmd/misc_utils/float.c:60:9: note: first condition
  if (x >= 0.0) {
        ^
elkscmd/misc_utils/float.c:65:16: note: else if condition is opposite to first condition
  } else if (x < 0.0) {
               ^
elkscmd/misc_utils/float.c:196:2: portability: %d in format string (no. 1) requires 'int' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]
 printf("float = %d\n", sizeof(float));
 ^
elkscmd/misc_utils/float.c:188:8: style: Local variable 'f' shadows outer variable [shadowVariable]
 FLOAT f = 3.00 * g;
       ^
elkscmd/misc_utils/float.c:11:16: note: Shadowed declaration
VOLATILE FLOAT f = 1;
               ^
elkscmd/misc_utils/float.c:188:8: note: Shadow variable
 FLOAT f = 3.00 * g;
       ^
elkscmd/misc_utils/hd.c:120:14: style: The scope of the variable 'ch' can be reduced. [variableScope]
      int j, ch;
             ^
elkscmd/misc_utils/kilo.c:459:19: error: Buffer is accessed out of bounds: rf[0].recentfilename [bufferAccessOutOfBounds]
    snprintf(rf[0].recentfilename,200,E.filename);
                  ^
elkscmd/misc_utils/kilo.c:1365:19: error: Buffer is accessed out of bounds: rf[0].recentfilename [bufferAccessOutOfBounds]
    snprintf(rf[0].recentfilename,200,E.filename);
                  ^
elkscmd/misc_utils/kilo.c:492:9: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
        fscanf(fptr, "%s %d %d %d %d", rf[i].recentfilename, &rf[i].cx, &rf[i].cy, &rf[i].coloff, &rf[i].rowoff);
        ^
elkscmd/misc_utils/kilo.c:2140:9: error: Common realloc mistake: 'str' nulled but not freed upon failure [memleakOnRealloc]
        str = (char*)realloc(str,len+2+(sizeof(char)*row->size));
        ^
elkscmd/misc_utils/kilo.c:2175:13: error: Common realloc mistake: 'str' nulled but not freed upon failure [memleakOnRealloc]
            str = (char*)realloc(str,len+2+(sizeof(char)*row->size));
            ^
elkscmd/misc_utils/kilo.c:2198:13: error: Common realloc mistake: 'str' nulled but not freed upon failure [memleakOnRealloc]
            str = (char*)realloc(str,len+2+E.cx);
            ^
elkscmd/misc_utils/kilo.c:1749:42: warning: Either the condition 'match' is redundant or there is pointer arithmetic with NULL pointer. [nullPointerArithmeticRedundantCheck]
                additional = strstr(match+1,query);
                                         ^
elkscmd/misc_utils/kilo.c:1750:21: note: Assuming that condition 'match' is not redundant
                if (match) {
                    ^
elkscmd/misc_utils/kilo.c:1749:42: note: Null pointer addition
                additional = strstr(match+1,query);
                                         ^
elkscmd/misc_utils/kilo.c:667:9: style: The scope of the variable 'c' can be reduced. [variableScope]
    int c, len=0;
        ^
elkscmd/misc_utils/kilo.c:718:9: style: The scope of the variable 'c' can be reduced. [variableScope]
    int c;
        ^
elkscmd/misc_utils/kilo.c:1375:11: style: The scope of the variable 'row' can be reduced. [variableScope]
    erow *row;
          ^
elkscmd/misc_utils/kilo.c:1544:13: style: The scope of the variable 'current_color' can be reduced. [variableScope]
        int current_color = -1;
            ^
elkscmd/misc_utils/kilo.c:1615:9: style: The scope of the variable 'j' can be reduced. [variableScope]
    int j;
        ^
elkscmd/misc_utils/kilo.c:1732:17: style: The scope of the variable 'i' can be reduced. [variableScope]
            int i, current = last_match;
                ^
elkscmd/misc_utils/kilo.c:2156:9: style: The scope of the variable 'c' can be reduced. [variableScope]
    int c,i;
        ^
elkscmd/misc_utils/kilo.c:2218:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
elkscmd/misc_utils/kilo.c:1494:13: style: Local variable 'padding' shadows outer variable [shadowVariable]
        int padding = (E.screencols-welcomelen)/3;
            ^
elkscmd/misc_utils/kilo.c:1457:21: note: Shadowed declaration
                int padding = (E.screencols-welcomelen)/2;
                    ^
elkscmd/misc_utils/kilo.c:1494:13: note: Shadow variable
        int padding = (E.screencols-welcomelen)/3;
            ^
elkscmd/misc_utils/kilo.c:1502:25: style: Local variable 'padding' shadows outer variable [shadowVariable]
                    int padding = (E.screencols-welcomelen)/2;
                        ^
elkscmd/misc_utils/kilo.c:1457:21: note: Shadowed declaration
                int padding = (E.screencols-welcomelen)/2;
                    ^
elkscmd/misc_utils/kilo.c:1502:25: note: Shadow variable
                    int padding = (E.screencols-welcomelen)/2;
                        ^
elkscmd/misc_utils/kilo.c:1517:25: style: Local variable 'padding' shadows outer variable [shadowVariable]
                    int padding = (E.screencols-welcomelen)/2;
                        ^
elkscmd/misc_utils/kilo.c:1457:21: note: Shadowed declaration
                int padding = (E.screencols-welcomelen)/2;
                    ^
elkscmd/misc_utils/kilo.c:1517:25: note: Shadow variable
                    int padding = (E.screencols-welcomelen)/2;
                        ^
elkscmd/misc_utils/kilo.c:1569:30: style: Local variable 'buf' shadows outer variable [shadowVariable]
                        char buf[16];
                             ^
elkscmd/misc_utils/kilo.c:1442:10: note: Shadowed declaration
    char buf[32];
         ^
elkscmd/misc_utils/kilo.c:1569:30: note: Shadow variable
                        char buf[16];
                             ^
elkscmd/misc_utils/kilo.c:2173:19: style: Local variable 'row' shadows outer variable [shadowVariable]
            erow *row = (filerow >= E.numrows) ? NULL : &E.row[E.rowoff+E.cy];
                  ^
elkscmd/misc_utils/kilo.c:2158:11: note: Shadowed declaration
    erow *row = (filerow >= E.numrows) ? NULL : &E.row[E.rowoff+E.cy];
          ^
elkscmd/misc_utils/kilo.c:2173:19: note: Shadow variable
            erow *row = (filerow >= E.numrows) ? NULL : &E.row[E.rowoff+E.cy];
                  ^
elkscmd/misc_utils/kilo.c:2192:15: style: Local variable 'row' shadows outer variable [shadowVariable]
        erow *row = (filerow >= E.numrows) ? NULL : &E.row[E.rowoff+E.cy];
              ^
elkscmd/misc_utils/kilo.c:2158:11: note: Shadowed declaration
    erow *row = (filerow >= E.numrows) ? NULL : &E.row[E.rowoff+E.cy];
          ^
elkscmd/misc_utils/kilo.c:2192:15: note: Shadow variable
        erow *row = (filerow >= E.numrows) ? NULL : &E.row[E.rowoff+E.cy];
              ^
elkscmd/misc_utils/kilo.c:2224:10: style: Local variable 'i' shadows outer variable [shadowVariable]
 for(int i=0; i<size; i++) {
         ^
elkscmd/misc_utils/kilo.c:2218:9: note: Shadowed declaration
    int i;
        ^
elkscmd/misc_utils/kilo.c:2224:10: note: Shadow variable
 for(int i=0; i<size; i++) {
         ^
elkscmd/misc_utils/kilo.c:2196:57: error: Undefined behavior: Variable 'str' is used as parameter and destination in snprintf(). [sprintfOverlappingData]
            snprintf(str,strlen(str)-strlen(buf)+1,"%s",str);
                                                        ^
elkscmd/misc_utils/kilo.c:2203:38: error: Undefined behavior: Variable 'str' is used as parameter and destination in snprintf(). [sprintfOverlappingData]
            snprintf(str,E.cx-1,"%s",str);
                                     ^
elkscmd/misc_utils/mined1.c:465:8: style: The scope of the variable 'file' can be reduced. [variableScope]
  char file[LINE_LEN];  /* Buffer for new file name */
       ^
elkscmd/misc_utils/mined1.c:685:7: style: The scope of the variable 'shift' can be reduced. [variableScope]
  int shift = 0;   /* How many shifts to make */
      ^
elkscmd/misc_utils/mined1.c:1269:16: style: The scope of the variable 'len' can be reduced. [variableScope]
  register int len;
               ^
elkscmd/misc_utils/mined1.c:1270:8: style: The scope of the variable 'nr_of_chars' can be reduced. [variableScope]
  long nr_of_chars = 0L;
       ^
elkscmd/misc_utils/mined1.c:1695:17: style: The scope of the variable 'digit' can be reduced. [variableScope]
  register long digit;   /* Next digit of number */
                ^
elkscmd/misc_utils/mined1.c:1815:9: style: The scope of the variable 'ptr' can be reduced. [variableScope]
  char *ptr;
        ^
elkscmd/misc_utils/mined1.c:1110:15: style: Local variable 'yank_file' shadows outer variable [shadowVariable]
  extern char yank_file[];
              ^
elkscmd/misc_utils/mined.h:161:13: note: Shadowed declaration
extern char yank_file[];  /* Temp file for buffer */
            ^
elkscmd/misc_utils/mined1.c:1110:15: note: Shadow variable
  extern char yank_file[];
              ^
elkscmd/misc_utils/mined1.c:685:13: style: Variable 'shift' is assigned a value that is never used. [unreadVariable]
  int shift = 0;   /* How many shifts to make */
            ^
elkscmd/misc_utils/mined1.c:1306:10: style: Variable 'line' is assigned a value that is never used. [unreadVariable]
    line = line_insert(line, "\n", 1);
         ^
elkscmd/misc_utils/mined2.c:975:14: style: The scope of the variable 'trials' can be reduced. [variableScope]
  static int trials = 0;  /* Keep track of trails */
             ^
elkscmd/misc_utils/mined2.c:976:18: style: The scope of the variable 'y_ptr' can be reduced. [variableScope]
  register char *y_ptr, *n_ptr;
                 ^
elkscmd/misc_utils/mined2.c:976:26: style: The scope of the variable 'n_ptr' can be reduced. [variableScope]
  register char *y_ptr, *n_ptr;
                         ^
elkscmd/misc_utils/mined2.c:1342:8: style: The scope of the variable 'c' can be reduced. [variableScope]
  char c;
       ^
elkscmd/misc_utils/mined2.c:1477:8: style: The scope of the variable 'old_char' can be reduced. [variableScope]
  char old_char;    /* For saving chars */
       ^
elkscmd/misc_utils/mined2.c:1565:16: style: The scope of the variable 'opcode' can be reduced. [variableScope]
  register int opcode;  /* Holds opcode of next expr. atom */
               ^
elkscmd/misc_utils/mined2.c:1566:8: style: The scope of the variable 'c' can be reduced. [variableScope]
  char c;    /* Char that must be matched */
       ^
elkscmd/misc_utils/mined2.c:1568:7: style: The scope of the variable 'star_fl' can be reduced. [variableScope]
  int star_fl;   /* A star has been born */
      ^
elkscmd/misc_utils/miniterm.c:632:44: warning: Either the condition 'cr_found' is redundant or there is overflow in pointer subtraction. [nullPointerArithmeticRedundantCheck]
      res = write(1, buf + wrote, cr_found - (buf + wrote) + 1U);
                                           ^
elkscmd/misc_utils/miniterm.c:633:11: note: Assuming that condition 'cr_found' is not redundant
      if (cr_found && (res > 0)) {
          ^
elkscmd/misc_utils/miniterm.c:632:44: note: Null pointer subtraction
      res = write(1, buf + wrote, cr_found - (buf + wrote) + 1U);
                                           ^
elkscmd/misc_utils/miniterm.c:632:11: style: Variable 'res' is reassigned a value before the old one has been used. [redundantAssignment]
      res = write(1, buf + wrote, cr_found - (buf + wrote) + 1U);
          ^
elkscmd/misc_utils/miniterm.c:630:10: note: res is assigned
     res = -1;
         ^
elkscmd/misc_utils/miniterm.c:632:11: note: res is overwritten
      res = write(1, buf + wrote, cr_found - (buf + wrote) + 1U);
          ^
elkscmd/misc_utils/miniterm.c:480:7: style: The scope of the variable 'len' can be reduced. [variableScope]
  int len;
      ^
elkscmd/misc_utils/miniterm.c:621:13: style: The scope of the variable 'cr_found' can be reduced. [variableScope]
   char c, *cr_found;
            ^
elkscmd/misc_utils/miniterm.c:622:13: style: The scope of the variable 'wrote' can be reduced. [variableScope]
   int len, wrote, res;
            ^
elkscmd/misc_utils/miniterm.c:622:20: style: The scope of the variable 'res' can be reduced. [variableScope]
   int len, wrote, res;
                   ^
elkscmd/misc_utils/miniterm.c:622:20: style: Local variable 'res' shadows outer variable [shadowVariable]
   int len, wrote, res;
                   ^
elkscmd/misc_utils/miniterm.c:493:7: note: Shadowed declaration
  int res, max = 0;
      ^
elkscmd/misc_utils/miniterm.c:622:20: note: Shadow variable
   int len, wrote, res;
                   ^
elkscmd/misc_utils/miniterm.c:198:0: information: Skipping configuration 'B1000000' since the value of 'B1000000' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  case 1000000: return B1000000;
^
elkscmd/misc_utils/miniterm.c:183:0: information: Skipping configuration 'B230400' since the value of 'B230400' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  case 230400: return B230400;
^
elkscmd/misc_utils/miniterm.c:186:0: information: Skipping configuration 'B460800' since the value of 'B460800' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  case 460800: return B460800;
^
elkscmd/misc_utils/miniterm.c:189:0: information: Skipping configuration 'B500000' since the value of 'B500000' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  case 500000: return B500000;
^
elkscmd/misc_utils/miniterm.c:192:0: information: Skipping configuration 'B576000' since the value of 'B576000' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  case 576000: return B576000;
^
elkscmd/misc_utils/miniterm.c:195:0: information: Skipping configuration 'B921600' since the value of 'B921600' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  case 921600: return B921600;
^
elkscmd/misc_utils/miniterm.c:560:11: style: Local variable 'flags' shadows outer variable [shadowVariable]
      int flags;
          ^
elkscmd/misc_utils/miniterm.c:427:6: note: Shadowed declaration
 int flags;
     ^
elkscmd/misc_utils/miniterm.c:560:11: note: Shadow variable
      int flags;
          ^
elkscmd/misc_utils/miniterm.c:565:11: style: Local variable 'flags' shadows outer variable [shadowVariable]
      int flags;
          ^
elkscmd/misc_utils/miniterm.c:427:6: note: Shadowed declaration
 int flags;
     ^
elkscmd/misc_utils/miniterm.c:565:11: note: Shadow variable
      int flags;
          ^
elkscmd/misc_utils/miniterm.c:570:11: style: Local variable 'flags' shadows outer variable [shadowVariable]
      int flags;
          ^
elkscmd/misc_utils/miniterm.c:427:6: note: Shadowed declaration
 int flags;
     ^
elkscmd/misc_utils/miniterm.c:570:11: note: Shadow variable
      int flags;
          ^
elkscmd/misc_utils/miniterm.c:575:11: style: Local variable 'flags' shadows outer variable [shadowVariable]
      int flags;
          ^
elkscmd/misc_utils/miniterm.c:427:6: note: Shadowed declaration
 int flags;
     ^
elkscmd/misc_utils/miniterm.c:575:11: note: Shadow variable
      int flags;
          ^
elkscmd/misc_utils/od.c:591:6: style: The scope of the variable 'n' can be reduced. [variableScope]
 int n;
     ^
elkscmd/misc_utils/od.c:890:28: style:inconclusive: Function 'bb_dump_dump' argument 1 names different: declaration 'dumper' definition 'pub_dumper'. [funcArgNamesDifferent]
int bb_dump_dump(dumper_t *pub_dumper, char **argv)
                           ^
elkscmd/misc_utils/od.c:104:28: note: Function 'bb_dump_dump' argument 1 names different: declaration 'dumper' definition 'pub_dumper'.
int bb_dump_dump(dumper_t *dumper, char **argv);
                           ^
elkscmd/misc_utils/od.c:890:28: note: Function 'bb_dump_dump' argument 1 names different: declaration 'dumper' definition 'pub_dumper'.
int bb_dump_dump(dumper_t *pub_dumper, char **argv)
                           ^
elkscmd/misc_utils/od.c:918:28: style:inconclusive: Function 'bb_dump_add' argument 1 names different: declaration 'dumper' definition 'pub_dumper'. [funcArgNamesDifferent]
void bb_dump_add(dumper_t* pub_dumper, const char *fmt)
                           ^
elkscmd/misc_utils/od.c:103:28: note: Function 'bb_dump_add' argument 1 names different: declaration 'dumper' definition 'pub_dumper'.
void bb_dump_add(dumper_t *dumper, const char *fmt);
                           ^
elkscmd/misc_utils/od.c:918:28: note: Function 'bb_dump_add' argument 1 names different: declaration 'dumper' definition 'pub_dumper'.
void bb_dump_add(dumper_t* pub_dumper, const char *fmt)
                           ^
elkscmd/misc_utils/tar-sash.c:68:6: style: The scope of the variable 'cc' can be reduced. [variableScope]
 int cc;
     ^
elkscmd/misc_utils/tar-sash.c:107:8: style: The scope of the variable 'cpold' can be reduced. [variableScope]
 char *cpold;
       ^
elkscmd/misc_utils/tar-sash.c:108:7: style: Local variable 'buf' shadows outer variable [shadowVariable]
 char buf[NAMSIZ];
      ^
elkscmd/misc_utils/tar-sash.c:24:13: note: Shadowed declaration
static char buf[2048];
            ^
elkscmd/misc_utils/tar-sash.c:108:7: note: Shadow variable
 char buf[NAMSIZ];
      ^
elkscmd/misc_utils/tar-sash.c:169:14: style: Local variable 'buf' shadows outer variable [shadowVariable]
 static char buf[12];
             ^
elkscmd/misc_utils/tar-sash.c:24:13: note: Shadowed declaration
static char buf[2048];
            ^
elkscmd/misc_utils/tar-sash.c:169:14: note: Shadow variable
 static char buf[12];
             ^
elkscmd/misc_utils/tar-sash.c:239:14: style: Local variable 'buf' shadows outer variable [shadowVariable]
 static char buf[26];
             ^
elkscmd/misc_utils/tar-sash.c:24:13: note: Shadowed declaration
static char buf[2048];
            ^
elkscmd/misc_utils/tar-sash.c:239:14: note: Shadow variable
 static char buf[26];
             ^
elkscmd/misc_utils/tar-sash.c:185:0: information: Skipping configuration 'S_ISLNK' since the value of 'S_ISLNK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 if (S_ISLNK(mode))
^
elkscmd/misc_utils/tar-sash.c:189:0: information: Skipping configuration 'S_ISSOCK' since the value of 'S_ISSOCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 if (S_ISSOCK(mode))
^
elkscmd/misc_utils/tar.c:453:21: error: Buffer is accessed out of bounds: dblock.dbuf.size [bufferAccessOutOfBounds]
 sprintf(dblock.dbuf.size, "%11lo ", sp->st_size);
                    ^
elkscmd/misc_utils/tar.c:454:21: error: Buffer is accessed out of bounds: dblock.dbuf.mtime [bufferAccessOutOfBounds]
 sprintf(dblock.dbuf.mtime, "%11lo ", sp->st_mtime);
                    ^
elkscmd/misc_utils/tar.c:220:3: warning: %lo in format string (no. 2) requires 'unsigned long *' but the argument type is 'signed long *'. [invalidScanfArgType_int]
  fscanf(tfile, "%s %lo", name, &mtime);
  ^
elkscmd/misc_utils/tar.c:373:2: warning: %o in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed int *'. [invalidScanfArgType_int]
 sscanf(dblock.dbuf.mode, "%o", &i);
 ^
elkscmd/misc_utils/tar.c:375:2: warning: %o in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed int *'. [invalidScanfArgType_int]
 sscanf(dblock.dbuf.uid, "%o", &i);
 ^
elkscmd/misc_utils/tar.c:377:2: warning: %o in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed int *'. [invalidScanfArgType_int]
 sscanf(dblock.dbuf.gid, "%o", &i);
 ^
elkscmd/misc_utils/tar.c:381:2: warning: %o in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed int *'. [invalidScanfArgType_int]
 sscanf(dblock.dbuf.chksum, "%o", &chksum);
 ^
elkscmd/misc_utils/tar.c:220:3: warning: fscanf() without field width limits can crash with huge input data. [invalidscanf]
  fscanf(tfile, "%s %lo", name, &mtime);
  ^
elkscmd/misc_utils/tar.c:212:10: style: The scope of the variable 'seekp' can be reduced. [variableScope]
 daddr_t seekp;
         ^
elkscmd/misc_utils/tar.c:217:29: style: Checking if unsigned expression 'seekp=lookup(arg)' is less than zero. [unsignedLessThanZero]
  if ((seekp = lookup(arg)) < 0)
                            ^
elkscmd/misc_utils/tar.c:893:10: style: Local variable 'm' shadows outer variable [shadowVariable]
 daddr_t m, m1;
         ^
elkscmd/misc_utils/tar.c:143:6: note: Shadowed declaration
int *m[] = { m1, m2, m3, m4, m5, m6, m7, m8, m9};
     ^
elkscmd/misc_utils/tar.c:893:10: note: Shadow variable
 daddr_t m, m1;
         ^
elkscmd/misc_utils/tar.c:893:13: style: Local variable 'm1' shadows outer variable [shadowVariable]
 daddr_t m, m1;
            ^
elkscmd/misc_utils/tar.c:133:5: note: Shadowed declaration
int m1[] = { 1, ROWN, 'r', '-' };
    ^
elkscmd/misc_utils/tar.c:893:13: note: Shadow variable
 daddr_t m, m1;
            ^
elkscmd/misc_utils/time.c:25:2: warning: %lu in format string (no. 2) requires 'unsigned long' but the argument type is 'signed long'. [invalidPrintfArgType_uint]
 fprintf(stderr, "%s\t%lum%lu.%03lus\n", s, mins, secs, us/1000);
 ^
elkscmd/misc_utils/time.c:25:2: warning: %lu in format string (no. 3) requires 'unsigned long' but the argument type is 'signed long'. [invalidPrintfArgType_uint]
 fprintf(stderr, "%s\t%lum%lu.%03lus\n", s, mins, secs, us/1000);
 ^
elkscmd/misc_utils/time.c:25:2: warning: %lu in format string (no. 4) requires 'unsigned long' but the argument type is 'signed long'. [invalidPrintfArgType_uint]
 fprintf(stderr, "%s\t%lum%lu.%03lus\n", s, mins, secs, us/1000);
 ^
elkscmd/misc_utils/uudecode.c:126:2: warning: %o in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed int *'. [invalidScanfArgType_int]
 sscanf(buf, "begin %o %s", &mode, dest);
 ^
elkscmd/misc_utils/uudecode.c:126:2: warning: sscanf() without field width limits can crash with huge input data. [invalidscanf]
 sscanf(buf, "begin %o %s", &mode, dest);
 ^
elkscmd/misc_utils/uudecode.c:52:8: style: The scope of the variable 'bp' can be reduced. [variableScope]
 char *bp;
       ^
elkscmd/misc_utils/uudecode.c:53:6: style: The scope of the variable 'n' can be reduced. [variableScope]
 int n;
     ^
elkscmd/misc_utils/uudecode.c:82:6: style: The scope of the variable 'c' can be reduced. [variableScope]
 int c, i;
     ^
elkscmd/misc_utils/uudecode.c:108:7: style: Variable 'argv' is assigned a value that is never used. [unreadVariable]
  argv++; argc--;
      ^
elkscmd/misc_utils/uuencode.c:39:6: style: The scope of the variable 'c' can be reduced. [variableScope]
 int c, i;
     ^
elkscmd/misc_utils/uuencode.c:60:9: style: The scope of the variable 'n' can be reduced. [variableScope]
 int i, n;
        ^
elkscmd/mtools/init.c:30:7: style: Unused variable: code [unusedVariable]
  int code, buflen, intr();
      ^
elkscmd/mtools/init.c:213:17: style: Unused variable: buf [unusedVariable]
  unsigned char buf[MSECSIZ];
                ^
elkscmd/mtools/isdir.c:17:20: style: The scope of the variable 'dir' can be reduced. [variableScope]
 struct directory *dir, *search();
                   ^
elkscmd/mtools/mdel.c:88:7: warning: Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead. [getsCalled]
      gets(ans);
      ^
elkscmd/mtools/mdel.c:30:8: style: The scope of the variable 'filename' can be reduced. [variableScope]
 char *filename, *newfile, text[4], tname[9], *getname(), *unixname();
       ^
elkscmd/mtools/mdel.c:31:32: style: The scope of the variable 'pathname' can be reduced. [variableScope]
 char *strncpy(), *getpath(), *pathname, ans[10];
                               ^
elkscmd/mtools/mdir.c:174:5: warning: %d in format string (no. 3) requires 'int' but the argument type is 'signed long'. [invalidPrintfArgType_sint]
    printf("%8s %3s %8d   %s  %s\n", name, ext, size, date, time);
    ^
elkscmd/mtools/mdir.c:187:3: warning: %ld in format string (no. 2) requires 'long' but the argument type is 'signed int'. [invalidPrintfArgType_sint]
  printf("     %3d File(s)     %6ld bytes free\n", files, blocks);
  ^
elkscmd/mtools/mkentry.c:68:9: style: The scope of the variable 'next' can be reduced. [variableScope]
 int i, next, last, num, sector, buflen;
        ^
elkscmd/mtools/mrd.c:106:12: style: The scope of the variable 'buflen' can be reduced. [variableScope]
 int next, buflen, sector;
           ^
elkscmd/mtools/mrd.c:106:20: style: The scope of the variable 'sector' can be reduced. [variableScope]
 int next, buflen, sector;
                   ^
elkscmd/mtools/mread.c:209:5: warning: Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead. [getsCalled]
    gets(ans);
    ^
elkscmd/mtools/mread.c:47:8: style: The scope of the variable 'filename' can be reduced. [variableScope]
 char *filename, *newfile, text[4], tname[9], *getname(), *unixname();
       ^
elkscmd/mtools/mread.c:48:20: style: The scope of the variable 'pathname' can be reduced. [variableScope]
 char *strncpy(), *pathname, *getpath(), *target, tmp[MAX_PATH];
                   ^
elkscmd/mtools/mread.c:274:15: style: The scope of the variable 'i' can be reduced. [variableScope]
 register int i;
              ^
elkscmd/mtools/mread.c:99:22: error: Expression 'bufsiz+=clus_size-(--bufsiz)%clus_size' depends on order of evaluation of side effects [unknownEvaluationOrder]
 maxcontig = (bufsiz += clus_size - (--bufsiz) % clus_size)/clus_size;
                     ^
elkscmd/mtools/mren.c:71:4: warning: Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead. [getsCalled]
   gets(ans);
   ^
elkscmd/mtools/mren.c:32:13: style: The scope of the variable 'ans' can be reduced. [variableScope]
 char *new, ans[10], *temp, *strcpy();
            ^
elkscmd/mtools/mtype.c:37:8: style: The scope of the variable 'filename' can be reduced. [variableScope]
 char *filename, *newfile, text[4], tname[9], *getname(), *unixname();
       ^
elkscmd/mtools/mtype.c:38:20: style: The scope of the variable 'pathname' can be reduced. [variableScope]
 char *strncpy(), *pathname, *getpath();
                   ^
elkscmd/mtools/mwrite.c:199:7: warning: Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead. [getsCalled]
      gets(ans);
      ^
elkscmd/mtools/mwrite.c:47:16: style: The scope of the variable 'ismatch' can be reduced. [variableScope]
 int i, entry, ismatch, nogo, slot, start, dot, single;
               ^
elkscmd/mtools/mwrite.c:47:25: style: The scope of the variable 'nogo' can be reduced. [variableScope]
 int i, entry, ismatch, nogo, slot, start, dot, single;
                        ^
elkscmd/mtools/mwrite.c:47:31: style: The scope of the variable 'slot' can be reduced. [variableScope]
 int i, entry, ismatch, nogo, slot, start, dot, single;
                              ^
elkscmd/mtools/mwrite.c:47:44: style: The scope of the variable 'dot' can be reduced. [variableScope]
 int i, entry, ismatch, nogo, slot, start, dot, single;
                                           ^
elkscmd/mtools/mwrite.c:48:30: style: The scope of the variable 'first' can be reduced. [variableScope]
 int root, c, oops, verbose, first, mod_time;
                             ^
elkscmd/mtools/mwrite.c:51:7: style: The scope of the variable 'tmp' can be reduced. [variableScope]
 char tmp[MAX_PATH], *target, *strcat(), *strcpy();
      ^
elkscmd/mtools/mwrite.c:51:23: style: The scope of the variable 'target' can be reduced. [variableScope]
 char tmp[MAX_PATH], *target, *strcat(), *strcpy();
                      ^
elkscmd/mtools/mwrite.c:353:6: style: The scope of the variable 'c' can be reduced. [variableScope]
 int c, nclust, current, eof=0;
     ^
elkscmd/mtools/mwrite.c:125:22: error: Expression 'bufsiz+=clus_size-(--bufsiz)%clus_size' depends on order of evaluation of side effects [unknownEvaluationOrder]
 maxcontig = (bufsiz += clus_size - (--bufsiz) % clus_size) / clus_size;
                     ^
elkscmd/mtools/mwrite.c:305:40: style: Argument 'size=0' to function nextfat is always 0. It does not matter what value 'size' has. [knownArgument]
 fat = oldfat = firstfat = nextfat(size=0);
                                       ^
elkscmd/mtools/mwrite.c:271:37: style: Unused variable: chain [unusedVariable]
 int fat, firstfat, oldfat, curfat, chain;
                                    ^
elkscmd/mtools/putfat.c:96:6: style: The scope of the variable 'next' can be reduced. [variableScope]
 int next;
     ^
elkscmd/mtools/subdir.c:131:9: style: The scope of the variable 'next' can be reduced. [variableScope]
 int i, next;
        ^
elkscmd/nano-X/demos/demo.c:202:12: style: The scope of the variable 'outp' can be reduced. [variableScope]
 PIXELVAL *outp;
           ^
elkscmd/nano-X/demos/info.c:10:13: style: Unused variable: gi [unusedVariable]
 GR_GC_INFO gi;
            ^
elkscmd/nano-X/demos/landmine.c:1135:17: style: Variable 'st.s_board[newpos]' is reassigned a value before the old one has been used. [redundantAssignment]
  board[newpos] = cell;
                ^
elkscmd/nano-X/demos/landmine.c:1133:17: note: st.s_board[newpos] is assigned
  board[newpos] = (F_REMEMBER | F_MINE);
                ^
elkscmd/nano-X/demos/landmine.c:1135:17: note: st.s_board[newpos] is overwritten
  board[newpos] = cell;
                ^
elkscmd/nano-X/demos/landmine.c:977:7: style: The scope of the variable 'pos' can be reduced. [variableScope]
 POS  pos;
      ^
elkscmd/nano-X/demos/landmine.c:1105:7: style: The scope of the variable 'fixpos' can be reduced. [variableScope]
 POS  fixpos;  /* position to fix up */
      ^
elkscmd/nano-X/demos/landmine.c:1197:7: style: The scope of the variable 'cell' can be reduced. [variableScope]
 CELL cell;
      ^
elkscmd/nano-X/demos/nclock.c:129:14: error: Array 'trig[91]' accessed at index -1, which is out of bounds. [negativeIndex]
  return trig[angle];
             ^
elkscmd/nano-X/demos/nclock.c:190:37: note: Assignment 'ls=-1', assigned value is -1
 static int lh = -1, lm = -1, ls = -1;
                                    ^
elkscmd/nano-X/demos/nclock.c:193:42: note: Calling function 'bsin', 1st argument 'ls' value is -1
  midx + (((midx - 8 - midx / 10) * bsin(ls)) >> 8),
                                         ^
elkscmd/nano-X/demos/nclock.c:129:14: note: Negative array index
  return trig[angle];
             ^
elkscmd/nano-X/demos/ntetris.c:417:17: error: Array 'state->blocks[2][28][12]' accessed at index state->blocks[0][*][12], which is out of bounds. [arrayIndexOutOfBounds]
   state->blocks[0][y + 1][x] = state->blocks[0][y][x];
                ^
elkscmd/nano-X/demos/ntetris.c:424:12: style: The scope of the variable 'nr' can be reduced. [variableScope]
 int x, y, nr;
           ^
elkscmd/nano-X/demos/world.c:415:7: style: The scope of the variable 'curlong' can be reduced. [variableScope]
 long curlong;
      ^
elkscmd/nano-X/demos/world.c:416:7: style: The scope of the variable 'curlat' can be reduced. [variableScope]
 long curlat;
      ^
elkscmd/nano-X/demos/world.c:417:8: style: The scope of the variable 'ptrlat' can be reduced. [variableScope]
 FLOAT ptrlat;
       ^
elkscmd/nano-X/demos/world.c:418:8: style: The scope of the variable 'ptrlong' can be reduced. [variableScope]
 FLOAT ptrlong;
       ^
elkscmd/nano-X/drivers/elkplan4.c:59:28: error: No pair for character ('). Can't process file. File is either invalid or unicode, which is currently not supported. [syntaxError]
 dec [bp+8]  ; dec x2 - don't draw final point
                           ^
elkscmd/nano-X/drivers/elksutil.c:67:49: error: No pair for character ('). Can't process file. File is either invalid or unicode, which is currently not supported. [syntaxError]
 or [bx],al  ! rmw byte at ds:bx, al value doesn't matter
                                                ^
elkscmd/nano-X/drivers/fblin1.c:35:12: style: Unsigned expression 'c' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (c >= 0 && c < psd->ncolors);
           ^
elkscmd/nano-X/drivers/fblin1.c:70:12: style: Unsigned expression 'c' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (c >= 0 && c < psd->ncolors);
           ^
elkscmd/nano-X/drivers/fblin1.c:102:12: style: Unsigned expression 'c' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (c >= 0 && c < psd->ncolors);
           ^
elkscmd/nano-X/drivers/fblin1.c:144:21: portability: 'dstpsd->addr' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
 dst = dstpsd->addr + dstx/8 + dsty * dlinelen;
                    ^
elkscmd/nano-X/drivers/fblin1.c:144:30: portability: 'dstpsd->addr+dstx/8' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
 dst = dstpsd->addr + dstx/8 + dsty * dlinelen;
                             ^
elkscmd/nano-X/drivers/fblin1.c:145:21: portability: 'srcpsd->addr' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
 src = srcpsd->addr + srcx/8 + srcy * slinelen;
                    ^
elkscmd/nano-X/drivers/fblin1.c:145:30: portability: 'srcpsd->addr+srcx/8' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
 src = srcpsd->addr + srcx/8 + srcy * slinelen;
                             ^
elkscmd/nano-X/drivers/fblin16.c:34:12: style: Unsigned expression 'c' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (c >= 0 && c < psd->ncolors);
           ^
elkscmd/nano-X/drivers/fblin16.c:68:12: style: Unsigned expression 'c' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (c >= 0 && c < psd->ncolors);
           ^
elkscmd/nano-X/drivers/fblin16.c:94:12: style: Unsigned expression 'c' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (c >= 0 && c < psd->ncolors);
           ^
elkscmd/nano-X/drivers/fblin16.c:136:21: portability: 'dstpsd->addr' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
 dst = dstpsd->addr + dstx + dsty * dlinelen;
                    ^
elkscmd/nano-X/drivers/fblin16.c:136:28: portability: 'dstpsd->addr+dstx' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
 dst = dstpsd->addr + dstx + dsty * dlinelen;
                           ^
elkscmd/nano-X/drivers/fblin16.c:137:21: portability: 'srcpsd->addr' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
 src = srcpsd->addr + srcx + srcy * slinelen;
                    ^
elkscmd/nano-X/drivers/fblin16.c:137:28: portability: 'srcpsd->addr+srcx' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
 src = srcpsd->addr + srcx + srcy * slinelen;
                           ^
elkscmd/nano-X/drivers/fblin2.c:36:12: style: Unsigned expression 'c' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (c >= 0 && c < psd->ncolors);
           ^
elkscmd/nano-X/drivers/fblin2.c:71:12: style: Unsigned expression 'c' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (c >= 0 && c < psd->ncolors);
           ^
elkscmd/nano-X/drivers/fblin2.c:103:12: style: Unsigned expression 'c' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (c >= 0 && c < psd->ncolors);
           ^
elkscmd/nano-X/drivers/fblin2.c:145:21: portability: 'dstpsd->addr' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
 dst = dstpsd->addr + dstx/4 + dsty * dlinelen;
                    ^
elkscmd/nano-X/drivers/fblin2.c:145:30: portability: 'dstpsd->addr+dstx/4' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
 dst = dstpsd->addr + dstx/4 + dsty * dlinelen;
                             ^
elkscmd/nano-X/drivers/fblin2.c:146:21: portability: 'srcpsd->addr' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
 src = srcpsd->addr + srcx/4 + srcy * slinelen;
                    ^
elkscmd/nano-X/drivers/fblin2.c:146:30: portability: 'srcpsd->addr+srcx/4' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
 src = srcpsd->addr + srcx/4 + srcy * slinelen;
                             ^
elkscmd/nano-X/drivers/fblin32.c:33:12: style: Unsigned expression 'c' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (c >= 0 && c < psd->ncolors);
           ^
elkscmd/nano-X/drivers/fblin32.c:67:12: style: Unsigned expression 'c' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (c >= 0 && c < psd->ncolors);
           ^
elkscmd/nano-X/drivers/fblin32.c:93:12: style: Unsigned expression 'c' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (c >= 0 && c < psd->ncolors);
           ^
elkscmd/nano-X/drivers/fblin32.c:135:21: portability: 'dstpsd->addr' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
 dst = dstpsd->addr + dstx + dsty * dlinelen;
                    ^
elkscmd/nano-X/drivers/fblin32.c:135:28: portability: 'dstpsd->addr+dstx' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
 dst = dstpsd->addr + dstx + dsty * dlinelen;
                           ^
elkscmd/nano-X/drivers/fblin32.c:136:21: portability: 'srcpsd->addr' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
 src = srcpsd->addr + srcx + srcy * slinelen;
                    ^
elkscmd/nano-X/drivers/fblin32.c:136:28: portability: 'srcpsd->addr+srcx' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
 src = srcpsd->addr + srcx + srcy * slinelen;
                           ^
elkscmd/nano-X/drivers/fblin4.c:35:12: style: Unsigned expression 'c' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (c >= 0 && c < psd->ncolors);
           ^
elkscmd/nano-X/drivers/fblin4.c:70:12: style: Unsigned expression 'c' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (c >= 0 && c < psd->ncolors);
           ^
elkscmd/nano-X/drivers/fblin4.c:102:12: style: Unsigned expression 'c' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (c >= 0 && c < psd->ncolors);
           ^
elkscmd/nano-X/drivers/fblin4.c:144:21: portability: 'dstpsd->addr' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
 dst = dstpsd->addr + dstx/2 + dsty * dlinelen;
                    ^
elkscmd/nano-X/drivers/fblin4.c:144:30: portability: 'dstpsd->addr+dstx/2' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
 dst = dstpsd->addr + dstx/2 + dsty * dlinelen;
                             ^
elkscmd/nano-X/drivers/fblin4.c:145:21: portability: 'srcpsd->addr' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
 src = srcpsd->addr + srcx/2 + srcy * slinelen;
                    ^
elkscmd/nano-X/drivers/fblin4.c:145:30: portability: 'srcpsd->addr+srcx/2' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
 src = srcpsd->addr + srcx/2 + srcy * slinelen;
                             ^
elkscmd/nano-X/drivers/fblin8.c:32:12: style: Unsigned expression 'c' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (c >= 0 && c < psd->ncolors);
           ^
elkscmd/nano-X/drivers/fblin8.c:66:12: style: Unsigned expression 'c' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (c >= 0 && c < psd->ncolors);
           ^
elkscmd/nano-X/drivers/fblin8.c:90:12: style: Unsigned expression 'c' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (c >= 0 && c < psd->ncolors);
           ^
elkscmd/nano-X/drivers/fblin8.c:131:21: portability: 'dstpsd->addr' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
 dst = dstpsd->addr + dstx + dsty * dlinelen;
                    ^
elkscmd/nano-X/drivers/fblin8.c:131:28: portability: 'dstpsd->addr+dstx' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
 dst = dstpsd->addr + dstx + dsty * dlinelen;
                           ^
elkscmd/nano-X/drivers/fblin8.c:132:21: portability: 'srcpsd->addr' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
 src = srcpsd->addr + srcx + srcy * slinelen;
                    ^
elkscmd/nano-X/drivers/fblin8.c:132:28: portability: 'srcpsd->addr+srcx' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
 src = srcpsd->addr + srcx + srcy * slinelen;
                           ^
elkscmd/nano-X/drivers/genfont.c:81:6: style: The scope of the variable 'c' can be reduced. [variableScope]
 int c;
     ^
elkscmd/nano-X/drivers/genfont.c:188:6: error: Uninitialized variable: bitvalue [uninitvar]
 if (IMAGE_TESTBIT(bitvalue))
     ^
elkscmd/nano-X/drivers/genfont.c:184:15: note: Assuming condition is false
 if (bitcount <= 0) {
              ^
elkscmd/nano-X/drivers/genfont.c:188:6: note: Uninitialized variable: bitvalue
 if (IMAGE_TESTBIT(bitvalue))
     ^
elkscmd/nano-X/drivers/mempl4.c:39:12: style: Unsigned expression 'c' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (c >= 0 && c < psd->ncolors);
           ^
elkscmd/nano-X/drivers/mempl4.c:72:12: style: Unsigned expression 'c' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (c >= 0 && c < psd->ncolors);
           ^
elkscmd/nano-X/drivers/mempl4.c:102:12: style: Unsigned expression 'c' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (c >= 0 && c < psd->ncolors);
           ^
elkscmd/nano-X/drivers/mou_null.c:82:51: style:inconclusive: Function 'NUL_Read' argument 4 names different: declaration 'bp' definition 'bptr'. [funcArgNamesDifferent]
NUL_Read(COORD *dx, COORD *dy, COORD *dz, BUTTON *bptr)
                                                  ^
elkscmd/nano-X/drivers/mou_null.c:16:64: note: Function 'NUL_Read' argument 4 names different: declaration 'bp' definition 'bptr'.
static int   NUL_Read(COORD *dx, COORD *dy, COORD *dz, BUTTON *bp);
                                                               ^
elkscmd/nano-X/drivers/mou_null.c:82:51: note: Function 'NUL_Read' argument 4 names different: declaration 'bp' definition 'bptr'.
NUL_Read(COORD *dx, COORD *dy, COORD *dz, BUTTON *bptr)
                                                  ^
elkscmd/nano-X/drivers/mou_ser-new.c:292:3: error: printf format string requires 1 parameter but only 0 are given. [wrongPrintfScanfArgNum]
  printf("nbytes=%d,");
  ^
elkscmd/nano-X/drivers/mou_ser-new.c:235:1: style: Label 'err' is not used. There is #if in function body so the label might be used in code that is removed by the preprocessor. [unusedLabelConfiguration]
err:
^
elkscmd/nano-X/drivers/mou_ser-new.c:486:9: warning: %d in format string (no. 3) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
        printf("%d,%d,%d\n", x, y, b);
        ^
elkscmd/nano-X/drivers/mou_ser.c:399:4: warning: %d in format string (no. 3) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
   printf("%d,%d,%d\n", x, y, b);
   ^
elkscmd/nano-X/drivers/mou_ser_qemu.c:277:5: style: Variable 'b' is assigned a value that is never used. [unreadVariable]
   b=0;
    ^
elkscmd/nano-X/drivers/mou_ser_qemu.c:259:6: style: Unused variable: i [unusedVariable]
 int i;
     ^
elkscmd/nano-X/drivers/mou_ser_qemu.c:348:4: warning: %d in format string (no. 3) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
   printf("%d,%d,%d\n", x, y, b);
   ^
elkscmd/nano-X/drivers/mou_tp.c:81:3: error: Resource leak: f [resourceLeak]
  return -1;
  ^
elkscmd/nano-X/drivers/mou_tp.c:89:2: error: Resource leak: f [resourceLeak]
 return 0;
 ^
elkscmd/nano-X/drivers/mou_tp.c:355:3: warning: %hd in format string (no. 1) requires 'short' but the argument type is 'signed int'. [invalidPrintfArgType_sint]
  printf("In: %hd, %hd, %hd  Filtered: %d %d %d  Out: %d, %d, %d\n",
  ^
elkscmd/nano-X/drivers/mou_tp.c:355:3: warning: %hd in format string (no. 2) requires 'short' but the argument type is 'signed int'. [invalidPrintfArgType_sint]
  printf("In: %hd, %hd, %hd  Filtered: %d %d %d  Out: %d, %d, %d\n",
  ^
elkscmd/nano-X/drivers/mou_tp.c:355:3: warning: %hd in format string (no. 3) requires 'short' but the argument type is 'signed int'. [invalidPrintfArgType_sint]
  printf("In: %hd, %hd, %hd  Filtered: %d %d %d  Out: %d, %d, %d\n",
  ^
elkscmd/nano-X/drivers/ramfont.c:132:6: error: Uninitialized variable: bitvalue [uninitvar]
 if (IMAGE_TESTBIT(bitvalue))
     ^
elkscmd/nano-X/drivers/ramfont.c:128:15: note: Assuming condition is false
 if (bitcount <= 0) {
              ^
elkscmd/nano-X/drivers/ramfont.c:132:6: note: Uninitialized variable: bitvalue
 if (IMAGE_TESTBIT(bitvalue))
     ^
elkscmd/nano-X/drivers/romfont.c:143:6: error: Uninitialized variable: bitvalue [uninitvar]
 if (IMAGE_TESTBIT(bitvalue))
     ^
elkscmd/nano-X/drivers/romfont.c:139:15: note: Assuming condition is false
 if (bitcount <= 0) {
              ^
elkscmd/nano-X/drivers/romfont.c:143:6: note: Uninitialized variable: bitvalue
 if (IMAGE_TESTBIT(bitvalue))
     ^
elkscmd/nano-X/drivers/scr_bios.c:169:13: style: Variable 'psi->xdpcm' is reassigned a value before the old one has been used. [redundantAssignment]
 psi->xdpcm = 33;  /* assumes screen width of 24 cm*/
            ^
elkscmd/nano-X/drivers/scr_bios.c:159:14: note: psi->xdpcm is assigned
  psi->xdpcm = 27; /* assumes screen width of 24 cm*/
             ^
elkscmd/nano-X/drivers/scr_bios.c:169:13: note: psi->xdpcm is overwritten
 psi->xdpcm = 33;  /* assumes screen width of 24 cm*/
            ^
elkscmd/nano-X/drivers/scr_bios.c:170:13: style: Variable 'psi->ydpcm' is reassigned a value before the old one has been used. [redundantAssignment]
 psi->ydpcm = 33;  /* assumes screen height of 18 cm*/
            ^
elkscmd/nano-X/drivers/scr_bios.c:160:14: note: psi->ydpcm is assigned
  psi->ydpcm = 27; /* assumes screen height of 18 cm*/
             ^
elkscmd/nano-X/drivers/scr_bios.c:170:13: note: psi->ydpcm is overwritten
 psi->ydpcm = 33;  /* assumes screen height of 18 cm*/
            ^
elkscmd/nano-X/drivers/scr_bios.c:169:13: style: Variable 'psi->xdpcm' is reassigned a value before the old one has been used. [redundantAssignment]
 psi->xdpcm = 33;  /* assumes screen width of 24 cm*/
            ^
elkscmd/nano-X/drivers/scr_bios.c:163:14: note: psi->xdpcm is assigned
  psi->xdpcm = 27; /* assumes screen width of 24 cm*/
             ^
elkscmd/nano-X/drivers/scr_bios.c:169:13: note: psi->xdpcm is overwritten
 psi->xdpcm = 33;  /* assumes screen width of 24 cm*/
            ^
elkscmd/nano-X/drivers/scr_bios.c:170:13: style: Variable 'psi->ydpcm' is reassigned a value before the old one has been used. [redundantAssignment]
 psi->ydpcm = 33;  /* assumes screen height of 18 cm*/
            ^
elkscmd/nano-X/drivers/scr_bios.c:164:14: note: psi->ydpcm is assigned
  psi->ydpcm = 19; /* assumes screen height of 18 cm*/
             ^
elkscmd/nano-X/drivers/scr_bios.c:170:13: note: psi->ydpcm is overwritten
 psi->ydpcm = 33;  /* assumes screen height of 18 cm*/
            ^
elkscmd/nano-X/drivers/scr_herc.c:187:31: style: Clarify calculation precedence for '&' and '?'. [clarifyCalculation]
 return GETBYTE_FP(dst) & mask? 1: 0;
                              ^
elkscmd/nano-X/drivers/scr_herc.c:231:18: error: Uninitialized variable: endbyte [uninitvar]
  ORBYTE_FP(dst, endbyte); /* output byte to mem */
                 ^
elkscmd/nano-X/drivers/scr_herc.c:232:24: error: Uninitialized variable: endbyte [uninitvar]
 else ANDBYTE_FP(dst, ~endbyte);
                       ^
elkscmd/nano-X/drivers/scr_svga.c:152:16: style: The scope of the variable 'getline' can be reduced. [variableScope]
 unsigned char getline[640];
               ^
elkscmd/nano-X/drivers/vgaplan4.c:121:10: style: The scope of the variable 'dst' can be reduced. [variableScope]
 FARADDR dst, last;
         ^
elkscmd/nano-X/drivers/vgaplan4.c:121:15: style: The scope of the variable 'last' can be reduced. [variableScope]
 FARADDR dst, last;
              ^
elkscmd/nano-X/drivers/vgaplan4.c:81:12: style: Unsigned expression 'x' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (x >= 0 && x < psd->xres);
           ^
elkscmd/nano-X/drivers/vgaplan4.c:82:12: style: Unsigned expression 'y' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (y >= 0 && y < psd->yres);
           ^
elkscmd/nano-X/drivers/vgaplan4.c:83:12: style: Unsigned expression 'c' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (c >= 0 && c < psd->ncolors);
           ^
elkscmd/nano-X/drivers/vgaplan4.c:102:12: style: Unsigned expression 'x' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (x >= 0 && x < psd->xres);
           ^
elkscmd/nano-X/drivers/vgaplan4.c:103:12: style: Unsigned expression 'y' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (y >= 0 && y < psd->yres);
           ^
elkscmd/nano-X/drivers/vgaplan4.c:124:13: style: Unsigned expression 'x1' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (x1 >= 0 && x1 < psd->xres);
            ^
elkscmd/nano-X/drivers/vgaplan4.c:125:13: style: Unsigned expression 'x2' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (x2 >= 0 && x2 < psd->xres);
            ^
elkscmd/nano-X/drivers/vgaplan4.c:127:12: style: Unsigned expression 'y' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (y >= 0 && y < psd->yres);
           ^
elkscmd/nano-X/drivers/vgaplan4.c:128:12: style: Unsigned expression 'c' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (c >= 0 && c < psd->ncolors);
           ^
elkscmd/nano-X/drivers/vgaplan4.c:175:12: style: Unsigned expression 'x' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (x >= 0 && x < psd->xres);
           ^
elkscmd/nano-X/drivers/vgaplan4.c:176:13: style: Unsigned expression 'y1' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (y1 >= 0 && y1 < psd->yres);
            ^
elkscmd/nano-X/drivers/vgaplan4.c:177:13: style: Unsigned expression 'y2' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (y2 >= 0 && y2 < psd->yres);
            ^
elkscmd/nano-X/drivers/vgaplan4.c:179:12: style: Unsigned expression 'c' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (c >= 0 && c < psd->ncolors);
           ^
elkscmd/nano-X/drivers/vgaplan4_pc98.c:92:11: style: The scope of the variable 'src' can be reduced. [variableScope]
 FARADDR  src;
          ^
elkscmd/nano-X/drivers/vgaplan4_pc98.c:62:12: style: Unsigned expression 'x' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (x >= 0 && x < psd->xres);
           ^
elkscmd/nano-X/drivers/vgaplan4_pc98.c:63:12: style: Unsigned expression 'y' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (y >= 0 && y < psd->yres);
           ^
elkscmd/nano-X/drivers/vgaplan4_pc98.c:64:12: style: Unsigned expression 'c' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (c >= 0 && c < psd->ncolors);
           ^
elkscmd/nano-X/drivers/vgaplan4_pc98.c:96:12: style: Unsigned expression 'x' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (x >= 0 && x < psd->xres);
           ^
elkscmd/nano-X/drivers/vgaplan4_pc98.c:97:12: style: Unsigned expression 'y' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (y >= 0 && y < psd->yres);
           ^
elkscmd/nano-X/drivers/vgaplan4_pc98.c:120:13: style: Unsigned expression 'x1' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (x1 >= 0 && x1 < psd->xres);
            ^
elkscmd/nano-X/drivers/vgaplan4_pc98.c:121:13: style: Unsigned expression 'x2' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (x2 >= 0 && x2 < psd->xres);
            ^
elkscmd/nano-X/drivers/vgaplan4_pc98.c:123:12: style: Unsigned expression 'y' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (y >= 0 && y < psd->yres);
           ^
elkscmd/nano-X/drivers/vgaplan4_pc98.c:124:12: style: Unsigned expression 'c' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (c >= 0 && c < psd->ncolors);
           ^
elkscmd/nano-X/drivers/vgaplan4_pc98.c:242:12: style: Unsigned expression 'x' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (x >= 0 && x < psd->xres);
           ^
elkscmd/nano-X/drivers/vgaplan4_pc98.c:243:13: style: Unsigned expression 'y1' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (y1 >= 0 && y1 < psd->yres);
            ^
elkscmd/nano-X/drivers/vgaplan4_pc98.c:244:13: style: Unsigned expression 'y2' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (y2 >= 0 && y2 < psd->yres);
            ^
elkscmd/nano-X/drivers/vgaplan4_pc98.c:246:12: style: Unsigned expression 'c' can't be negative so it is unnecessary to test it. [unsignedPositive]
 assert (c >= 0 && c < psd->ncolors);
           ^
elkscmd/nano-X/engine/devdraw.c:275:7: style: The scope of the variable 'R' can be reduced. [variableScope]
 int  R, G, B;
      ^
elkscmd/nano-X/engine/devdraw.c:275:10: style: The scope of the variable 'G' can be reduced. [variableScope]
 int  R, G, B;
         ^
elkscmd/nano-X/engine/devdraw.c:275:13: style: The scope of the variable 'B' can be reduced. [variableScope]
 int  R, G, B;
            ^
elkscmd/nano-X/engine/devdraw.c:277:8: style: The scope of the variable 'sq' can be reduced. [variableScope]
 long  sq;
       ^
elkscmd/nano-X/engine/devdraw.c:738:7: style: The scope of the variable 'newsize' can be reduced. [variableScope]
 int  newsize, nextentry;
      ^
elkscmd/nano-X/engine/devdraw.c:738:16: style: The scope of the variable 'nextentry' can be reduced. [variableScope]
 int  newsize, nextentry;
               ^
elkscmd/nano-X/engine/devdraw.c:1234:8: style: The scope of the variable 'count' can be reduced. [variableScope]
  long count;   /* number of cells of same color */
       ^
elkscmd/nano-X/engine/devrgn.c:133:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
elkscmd/nano-X/engine/devrgn.c:146:22: style: The scope of the variable 'pRectEnd' can be reduced. [variableScope]
    RECT *pCurRect, *pRectEnd;
                     ^
elkscmd/nano-X/engine/list.c:41:2: warning: Either the condition '!pHead->head' is redundant or there is possible null pointer dereference: pItem. [nullPointerRedundantCheck]
 pItem->prev = NULL;
 ^
elkscmd/nano-X/engine/list.c:43:6: note: Assuming that condition '!pHead->head' is not redundant
 if( !pHead->head)
     ^
elkscmd/nano-X/engine/list.c:42:16: note: Assignment to 'pHead->head=pItem'
 pHead->head = pItem;
               ^
elkscmd/nano-X/engine/list.c:41:2: note: Null pointer dereference
 pItem->prev = NULL;
 ^
elkscmd/nano-X/nanox/client.c:114:27: style:inconclusive: Boolean expression 'i==11' is used in bitwise operation. Did you mean '||'? [bitwiseOnBoolean]
 } while((i == GrRetESig) | (i == GrRetErrorPending));
                          ^
elkscmd/nano-X/nanox/client.c:209:8: style: Variable 'why' is reassigned a value before the old one has been used. 'break;' missing? [redundantAssignInSwitch]
   why = "it was asked to switch the focus to an unmapped window";
       ^
elkscmd/nano-X/nanox/client.c:207:8: note: $symbol is assigned
   why = "there was a screen error";
       ^
elkscmd/nano-X/nanox/client.c:209:8: note: $symbol is overwritten
   why = "it was asked to switch the focus to an unmapped window";
       ^
elkscmd/nano-X/nanox/client.c:43:6: style: The scope of the variable 'i' can be reduced. [variableScope]
 int i = 0;
     ^
elkscmd/nano-X/nanox/client.c:43:8: style: Variable 'i' is assigned a value that is never used. [unreadVariable]
 int i = 0;
       ^
elkscmd/nano-X/nanox/srvfunc.c:1070:8: style: The scope of the variable 'count' can be reduced. [variableScope]
 long  count;
       ^
elkscmd/nano-X/nanox/srvfunc.c:1027:29: style:inconclusive: Function 'GsBitmap' argument 7 names different: declaration 'bitmaptable' definition 'imagebits'. [funcArgNamesDifferent]
 GR_SIZE height, GR_BITMAP *imagebits)
                            ^
elkscmd/nano-X/nanox/serv.h:180:46: note: Function 'GsBitmap' argument 7 names different: declaration 'bitmaptable' definition 'imagebits'.
   GR_SIZE width, GR_SIZE height, GR_BITMAP *bitmaptable);
                                             ^
elkscmd/nano-X/nanox/srvfunc.c:1027:29: note: Function 'GsBitmap' argument 7 names different: declaration 'bitmaptable' definition 'imagebits'.
 GR_SIZE height, GR_BITMAP *imagebits)
                            ^
elkscmd/nano-X/nanox/srvfunc.c:21:17: style: Local variable 'sinfo' shadows outer variable [shadowVariable]
 GR_SCREEN_INFO sinfo;
                ^
elkscmd/nano-X/nanox/serv.h:332:23: note: Shadowed declaration
extern GR_SCREEN_INFO sinfo;   /* screen information */
                      ^
elkscmd/nano-X/nanox/srvfunc.c:21:17: note: Shadow variable
 GR_SCREEN_INFO sinfo;
                ^
elkscmd/nano-X/nanox/srvmain.c:228:8: style: Variable 'e' is assigned a value that is never used. [unreadVariable]
 if((e = select(setsize, &rfds, NULL, NULL, timeout == 0? NULL: &to)) >= 0) {
       ^
elkscmd/nano-X/nanox/srvnet.c:1452:1: warning: %x in format string (no. 2) requires 'unsigned int' but the argument type is 'signed char *'. [invalidPrintfArgType_uint]
printf("GsRead: read failed %d %x %d: %d\r\n", e, ((char *)buf +n), c-n, errno);
^
elkscmd/nano-X/nanox/srvnet.c:1369:46: error: Null pointer dereference: (struct sockaddr_un*)0 [nullPointer]
 if(bind(un_sock, (struct sockaddr *) &sckt, SUN_LEN(&sckt)) < 0)
                                             ^
elkscmd/nano-X/nanox/srvnet.c:1445:6: style: The scope of the variable 'e' can be reduced. [variableScope]
 int e, n;
     ^
elkscmd/nano-X/nanox/srvnet.c:1472:6: style: The scope of the variable 'e' can be reduced. [variableScope]
 int e, n;
     ^
elkscmd/nano/nano-2.0.6/src/browser.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 29 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/nano/nano-2.0.6/src/browser.c:455:37: warning: Either the condition 'path!=NULL' is redundant or there is possible null pointer dereference: path. [nullPointerRedundantCheck]
    size_t i = 0, path_len = strlen(path);
                                    ^
elkscmd/nano/nano-2.0.6/src/browser.c:465:17: note: Assuming that condition 'path!=NULL' is not redundant
    assert(path != NULL && path[strlen(path) - 1] == '/' && dir != NULL);
                ^
elkscmd/nano/nano-2.0.6/src/browser.c:455:37: note: Null pointer dereference
    size_t i = 0, path_len = strlen(path);
                                    ^
elkscmd/nano/nano-2.0.6/src/chars.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 32 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/nano/nano-2.0.6/src/chars.c:554:12: style: Condition 'n==0' is always false [knownConditionTrueFalse]
     if (n == 0 || bad_s1_mb != bad_s2_mb ||
           ^
elkscmd/nano/nano-2.0.6/src/chars.c:534:11: note: Assuming that condition 'n>0' is not redundant
 while (n > 0 && *s1 != '\0' && *s2 != '\0') {
          ^
elkscmd/nano/nano-2.0.6/src/chars.c:554:12: note: Condition 'n==0' is always false
     if (n == 0 || bad_s1_mb != bad_s2_mb ||
           ^
elkscmd/nano/nano-2.0.6/src/chars.c:633:10: style: The scope of the variable 'r_mb_len' can be reduced. [variableScope]
     int r_mb_len, q_mb_len;
         ^
elkscmd/nano/nano-2.0.6/src/chars.c:633:20: style: The scope of the variable 'q_mb_len' can be reduced. [variableScope]
     int r_mb_len, q_mb_len;
                   ^
elkscmd/nano/nano-2.0.6/src/chars.c:821:6: style: The scope of the variable 's_mb_len' can be reduced. [variableScope]
 int s_mb_len;
     ^
elkscmd/nano/nano-2.0.6/src/chars.c:219:30: style:inconclusive: Function 'control_wrep' argument 1 names different: declaration 'c' definition 'wc'. [funcArgNamesDifferent]
wchar_t control_wrep(wchar_t wc)
                             ^
elkscmd/nano/nano-2.0.6/src/proto.h:187:30: note: Function 'control_wrep' argument 1 names different: declaration 'c' definition 'wc'.
wchar_t control_wrep(wchar_t c);
                             ^
elkscmd/nano/nano-2.0.6/src/chars.c:219:30: note: Function 'control_wrep' argument 1 names different: declaration 'c' definition 'wc'.
wchar_t control_wrep(wchar_t wc)
                             ^
elkscmd/nano/nano-2.0.6/src/color.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 29 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/nano/nano-2.0.6/src/cut.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 27 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/nano/nano-2.0.6/src/files.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 29 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/nano/nano-2.0.6/src/files.c:1323:2: style: Non-boolean value returned from function returning bool [returnNonBoolInBooleanFunction]
 return -1;
 ^
elkscmd/nano/nano-2.0.6/src/files.c:318:6: warning: Identical inner 'if' condition is always true. [identicalInnerCondition]
 if (*first_line_ins) {
     ^
elkscmd/nano/nano-2.0.6/src/files.c:312:9: note: outer condition: *first_line_ins
    if (*first_line_ins) {
        ^
elkscmd/nano/nano-2.0.6/src/files.c:318:6: note: identical inner condition: *first_line_ins
 if (*first_line_ins) {
     ^
elkscmd/nano/nano-2.0.6/src/files.c:2169:61: style: Unsigned expression 'buflen' can't be negative so it is unnecessary to test it. [unsignedPositive]
    assert(dirname != NULL && num_matches != NULL && buflen >= 0);
                                                            ^
elkscmd/nano/nano-2.0.6/src/files.c:221:37: style:inconclusive: Function 'switch_to_prevnext_buffer' argument 1 names different: declaration 'next' definition 'next_buf'. [funcArgNamesDifferent]
void switch_to_prevnext_buffer(bool next_buf)
                                    ^
elkscmd/nano/nano-2.0.6/src/proto.h:284:37: note: Function 'switch_to_prevnext_buffer' argument 1 names different: declaration 'next' definition 'next_buf'.
void switch_to_prevnext_buffer(bool next);
                                    ^
elkscmd/nano/nano-2.0.6/src/files.c:221:37: note: Function 'switch_to_prevnext_buffer' argument 1 names different: declaration 'next' definition 'next_buf'.
void switch_to_prevnext_buffer(bool next_buf)
                                    ^
elkscmd/nano/nano-2.0.6/src/files.c:351:16: style: Variable 'input' is assigned a value that is never used. [unreadVariable]
    char input = '\0';
               ^
elkscmd/nano/nano-2.0.6/src/files.c:2515:40: style:inconclusive: Function 'writehist' argument 2 names different: declaration 'histhead' definition 'h'. [funcArgNamesDifferent]
bool writehist(FILE *hist, filestruct *h)
                                       ^
elkscmd/nano/nano-2.0.6/src/proto.h:339:40: note: Function 'writehist' argument 2 names different: declaration 'histhead' definition 'h'.
bool writehist(FILE *hist, filestruct *histhead);
                                       ^
elkscmd/nano/nano-2.0.6/src/files.c:2515:40: note: Function 'writehist' argument 2 names different: declaration 'histhead' definition 'h'.
bool writehist(FILE *hist, filestruct *h)
                                       ^
elkscmd/nano/nano-2.0.6/src/global.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 33 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/nano/nano-2.0.6/src/help.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 27 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/nano/nano-2.0.6/src/help.c:385:12: warning: Redundant assignment of 'htx[0]' to itself. [selfAssignment]
    htx[0] = _(htx[0]);
           ^
elkscmd/nano/nano-2.0.6/src/help.c:387:9: warning: Redundant assignment of 'htx[1]' to itself. [selfAssignment]
 htx[1] = _(htx[1]);
        ^
elkscmd/nano/nano-2.0.6/src/help.c:389:9: warning: Redundant assignment of 'htx[2]' to itself. [selfAssignment]
 htx[2] = _(htx[2]);
        ^
elkscmd/nano/nano-2.0.6/src/move.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 27 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/nano/nano-2.0.6/src/nano.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 41 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/nano/nano-2.0.6/src/nano.c:1483:10: style: Condition 'allow_funcs' is always true [knownConditionTrueFalse]
     if (allow_funcs)
         ^
elkscmd/nano/nano-2.0.6/src/nano.c:1388:9: note: Assuming that condition 'allow_funcs' is not redundant
    if (allow_funcs) {
        ^
elkscmd/nano/nano-2.0.6/src/nano.c:1483:10: note: Condition 'allow_funcs' is always true
     if (allow_funcs)
         ^
elkscmd/nano/nano-2.0.6/src/prompt.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 27 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/nano/nano-2.0.6/src/prompt.c:323:9: style: The scope of the variable 'char_buf_len' can be reduced. [variableScope]
    int char_buf_len;
        ^
elkscmd/nano/nano-2.0.6/src/prompt.c:771:12: warning: Char literal compared with pointer 'ch'. Did you intend to dereference it? [charLiteralWithCharPtrCompare]
    if (ch == '\0' || (ch = mbstrchr(matchbrackets, ch)) == NULL)
           ^
elkscmd/nano/nano-2.0.6/src/rcfile.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 32 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/nano/nano-2.0.6/src/rcfile.c:572:14: style: Condition 'ptr==NULL' is always false [knownConditionTrueFalse]
     if (ptr == NULL || strncasecmp(ptr, "end=", 4) != 0) {
             ^
elkscmd/nano/nano-2.0.6/src/rcfile.c:532:10: note: Assuming that condition 'ptr==NULL' is not redundant
 if (ptr == NULL)
         ^
elkscmd/nano/nano-2.0.6/src/rcfile.c:572:14: note: Condition 'ptr==NULL' is always false
     if (ptr == NULL || strncasecmp(ptr, "end=", 4) != 0) {
             ^
elkscmd/nano/nano-2.0.6/src/rcfile.c:273:16: style: Variable 'tmpsyntax' is assigned a value that is never used. [unreadVariable]
     tmpsyntax = tmpsyntax->next;
               ^
elkscmd/nano/nano-2.0.6/src/search.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 28 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/nano/nano-2.0.6/src/search.c:1122:33: warning: Either the condition 'found!=NULL' is redundant or there is overflow in pointer subtraction. [nullPointerArithmeticRedundantCheck]
    openfile->current_x = found - fileptr->data;
                                ^
elkscmd/nano/nano-2.0.6/src/search.c:1100:12: note: Assuming that condition 'found!=NULL' is not redundant
 if (found != NULL)
           ^
elkscmd/nano/nano-2.0.6/src/search.c:1112:14: note: Assuming condition is false
 if (fileptr == NULL)
             ^
elkscmd/nano/nano-2.0.6/src/search.c:1122:33: note: Null pointer subtraction
    openfile->current_x = found - fileptr->data;
                                ^
elkscmd/nano/nano-2.0.6/src/search.c:1166:12: warning: Char literal compared with pointer 'ch'. Did you intend to dereference it? [charLiteralWithCharPtrCompare]
    if (ch == '\0' || (ch = mbstrchr(matchbrackets, ch)) == NULL) {
           ^
elkscmd/nano/nano-2.0.6/src/text.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 28 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/nano/nano-2.0.6/src/text.c:861:9: style: The scope of the variable 'blank_mb_len' can be reduced. [variableScope]
    int blank_mb_len;
        ^
elkscmd/nano/nano-2.0.6/src/text.c:545:26: style: Variable 'next_line_len' is assigned a value that is never used. [unreadVariable]
    size_t next_line_len = 0;
                         ^
elkscmd/nano/nano-2.0.6/src/text.c:673:15: style: Variable 'new_line_len' is assigned a value that is never used. [unreadVariable]
 new_line_len += indent_len;
              ^
elkscmd/nano/nano-2.0.6/src/text.c:1228:17: style: Variable 'first_line' is assigned a value that is never used. [unreadVariable]
     first_line = top;
                ^
elkscmd/nano/nano-2.0.6/src/utils.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 28 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/nano/nano-2.0.6/src/utils.c:262:36: warning: Either the condition 'word!=NULL' is redundant or there is possible null pointer dereference: word. [nullPointerRedundantCheck]
    size_t word_end = pos + strlen(word);
                                   ^
elkscmd/nano/nano-2.0.6/src/utils.c:265:54: note: Assuming that condition 'word!=NULL' is not redundant
    assert(buf != NULL && pos <= strlen(buf) && word != NULL);
                                                     ^
elkscmd/nano/nano-2.0.6/src/utils.c:262:36: note: Null pointer dereference
    size_t word_end = pos + strlen(word);
                                   ^
elkscmd/nano/nano-2.0.6/src/winio.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 48 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/nano/nano-2.0.6/src/winio.c:2431:32: warning: Either the condition 'fileptr!=NULL' is redundant or there is possible null pointer dereference: fileptr. [nullPointerRedundantCheck]
    size_t startpos = actual_x(fileptr->data, start);
                               ^
elkscmd/nano/nano-2.0.6/src/winio.c:2442:40: note: Assuming that condition 'fileptr!=NULL' is not redundant
    assert(openfile != NULL && fileptr != NULL && converted != NULL);
                                       ^
elkscmd/nano/nano-2.0.6/src/winio.c:2431:32: note: Null pointer dereference
    size_t startpos = actual_x(fileptr->data, start);
                               ^
elkscmd/nano/nano-2.0.6/src/winio.c:2434:30: warning: Either the condition 'fileptr!=NULL' is redundant or there is possible null pointer dereference: fileptr. [nullPointerRedundantCheck]
    size_t endpos = actual_x(fileptr->data, start + COLS - 1) + 1;
                             ^
elkscmd/nano/nano-2.0.6/src/winio.c:2442:40: note: Assuming that condition 'fileptr!=NULL' is not redundant
    assert(openfile != NULL && fileptr != NULL && converted != NULL);
                                       ^
elkscmd/nano/nano-2.0.6/src/winio.c:2434:30: note: Null pointer dereference
    size_t endpos = actual_x(fileptr->data, start + COLS - 1) + 1;
                             ^
elkscmd/nano/nano-2.0.6/src/winio.c:2701:6: style: The scope of the variable 'x_start' can be reduced. [variableScope]
 int x_start;
     ^
elkscmd/nano/nano-2.0.6/src/winio.c:2703:6: style: The scope of the variable 'paintlen' can be reduced. [variableScope]
 int paintlen;
     ^
elkscmd/nano/nano-2.0.6/src/winio.c:2706:9: style: The scope of the variable 'index' can be reduced. [variableScope]
 size_t index;
        ^
elkscmd/nano/ncurses-5.2/ncurses/base/define_key.c:35:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: define_key.c,v 1.4 1999/02/21 13:03:55 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/keybound.c:35:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: keybound.c,v 1.1 1999/02/19 11:55:56 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/keyok.c:35:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: keyok.c,v 1.3 1999/02/19 11:29:48 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_addch.c:44:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_addch.c,v 1.44 2000/05/20 21:13:11 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_addstr.c:43:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_addstr.c,v 1.18 2000/07/29 16:42:41 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_beep.c:45:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_beep.c,v 1.7 1999/10/22 21:39:09 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_bkgd.c:36:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_bkgd.c,v 1.12 1998/02/11 12:13:54 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_box.c:43:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_box.c,v 1.11 2000/04/29 21:12:37 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_chgat.c:43:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_chgat.c,v 1.2 1998/02/11 12:14:00 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_clear.c:43:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_clear.c,v 1.5 1998/02/11 12:13:53 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_clearok.c:44:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_clearok.c,v 1.2 1998/02/11 12:14:00 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_clrbot.c:43:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_clrbot.c,v 1.15 2000/04/29 21:15:26 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_clreol.c:43:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_clreol.c,v 1.16 2000/04/29 21:14:54 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_color.c:44:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_color.c,v 1.53 2000/09/02 18:02:15 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_colorset.c:43:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_colorset.c,v 1.6 2000/07/29 16:37:19 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_delch.c:43:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_delch.c,v 1.8 1998/06/28 00:28:17 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_delwin.c:43:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_delwin.c,v 1.9 1998/02/11 12:13:53 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_dft_fgbg.c:36:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_dft_fgbg.c,v 1.13 2000/07/07 16:50:27 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_echo.c:46:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_echo.c,v 1.3 1998/10/12 13:15:33 Alexander.V.Lukyanov Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_endwin.c:45:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_endwin.c,v 1.17 1999/06/12 23:01:46 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_erase.c:44:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_erase.c,v 1.11 1998/02/11 12:13:54 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_flash.c:45:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_flash.c,v 1.4 1999/10/22 21:39:06 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_freeall.c:42:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_freeall.c,v 1.16 1999/11/28 01:34:11 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_getch.c:43:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_getch.c,v 1.50 2000/10/09 23:53:57 Ilya.Zakharevich Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_getstr.c:45:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_getstr.c,v 1.20 1998/12/20 00:16:01 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_hline.c:43:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_hline.c,v 1.6 2000/07/04 14:08:09 Philippe.Blain Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_immedok.c:44:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_immedok.c,v 1.2 1998/02/11 12:14:01 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_inchstr.c:44:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_inchstr.c,v 1.7 1998/02/11 12:13:55 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_initscr.c:48:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_initscr.c,v 1.26 1998/12/19 23:10:09 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_insch.c:45:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_insch.c,v 1.10 1998/06/28 00:26:52 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_insdel.c:45:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_insdel.c,v 1.8 1998/02/11 12:13:55 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_insstr.c:44:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_insstr.c,v 1.14 2000/04/29 21:16:41 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_instr.c:44:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_instr.c,v 1.8 1998/02/11 12:13:54 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_isendwin.c:44:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_isendwin.c,v 1.4 1998/04/11 22:52:32 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_leaveok.c:44:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_leaveok.c,v 1.3 1998/03/21 22:54:20 jtc Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_mouse.c:87:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_mouse.c,v 1.55 2000/10/10 00:07:28 Ilya.Zakharevich Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_move.c:43:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_move.c,v 1.9 2000/04/29 21:11:19 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_mvwin.c:45:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_mvwin.c,v 1.7 1998/02/11 12:13:55 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_newterm.c:50:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_newterm.c,v 1.48 2000/09/02 18:11:42 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_newwin.c:43:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_newwin.c,v 1.24 2000/04/29 18:49:51 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_nl.c:45:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_nl.c,v 1.6 2000/02/13 00:59:39 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_overlay.c:44:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_overlay.c,v 1.12 1998/02/11 12:13:59 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_pad.c:43:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_pad.c,v 1.29 2000/04/29 21:19:44 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_printw.c:42:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_printw.c,v 1.7 1998/04/11 22:53:44 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_redrawln.c:42:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_redrawln.c,v 1.7 1998/09/19 20:09:50 Alexander.V.Lukyanov Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_refresh.c:43:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_refresh.c,v 1.25 2000/04/29 21:17:08 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_restart.c:50:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_restart.c,v 1.3 2000/09/02 18:09:44 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_scanw.c:45:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_scanw.c,v 1.8 1998/04/11 22:54:18 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_screen.c:41:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_screen.c,v 1.15 1999/07/24 20:05:29 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_scroll.c:45:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_scroll.c,v 1.17 2000/04/29 21:10:51 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_scrollok.c:44:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_scrollok.c,v 1.2 1998/02/11 12:14:01 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_scrreg.c:43:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_scrreg.c,v 1.8 2000/04/29 21:13:04 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_set_term.c:46:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_set_term.c,v 1.58 2000/10/04 22:05:48 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_slk.c:44:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_slk.c,v 1.17 1999/10/30 23:00:16 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_slkatr_set.c:40:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_slkatr_set.c,v 1.3 1999/05/16 17:13:59 juergen Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_slkatrof.c:41:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_slkatrof.c,v 1.4 1998/03/11 19:26:07 juergen Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_slkatron.c:41:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_slkatron.c,v 1.4 1998/03/11 19:26:07 juergen Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_slkatrset.c:41:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_slkatrset.c,v 1.4 1998/03/11 19:26:01 juergen Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_slkattr.c:41:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_slkattr.c,v 1.3 1998/02/11 12:13:56 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_slkclear.c:41:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_slkclear.c,v 1.4 1999/03/03 23:44:22 juergen Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_slkcolor.c:38:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_slkcolor.c,v 1.5 1999/05/16 17:14:13 juergen Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_slkinit.c:41:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_slkinit.c,v 1.3 1998/02/11 12:13:56 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_slklab.c:41:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_slklab.c,v 1.4 1998/02/11 12:13:54 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_slkrefr.c:41:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_slkrefr.c,v 1.8 1999/03/14 00:10:27 Alexander.V.Lukyanov Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_slkset.c:41:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_slkset.c,v 1.3 1998/02/11 12:13:56 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_slktouch.c:41:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_slktouch.c,v 1.3 1998/02/11 12:13:56 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_touch.c:46:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_touch.c,v 1.6 1998/04/11 22:55:02 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_ungetch.c:43:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_ungetch.c,v 1.2 1998/02/11 12:13:56 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_vline.c:43:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_vline.c,v 1.5 2000/04/29 21:14:11 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_wattroff.c:44:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_wattroff.c,v 1.4 1998/05/10 12:02:11 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_wattron.c:44:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_wattron.c,v 1.4 1998/05/10 12:02:28 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_winch.c:42:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_winch.c,v 1.2 2000/07/29 16:41:44 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_window.c:42:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_window.c,v 1.13 1998/06/28 00:10:59 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/memmove.c:31:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: memmove.c,v 1.2 1999/02/27 19:55:57 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/resizeterm.c:44:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: resizeterm.c,v 1.7 1998/09/19 19:27:43 Alexander.V.Lukyanov Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/safe_sprintf.c:36:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: safe_sprintf.c,v 1.11 1999/09/11 18:03:27 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/tries.c:42:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: tries.c,v 1.12 1999/03/01 23:23:59 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/version.c:35:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: version.c,v 1.2 1999/12/04 21:27:23 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/vsscanf.c:9:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: vsscanf.c,v 1.10 1996/12/21 14:24:06 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/base/vsscanf.c:20:0: information: Skipping configuration 'HAVE_VFSCANF;HAVE_VSSCANF=0;_IOREAD;_NFILE' since the value of '_IOREAD' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 strbuf._flag = _IOREAD;
^
elkscmd/nano/ncurses-5.2/ncurses/base/vsscanf.c:23:0: information: Skipping configuration 'HAVE_VFSCANF;HAVE_VSSCANF=0;_IOREAD;_NFILE' since the value of '_NFILE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 strbuf._file = _NFILE;
^
elkscmd/nano/ncurses-5.2/ncurses/base/vsscanf.c:20:0: information: Skipping configuration 'HAVE_VSSCANF=0;_IOREAD;_NFILE' since the value of '_IOREAD' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 strbuf._flag = _IOREAD;
^
elkscmd/nano/ncurses-5.2/ncurses/base/vsscanf.c:23:0: information: Skipping configuration 'HAVE_VSSCANF=0;_IOREAD;_NFILE' since the value of '_NFILE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 strbuf._file = _NFILE;
^
elkscmd/nano/ncurses-5.2/ncurses/base/wresize.c:35:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: wresize.c,v 1.16 2000/03/05 00:14:35 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/fallback.ansi.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 33 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/access.c:36:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: access.c,v 1.4 2000/10/08 01:25:06 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/add_tries.c:42:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: add_tries.c,v 1.2 2000/03/18 22:23:56 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/alloc_entry.c:50:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: alloc_entry.c,v 1.32 2000/03/12 00:16:31 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/alloc_ttype.c:46:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: alloc_ttype.c,v 1.10 2000/08/12 21:56:24 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/captoinfo.c:95:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: captoinfo.c,v 1.37 2000/04/01 20:07:34 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/comp_error.c:44:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: comp_error.c,v 1.17 1999/10/30 23:00:16 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/comp_expand.c:38:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: comp_expand.c,v 1.11 1999/03/07 00:51:07 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/comp_hash.c:52:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: comp_hash.c,v 1.21 1999/06/26 21:25:11 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/comp_parse.c:55:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: comp_parse.c,v 1.42 2000/10/14 17:50:45 Bernhard.Rosenkraenzer Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/comp_scan.c:53:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: comp_scan.c,v 1.47 2000/09/24 01:15:17 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/doalloc.c:43:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: doalloc.c,v 1.5 1999/03/14 12:25:27 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/free_ttype.c:47:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: free_ttype.c,v 1.5 2000/07/08 00:43:58 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/getenv_num.c:39:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: getenv_num.c,v 1.1 1998/09/19 21:30:23 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/home_terminfo.c:49:11: style: The scope of the variable 'home' can be reduced. [variableScope]
    char *home;
          ^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/home_terminfo.c:50:18: style: The scope of the variable 'temp' can be reduced. [variableScope]
    static char *temp = 0;
                 ^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/init_keytry.c:35:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: init_keytry.c,v 1.3 2000/03/12 02:55:50 Todd.C.Miller Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/lib_acs.c:39:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_acs.c,v 1.16 1999/10/30 23:00:16 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/lib_baudrate.c:109:14: style: The scope of the variable 'i' can be reduced. [variableScope]
    unsigned i;
             ^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/lib_baudrate.c:132:14: style: The scope of the variable 'i' can be reduced. [variableScope]
    unsigned i;
             ^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/lib_baudrate.c:92:0: information: Skipping configuration 'B115200' since the value of 'B115200' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    {B115200, 115200},
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/lib_baudrate.c:75:0: information: Skipping configuration 'B19200' since the value of 'B19200' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    {B19200, 19200},
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/lib_baudrate.c:95:0: information: Skipping configuration 'B230400' since the value of 'B230400' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    {B230400, 230400},
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/lib_baudrate.c:82:0: information: Skipping configuration 'B38400' since the value of 'B38400' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    {B38400, 38400},
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/lib_baudrate.c:98:0: information: Skipping configuration 'B460800' since the value of 'B460800' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    {B460800, 460800},
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/lib_baudrate.c:89:0: information: Skipping configuration 'B57600' since the value of 'B57600' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    {B57600, 57600},
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/lib_baudrate.c:78:0: information: Skipping configuration 'EXTA' since the value of 'EXTA' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    {EXTA, 19200},
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/lib_baudrate.c:85:0: information: Skipping configuration 'EXTB' since the value of 'EXTB' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    {EXTB, 38400},
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/lib_cur_term.c:43:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_cur_term.c,v 1.9 1999/10/30 23:00:16 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/lib_data.c:43:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_data.c,v 1.14 1999/01/31 01:34:33 Ilya.Zakharevich Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/lib_has_cap.c:46:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_has_cap.c,v 1.1 1998/10/23 15:32:21 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/lib_kernel.c:51:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_kernel.c,v 1.19 1998/12/20 00:18:45 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/lib_longname.c:44:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_longname.c,v 1.7 1999/01/03 01:47:45 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/lib_napms.c:61:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_napms.c,v 1.9 2000/04/29 23:42:56 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/lib_options.c:45:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_options.c,v 1.40 2000/09/02 18:02:05 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/lib_print.c:39:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_print.c,v 1.11 1999/02/27 19:59:05 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/lib_raw.c:51:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_raw.c,v 1.8 2000/09/02 18:08:48 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/lib_setup.c:51:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_setup.c,v 1.60 2000/09/02 18:13:12 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/lib_termcap.c:42:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_termcap.c,v 1.37 2000/09/16 20:30:16 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/lib_termname.c:32:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_termname.c,v 1.2 1999/07/24 21:02:40 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/lib_tgoto.c:38:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_tgoto.c,v 1.2 2000/09/24 00:19:14 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/lib_ti.c:39:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_ti.c,v 1.20 2000/02/13 01:01:26 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/lib_tparm.c:45:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_tparm.c,v 1.48 2000/10/14 17:45:00 Sergei.Ivanov Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/lib_tputs.c:48:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_tputs.c,v 1.51 2000/10/08 00:22:24 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/lib_ttyflags.c:41:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_ttyflags.c,v 1.3 1999/10/22 21:38:55 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/lib_ttyflags.c:92:0: information: Skipping configuration 'XTABS' since the value of 'XTABS' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 if (cur_term->Ottyb.sg_flags & XTABS)
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/lib_ttyflags.c:107:0: information: Skipping configuration 'XTABS' since the value of 'XTABS' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 cur_term->Nttyb.sg_flags &= ~XTABS;
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/make_keys.c:40:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: make_keys.c,v 1.8 2000/03/12 02:55:50 Todd.C.Miller Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/name_match.c:37:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: name_match.c,v 1.8 1999/03/07 01:58:36 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/parse_entry.c:50:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: parse_entry.c,v 1.48 2000/10/03 09:38:48 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/read_entry.c:44:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: read_entry.c,v 1.69 2000/10/10 00:57:40 Todd.Miller Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/read_entry.c:497:0: information: Skipping configuration 'TERMINFO_DIRS' since the value of 'TERMINFO_DIRS' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    return _nc_read_terminfo_dirs(TERMINFO_DIRS, filename, ttn, tp);
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/read_termcap.c:58:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: read_termcap.c,v 1.51 2000/10/21 00:34:11 Philip.Guenther Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/setbuf.c:45:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: setbuf.c,v 1.5 1999/02/27 20:00:15 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/strings.c:39:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id")
^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/write_entry.c:55:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: write_entry.c,v 1.53 2000/10/04 02:32:14 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/trace/lib_trace.c:43:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_trace.c,v 1.34 2000/04/01 20:25:47 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/trace/lib_traceatr.c:41:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_traceatr.c,v 1.30 2000/07/29 18:06:09 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/trace/lib_tracebits.c:37:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_tracebits.c,v 1.7 2000/09/02 18:08:37 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/trace/lib_tracebits.c:162:0: information: Skipping configuration 'CS5;CS8;CS6;TERMIOS;TRACE' since the value of 'CS5' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  "CS5 ", CS5
^
elkscmd/nano/ncurses-5.2/ncurses/trace/lib_tracebits.c:175:0: information: Skipping configuration 'CS5;CS8;CS6;TERMIOS;TRACE' since the value of 'CS8' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  "CS8 ", CS8
^
elkscmd/nano/ncurses-5.2/ncurses/trace/lib_tracebits.c:166:0: information: Skipping configuration 'CS5;CS8;CS6;TERMIOS;TRACE' since the value of 'CS6' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  "CS6 ", CS6
^
elkscmd/nano/ncurses-5.2/ncurses/trace/lib_tracebits.c:162:0: information: Skipping configuration 'CS5;CS8;CS7;TERMIOS;TRACE' since the value of 'CS5' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  "CS5 ", CS5
^
elkscmd/nano/ncurses-5.2/ncurses/trace/lib_tracebits.c:175:0: information: Skipping configuration 'CS5;CS8;CS7;TERMIOS;TRACE' since the value of 'CS8' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  "CS8 ", CS8
^
elkscmd/nano/ncurses-5.2/ncurses/trace/lib_tracebits.c:171:0: information: Skipping configuration 'CS5;CS8;CS7;TERMIOS;TRACE' since the value of 'CS7' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  "CS7 ", CS7
^
elkscmd/nano/ncurses-5.2/ncurses/trace/lib_tracebits.c:162:0: information: Skipping configuration 'CS5;CS8;TERMIOS;TRACE' since the value of 'CS5' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  "CS5 ", CS5
^
elkscmd/nano/ncurses-5.2/ncurses/trace/lib_tracebits.c:175:0: information: Skipping configuration 'CS5;CS8;TERMIOS;TRACE' since the value of 'CS8' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  "CS8 ", CS8
^
elkscmd/nano/ncurses-5.2/ncurses/trace/lib_tracechr.c:39:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_tracechr.c,v 1.2 2000/04/01 20:17:26 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/trace/lib_tracedmp.c:40:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_tracedmp.c,v 1.13 1998/03/21 18:39:44 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/trace/lib_tracemse.c:42:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_tracemse.c,v 1.6 1998/11/16 14:28:17 Alexander.V.Lukyanov Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/trace/trace_buf.c:38:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: trace_buf.c,v 1.7 1999/02/27 19:50:58 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/trace/trace_tries.c:38:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: trace_tries.c,v 1.6 1999/03/06 22:51:07 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/trace/trace_xnames.c:39:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: trace_xnames.c,v 1.3 1999/03/02 01:20:38 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tty/hardscroll.c:149:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: hardscroll.c,v 1.33 1999/02/27 20:01:29 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tty/hashmap.c:73:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: hashmap.c,v 1.34 1999/11/28 00:10:57 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tty/lib_mvcur.c:155:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_mvcur.c,v 1.72 2000/10/08 00:58:25 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tty/lib_tstp.c:50:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_tstp.c,v 1.22 2000/09/02 18:33:17 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tty/lib_twait.c:62:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_twait.c,v 1.39 2000/08/26 19:34:15 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tty/lib_vidattr.c:67:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: lib_vidattr.c,v 1.33 2000/10/09 22:45:29 tom Exp $")
^
elkscmd/nano/ncurses-5.2/ncurses/tty/tty_update.c:73:1: error: There is an unknown macro here somewhere. Configuration is required. If MODULE_ID is a macro then please configure it. [unknownMacro]
MODULE_ID("$Id: tty_update.c,v 1.146 2000/10/07 01:11:44 tom Exp $")
^
elkscmd/nano/ncurses-5.2/progs/clear.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 16 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/nano/ncurses-5.2/progs/dump_entry.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 19 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/nano/ncurses-5.2/progs/dump_entry.c:933:12: style: The scope of the variable 'm' can be reduced. [variableScope]
 size_t n, m;
           ^
elkscmd/nano/ncurses-5.2/progs/dump_entry.c:935:7: style: The scope of the variable 'extra' can be reduced. [variableScope]
 char extra = 0;
      ^
elkscmd/nano/ncurses-5.2/progs/infocmp.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 18 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/nano/ncurses-5.2/progs/infocmp.c:558:50: style: Condition 'strnames[i][0]=='f'' is always false [knownConditionTrueFalse]
     if (strnames[i][0] == 'k' && strnames[i][0] == 'f')
                                                 ^
elkscmd/nano/ncurses-5.2/progs/infocmp.c:558:25: note: Assuming that condition 'strnames[i][0]=='k'' is not redundant
     if (strnames[i][0] == 'k' && strnames[i][0] == 'f')
                        ^
elkscmd/nano/ncurses-5.2/progs/infocmp.c:558:50: note: Condition 'strnames[i][0]=='f'' is always false
     if (strnames[i][0] == 'k' && strnames[i][0] == 'f')
                                                 ^
elkscmd/nano/ncurses-5.2/progs/infocmp.c:1129:2: error: Memory leak: tfile [memleak]
 return EXIT_FAILURE;
 ^
elkscmd/nano/ncurses-5.2/progs/infocmp.c:274:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
elkscmd/nano/ncurses-5.2/progs/tic.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/nano/ncurses-5.2/progs/tic.c:379:6: warning: %d in format string (no. 1) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
     fprintf(log_fp, "%d:%s\n", n + 1, dst[n]);
     ^
elkscmd/nano/ncurses-5.2/progs/tic.c:263:43: warning: Either the condition '(up=strchr(namebuf,'='))!=0' is redundant or there is possible null pointer dereference: up. [nullPointerRedundantCheck]
  || ((up = strchr(namebuf, '@')) != 0 && up[1] == '>')) {
                                          ^
elkscmd/nano/ncurses-5.2/progs/tic.c:262:34: note: Assuming that condition '(up=strchr(namebuf,'='))!=0' is not redundant
  || (up = strchr(namebuf, '=')) != 0
                                 ^
elkscmd/nano/ncurses-5.2/progs/tic.c:263:43: note: Null pointer dereference
  || ((up = strchr(namebuf, '@')) != 0 && up[1] == '>')) {
                                          ^
elkscmd/nano/ncurses-5.2/progs/tic.c:236:19: style: The scope of the variable 'have' can be reduced. [variableScope]
    static size_t have, used;
                  ^
elkscmd/nano/ncurses-5.2/progs/tic.c:237:18: style: The scope of the variable 'namebuf' can be reduced. [variableScope]
    static char *namebuf, *suffix;
                 ^
elkscmd/nano/ncurses-5.2/progs/tic.c:237:28: style: The scope of the variable 'suffix' can be reduced. [variableScope]
    static char *namebuf, *suffix;
                           ^
elkscmd/nano/ncurses-5.2/progs/tic.c:389:12: style: The scope of the variable 'n' can be reduced. [variableScope]
    size_t n;
           ^
elkscmd/nano/ncurses-5.2/progs/tic.c:956:27: style:inconclusive: Function 'check_termtype' argument 1 names different: declaration 'tt' definition 'tp'. [funcArgNamesDifferent]
check_termtype(TERMTYPE * tp)
                          ^
elkscmd/nano/ncurses-5.2/progs/tic.c:57:39: note: Function 'check_termtype' argument 1 names different: declaration 'tt' definition 'tp'.
static void check_termtype(TERMTYPE * tt);
                                      ^
elkscmd/nano/ncurses-5.2/progs/tic.c:956:27: note: Function 'check_termtype' argument 1 names different: declaration 'tt' definition 'tp'.
check_termtype(TERMTYPE * tp)
                          ^
elkscmd/nano/ncurses-5.2/progs/toe.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/nano/ncurses-5.2/progs/toe.c:87:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i, c;
        ^
elkscmd/nano/ncurses-5.2/progs/toe.c:146:6: style: The scope of the variable 'matchcount' can be reduced. [variableScope]
 int matchcount;
     ^
elkscmd/nano/ncurses-5.2/progs/toe.c:177:8: style: The scope of the variable 'home' can be reduced. [variableScope]
 char *home, *eargv[3];
       ^
elkscmd/nano/ncurses-5.2/progs/toe.c:178:7: style: The scope of the variable 'personal' can be reduced. [variableScope]
 char personal[PATH_MAX];
      ^
elkscmd/nano/ncurses-5.2/progs/tput.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 17 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/nano/ncurses-5.2/progs/tset.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 61 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/nano/ncurses-5.2/progs/tset.c:1166:11: style: Variable 'ttype' is reassigned a value before the old one has been used. [redundantAssignment]
    ttype = _nc_first_name(cur_term->type.term_names);
          ^
elkscmd/nano/ncurses-5.2/progs/tset.c:1133:11: note: ttype is assigned
    ttype = get_termcap_entry(*argv);
          ^
elkscmd/nano/ncurses-5.2/progs/tset.c:1166:11: note: ttype is overwritten
    ttype = _nc_first_name(cur_term->type.term_names);
          ^
elkscmd/nano/ncurses-5.2/progs/tset.c:162:26: style: The scope of the variable 'nw' can be reduced. [variableScope]
    register int fd, nr, nw;
                         ^
elkscmd/nano/ncurses-5.2/progs/tset.c:187:11: style: The scope of the variable 'p' can be reduced. [variableScope]
    char *p;
          ^
elkscmd/nano/ncurses-5.2/progs/tset.c:169:10: style: Variable 'nw' is assigned a value that is never used. [unreadVariable]
 if ((nw = write(STDERR_FILENO, buf, (size_t) nr)) == -1)
         ^
elkscmd/nano/ncurses-5.2/progs/tset.c:295:0: information: Skipping configuration 'B115200' since the value of 'B115200' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    {"115200", B115200},
^
elkscmd/nano/ncurses-5.2/progs/tset.c:266:0: information: Skipping configuration 'B19200' since the value of 'B19200' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    {"19200", B19200},
^
elkscmd/nano/ncurses-5.2/progs/tset.c:272:0: information: Skipping configuration 'B19200' since the value of 'B19200' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    {"19200", B19200},
^
elkscmd/nano/ncurses-5.2/progs/tset.c:278:0: information: Skipping configuration 'B19200' since the value of 'B19200' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    {"19200", B19200},
^
elkscmd/nano/ncurses-5.2/progs/tset.c:298:0: information: Skipping configuration 'B230400' since the value of 'B230400' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    {"230400", B230400},
^
elkscmd/nano/ncurses-5.2/progs/tset.c:269:0: information: Skipping configuration 'B38400' since the value of 'B38400' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    {"38400", B38400},
^
elkscmd/nano/ncurses-5.2/progs/tset.c:275:0: information: Skipping configuration 'B38400' since the value of 'B38400' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    {"38400", B38400},
^
elkscmd/nano/ncurses-5.2/progs/tset.c:285:0: information: Skipping configuration 'B38400' since the value of 'B38400' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    {"38400", B38400},
^
elkscmd/nano/ncurses-5.2/progs/tset.c:301:0: information: Skipping configuration 'B460800' since the value of 'B460800' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    {"460800", B460800},
^
elkscmd/nano/ncurses-5.2/progs/tset.c:292:0: information: Skipping configuration 'B57600' since the value of 'B57600' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    {"57600", B57600},
^
elkscmd/nano/ncurses-5.2/progs/tset.c:662:0: information: Skipping configuration 'CDISCARD;VDISCARD;TERMIOS' since the value of 'CDISCARD' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    mode.c_cc[VDISCARD] = CHK(mode.c_cc[VDISCARD], CDISCARD);
^
elkscmd/nano/ncurses-5.2/progs/tset.c:662:0: information: Skipping configuration 'CDISCARD;VDISCARD;TERMIOS' since the value of 'VDISCARD' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    mode.c_cc[VDISCARD] = CHK(mode.c_cc[VDISCARD], CDISCARD);
^
elkscmd/nano/ncurses-5.2/progs/tset.c:667:0: information: Skipping configuration 'CFLUSH;VFLUSH;TERMIOS' since the value of 'CFLUSH' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    mode.c_cc[VFLUSH] = CHK(mode.c_cc[VFLUSH], CFLUSH);
^
elkscmd/nano/ncurses-5.2/progs/tset.c:667:0: information: Skipping configuration 'CFLUSH;VFLUSH;TERMIOS' since the value of 'VFLUSH' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    mode.c_cc[VFLUSH] = CHK(mode.c_cc[VFLUSH], CFLUSH);
^
elkscmd/nano/ncurses-5.2/progs/tset.c:688:0: information: Skipping configuration 'CWERASE;VWERASE;TERMIOS' since the value of 'CWERASE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    mode.c_cc[VWERASE] = CHK(mode.c_cc[VWERASE], CWERASE);
^
elkscmd/nano/ncurses-5.2/progs/tset.c:688:0: information: Skipping configuration 'CWERASE;VWERASE;TERMIOS' since the value of 'VWERASE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    mode.c_cc[VWERASE] = CHK(mode.c_cc[VWERASE], CWERASE);
^
elkscmd/nano/regex/regcomp.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 13 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/nano/regex/regcomp.c:134:5: error: There is an unknown macro here somewhere. Configuration is required. If gettext_noop is a macro then please configure it. [unknownMacro]
    gettext_noop ("No match") /* REG_NOMATCH */
    ^
elkscmd/nano/regex/regex.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 39 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/nano/regex/regcomp.c:1032:11: style: Condition 'type==OP_BACK_REF' is always true [knownConditionTrueFalse]
 if (type == OP_BACK_REF)
          ^
elkscmd/nano/regex/regcomp.c:1019:11: note: Assuming that condition 'type!=OP_BACK_REF' is not redundant
 if (type != OP_BACK_REF)
          ^
elkscmd/nano/regex/regcomp.c:1029:16: note: Assuming condition is false
 if (clexp_idx == init_nodes.nelem)
               ^
elkscmd/nano/regex/regcomp.c:1032:11: note: Condition 'type==OP_BACK_REF' is always true
 if (type == OP_BACK_REF)
          ^
elkscmd/nano/regex/regexec.c:388:7: style: Condition 'free_str' is always false [knownConditionTrueFalse]
  if (free_str)
      ^
elkscmd/nano/regex/regexec.c:364:18: note: Assignment 'free_str=0', assigned value is 0
  int free_str = 0;
                 ^
elkscmd/nano/regex/regexec.c:366:7: note: Assuming condition is false
  if (BE (length1 < 0 || length2 < 0 || stop < 0, 0))
      ^
elkscmd/nano/regex/regexec.c:388:7: note: Condition 'free_str' is always false
  if (free_str)
      ^
elkscmd/nano/regex/regexec.c:1457:9: style: Condition 'prev_idx_match_malloced' is always true [knownConditionTrueFalse]
    if (prev_idx_match_malloced)
        ^
elkscmd/nano/regex/regexec.c:1438:33: note: Assignment 'prev_idx_match_malloced=1', assigned value is 1
      prev_idx_match_malloced = 1;
                                ^
elkscmd/nano/regex/regexec.c:1457:9: note: Condition 'prev_idx_match_malloced' is always true
    if (prev_idx_match_malloced)
        ^
elkscmd/nano/regex/regexec.c:1467:12: style: Condition 'prev_idx_match_malloced' is always true [knownConditionTrueFalse]
       if (prev_idx_match_malloced)
           ^
elkscmd/nano/regex/regexec.c:1438:33: note: Assignment 'prev_idx_match_malloced=1', assigned value is 1
      prev_idx_match_malloced = 1;
                                ^
elkscmd/nano/regex/regexec.c:1467:12: note: Condition 'prev_idx_match_malloced' is always true
       if (prev_idx_match_malloced)
           ^
elkscmd/nano/regex/regexec.c:1493:12: style: Condition 'prev_idx_match_malloced' is always true [knownConditionTrueFalse]
       if (prev_idx_match_malloced)
           ^
elkscmd/nano/regex/regexec.c:1438:33: note: Assignment 'prev_idx_match_malloced=1', assigned value is 1
      prev_idx_match_malloced = 1;
                                ^
elkscmd/nano/regex/regexec.c:1479:8: note: Assuming condition is false
   if (BE (cur_node == -2, 0))
       ^
elkscmd/nano/regex/regexec.c:1493:12: note: Condition 'prev_idx_match_malloced' is always true
       if (prev_idx_match_malloced)
           ^
elkscmd/nano/regex/regexec.c:1500:7: style: Condition 'prev_idx_match_malloced' is always true [knownConditionTrueFalse]
  if (prev_idx_match_malloced)
      ^
elkscmd/nano/regex/regexec.c:1438:33: note: Assignment 'prev_idx_match_malloced=1', assigned value is 1
      prev_idx_match_malloced = 1;
                                ^
elkscmd/nano/regex/regexec.c:1500:7: note: Condition 'prev_idx_match_malloced' is always true
  if (prev_idx_match_malloced)
      ^
elkscmd/nano/regex/regexec.c:1687:11: style: Condition '!naccepted' is always true [knownConditionTrueFalse]
      if (!naccepted
          ^
elkscmd/nano/regex/regexec.c:1671:23: note: Assignment 'naccepted=0', assigned value is 0
      int naccepted = 0;
                      ^
elkscmd/nano/regex/regexec.c:1687:11: note: Condition '!naccepted' is always true
      if (!naccepted
          ^
elkscmd/nano/regex/regexec.c:3103:11: style: Condition 'naccepted' is always false [knownConditionTrueFalse]
      if (naccepted
          ^
elkscmd/nano/regex/regexec.c:3058:23: note: Assignment 'naccepted=0', assigned value is 0
      int naccepted = 0;
                      ^
elkscmd/nano/regex/regexec.c:3103:11: note: Condition 'naccepted' is always false
      if (naccepted
          ^
elkscmd/nano/regex/regex_internal.c:1387:28: style: The scope of the variable 'mid' can be reduced. [variableScope]
  unsigned int idx, right, mid;
                           ^
elkscmd/nano/regex/regcomp.c:996:14: style: The scope of the variable 'i' can be reduced. [variableScope]
  int first, i;
             ^
elkscmd/nano/regex/regcomp.c:1684:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
elkscmd/nano/regex/regcomp.c:3734:17: style: The scope of the variable 'c' can be reduced. [variableScope]
  unsigned char c;
                ^
elkscmd/nano/regex/regexec.c:1448:8: style: The scope of the variable 'reg_idx' can be reduced. [variableScope]
   int reg_idx;
       ^
elkscmd/nano/regex/regexec.c:1820:7: style: The scope of the variable 'i' can be reduced. [variableScope]
  int i;
      ^
elkscmd/nano/regex/regexec.c:1898:16: style: The scope of the variable 'src_pos' can be reduced. [variableScope]
  int lim_idx, src_pos, dst_pos;
               ^
elkscmd/nano/regex/regexec.c:1898:25: style: The scope of the variable 'dst_pos' can be reduced. [variableScope]
  int lim_idx, src_pos, dst_pos;
                        ^
elkscmd/nano/regex/regexec.c:4282:20: style: The scope of the variable 'mid' can be reduced. [variableScope]
  int left, right, mid, last;
                   ^
elkscmd/nano/regex/regcomp.c:232:33: style:inconclusive: Function 're_compile_pattern' argument 1 names different: declaration '__pattern' definition 'pattern'. [funcArgNamesDifferent]
re_compile_pattern (const char *pattern,
                                ^
elkscmd/nano/regex/regex.h:473:52: note: Function 're_compile_pattern' argument 1 names different: declaration '__pattern' definition 'pattern'.
extern const char *re_compile_pattern (const char *__pattern, size_t __length,
                                                   ^
elkscmd/nano/regex/regcomp.c:232:33: note: Function 're_compile_pattern' argument 1 names different: declaration '__pattern' definition 'pattern'.
re_compile_pattern (const char *pattern,
                                ^
elkscmd/nano/regex/regcomp.c:233:14: style:inconclusive: Function 're_compile_pattern' argument 2 names different: declaration '__length' definition 'length'. [funcArgNamesDifferent]
      size_t length,
             ^
elkscmd/nano/regex/regex.h:473:70: note: Function 're_compile_pattern' argument 2 names different: declaration '__length' definition 'length'.
extern const char *re_compile_pattern (const char *__pattern, size_t __length,
                                                                     ^
elkscmd/nano/regex/regcomp.c:233:14: note: Function 're_compile_pattern' argument 2 names different: declaration '__length' definition 'length'.
      size_t length,
             ^
elkscmd/nano/regex/regcomp.c:234:33: style:inconclusive: Function 're_compile_pattern' argument 3 names different: declaration '__buffer' definition 'bufp'. [funcArgNamesDifferent]
      struct re_pattern_buffer *bufp)
                                ^
elkscmd/nano/regex/regex.h:474:38: note: Function 're_compile_pattern' argument 3 names different: declaration '__buffer' definition 'bufp'.
           struct re_pattern_buffer *__buffer);
                                     ^
elkscmd/nano/regex/regcomp.c:234:33: note: Function 're_compile_pattern' argument 3 names different: declaration '__buffer' definition 'bufp'.
      struct re_pattern_buffer *bufp)
                                ^
elkscmd/nano/regex/regcomp.c:272:29: style:inconclusive: Function 're_set_syntax' argument 1 names different: declaration '__syntax' definition 'syntax'. [funcArgNamesDifferent]
re_set_syntax (reg_syntax_t syntax)
                            ^
elkscmd/nano/regex/regex.h:468:49: note: Function 're_set_syntax' argument 1 names different: declaration '__syntax' definition 'syntax'.
extern reg_syntax_t re_set_syntax (reg_syntax_t __syntax);
                                                ^
elkscmd/nano/regex/regcomp.c:272:29: note: Function 're_set_syntax' argument 1 names different: declaration '__syntax' definition 'syntax'.
re_set_syntax (reg_syntax_t syntax)
                            ^
elkscmd/nano/regex/regcomp.c:284:47: style:inconclusive: Function 're_compile_fastmap' argument 1 names different: declaration '__buffer' definition 'bufp'. [funcArgNamesDifferent]
re_compile_fastmap (struct re_pattern_buffer *bufp)
                                              ^
elkscmd/nano/regex/regex.h:480:58: note: Function 're_compile_fastmap' argument 1 names different: declaration '__buffer' definition 'bufp'.
extern int re_compile_fastmap (struct re_pattern_buffer *__buffer);
                                                         ^
elkscmd/nano/regex/regcomp.c:284:47: note: Function 're_compile_fastmap' argument 1 names different: declaration '__buffer' definition 'bufp'.
re_compile_fastmap (struct re_pattern_buffer *bufp)
                                              ^
elkscmd/nano/regex/regcomp.c:483:30: style:inconclusive: Function 'regcomp' argument 1 names different: declaration '__preg' definition 'preg'. [funcArgNamesDifferent]
regcomp (regex_t *__restrict preg,
                             ^
elkscmd/nano/regex/regex.h:562:41: note: Function 'regcomp' argument 1 names different: declaration '__preg' definition 'preg'.
extern int regcomp (regex_t *__restrict __preg,
                                        ^
elkscmd/nano/regex/regcomp.c:483:30: note: Function 'regcomp' argument 1 names different: declaration '__preg' definition 'preg'.
regcomp (regex_t *__restrict preg,
                             ^
elkscmd/nano/regex/regcomp.c:484:26: style:inconclusive: Function 'regcomp' argument 2 names different: declaration '__pattern' definition 'pattern'. [funcArgNamesDifferent]
  const char *__restrict pattern,
                         ^
elkscmd/nano/regex/regex.h:563:30: note: Function 'regcomp' argument 2 names different: declaration '__pattern' definition 'pattern'.
      const char *__restrict __pattern,
                             ^
elkscmd/nano/regex/regcomp.c:484:26: note: Function 'regcomp' argument 2 names different: declaration '__pattern' definition 'pattern'.
  const char *__restrict pattern,
                         ^
elkscmd/nano/regex/regcomp.c:485:7: style:inconclusive: Function 'regcomp' argument 3 names different: declaration '__cflags' definition 'cflags'. [funcArgNamesDifferent]
  int cflags)
      ^
elkscmd/nano/regex/regex.h:564:11: note: Function 'regcomp' argument 3 names different: declaration '__cflags' definition 'cflags'.
      int __cflags);
          ^
elkscmd/nano/regex/regcomp.c:485:7: note: Function 'regcomp' argument 3 names different: declaration '__cflags' definition 'cflags'.
  int cflags)
      ^
elkscmd/nano/regex/regcomp.c:544:14: style:inconclusive: Function 'regerror' argument 1 names different: declaration '__errcode' definition 'errcode'. [funcArgNamesDifferent]
regerror(int errcode, const regex_t *__restrict preg,
             ^
elkscmd/nano/regex/regex.h:571:29: note: Function 'regerror' argument 1 names different: declaration '__errcode' definition 'errcode'.
extern size_t regerror (int __errcode, const regex_t *__restrict __preg,
                            ^
elkscmd/nano/regex/regcomp.c:544:14: note: Function 'regerror' argument 1 names different: declaration '__errcode' definition 'errcode'.
regerror(int errcode, const regex_t *__restrict preg,
             ^
elkscmd/nano/regex/regcomp.c:544:49: style:inconclusive: Function 'regerror' argument 2 names different: declaration '__preg' definition 'preg'. [funcArgNamesDifferent]
regerror(int errcode, const regex_t *__restrict preg,
                                                ^
elkscmd/nano/regex/regex.h:571:66: note: Function 'regerror' argument 2 names different: declaration '__preg' definition 'preg'.
extern size_t regerror (int __errcode, const regex_t *__restrict __preg,
                                                                 ^
elkscmd/nano/regex/regcomp.c:544:49: note: Function 'regerror' argument 2 names different: declaration '__preg' definition 'preg'.
regerror(int errcode, const regex_t *__restrict preg,
                                                ^
elkscmd/nano/regex/regcomp.c:545:20: style:inconclusive: Function 'regerror' argument 3 names different: declaration '__errbuf' definition 'errbuf'. [funcArgNamesDifferent]
  char *__restrict errbuf, size_t errbuf_size)
                   ^
elkscmd/nano/regex/regex.h:572:21: note: Function 'regerror' argument 3 names different: declaration '__errbuf' definition 'errbuf'.
   char *__restrict __errbuf, size_t __errbuf_size);
                    ^
elkscmd/nano/regex/regcomp.c:545:20: note: Function 'regerror' argument 3 names different: declaration '__errbuf' definition 'errbuf'.
  char *__restrict errbuf, size_t errbuf_size)
                   ^
elkscmd/nano/regex/regcomp.c:545:35: style:inconclusive: Function 'regerror' argument 4 names different: declaration '__errbuf_size' definition 'errbuf_size'. [funcArgNamesDifferent]
  char *__restrict errbuf, size_t errbuf_size)
                                  ^
elkscmd/nano/regex/regex.h:572:38: note: Function 'regerror' argument 4 names different: declaration '__errbuf_size' definition 'errbuf_size'.
   char *__restrict __errbuf, size_t __errbuf_size);
                                     ^
elkscmd/nano/regex/regcomp.c:545:35: note: Function 'regerror' argument 4 names different: declaration '__errbuf_size' definition 'errbuf_size'.
  char *__restrict errbuf, size_t errbuf_size)
                                  ^
elkscmd/nano/regex/regcomp.c:648:19: style:inconclusive: Function 'regfree' argument 1 names different: declaration '__preg' definition 'preg'. [funcArgNamesDifferent]
regfree (regex_t *preg)
                  ^
elkscmd/nano/regex/regex.h:574:31: note: Function 'regfree' argument 1 names different: declaration '__preg' definition 'preg'.
extern void regfree (regex_t *__preg);
                              ^
elkscmd/nano/regex/regcomp.c:648:19: note: Function 'regfree' argument 1 names different: declaration '__preg' definition 'preg'.
regfree (regex_t *preg)
                  ^
elkscmd/nano/regex/regcomp.c:2489:27: style:inconclusive: Function 'parse_dup_op' argument 1 names different: declaration 'dup_elem' definition 'elem'. [funcArgNamesDifferent]
parse_dup_op (bin_tree_t *elem, re_string_t *regexp, re_dfa_t *dfa,
                          ^
elkscmd/nano/regex/regcomp.c:73:46: note: Function 'parse_dup_op' argument 1 names different: declaration 'dup_elem' definition 'elem'.
static bin_tree_t *parse_dup_op (bin_tree_t *dup_elem, re_string_t *regexp,
                                             ^
elkscmd/nano/regex/regcomp.c:2489:27: note: Function 'parse_dup_op' argument 1 names different: declaration 'dup_elem' definition 'elem'.
parse_dup_op (bin_tree_t *elem, re_string_t *regexp, re_dfa_t *dfa,
                          ^
elkscmd/nano/regex/regcomp.c:3857:35: style:inconclusive: Function 'duplicate_tree' argument 1 names different: declaration 'src' definition 'root'. [funcArgNamesDifferent]
duplicate_tree (const bin_tree_t *root, re_dfa_t *dfa)
                                  ^
elkscmd/nano/regex/regcomp.c:118:54: note: Function 'duplicate_tree' argument 1 names different: declaration 'src' definition 'root'.
static bin_tree_t *duplicate_tree (const bin_tree_t *src, re_dfa_t *dfa);
                                                     ^
elkscmd/nano/regex/regcomp.c:3857:35: note: Function 'duplicate_tree' argument 1 names different: declaration 'src' definition 'root'.
duplicate_tree (const bin_tree_t *root, re_dfa_t *dfa)
                                  ^
elkscmd/nano/regex/regexec.c:220:28: style:inconclusive: Function 'regexec' argument 1 names different: declaration '__preg' definition 'preg'. [funcArgNamesDifferent]
 const regex_t *__restrict preg,
                           ^
elkscmd/nano/regex/regex.h:566:47: note: Function 'regexec' argument 1 names different: declaration '__preg' definition 'preg'.
extern int regexec (const regex_t *__restrict __preg,
                                              ^
elkscmd/nano/regex/regexec.c:220:28: note: Function 'regexec' argument 1 names different: declaration '__preg' definition 'preg'.
 const regex_t *__restrict preg,
                           ^
elkscmd/nano/regex/regexec.c:221:25: style:inconclusive: Function 'regexec' argument 2 names different: declaration '__cstring' definition 'string'. [funcArgNamesDifferent]
 const char *__restrict string,
                        ^
elkscmd/nano/regex/regex.h:567:30: note: Function 'regexec' argument 2 names different: declaration '__cstring' definition 'string'.
      const char *__restrict __cstring, size_t __nmatch,
                             ^
elkscmd/nano/regex/regexec.c:221:25: note: Function 'regexec' argument 2 names different: declaration '__cstring' definition 'string'.
 const char *__restrict string,
                        ^
elkscmd/nano/regex/regexec.c:222:9: style:inconclusive: Function 'regexec' argument 3 names different: declaration '__nmatch' definition 'nmatch'. [funcArgNamesDifferent]
 size_t nmatch,
        ^
elkscmd/nano/regex/regex.h:567:48: note: Function 'regexec' argument 3 names different: declaration '__nmatch' definition 'nmatch'.
      const char *__restrict __cstring, size_t __nmatch,
                                               ^
elkscmd/nano/regex/regexec.c:222:9: note: Function 'regexec' argument 3 names different: declaration '__nmatch' definition 'nmatch'.
 size_t nmatch,
        ^
elkscmd/nano/regex/regexec.c:223:13: style:inconclusive: Function 'regexec' argument 4 names different: declaration '__pmatch' definition 'pmatch'. [funcArgNamesDifferent]
 regmatch_t pmatch[],
            ^
elkscmd/nano/regex/regex.h:568:18: note: Function 'regexec' argument 4 names different: declaration '__pmatch' definition 'pmatch'.
      regmatch_t __pmatch[__restrict_arr],
                 ^
elkscmd/nano/regex/regexec.c:223:13: note: Function 'regexec' argument 4 names different: declaration '__pmatch' definition 'pmatch'.
 regmatch_t pmatch[],
            ^
elkscmd/nano/regex/regexec.c:224:6: style:inconclusive: Function 'regexec' argument 5 names different: declaration '__eflags' definition 'eflags'. [funcArgNamesDifferent]
 int eflags)
     ^
elkscmd/nano/regex/regex.h:569:11: note: Function 'regexec' argument 5 names different: declaration '__eflags' definition 'eflags'.
      int __eflags);
          ^
elkscmd/nano/regex/regexec.c:224:6: note: Function 'regexec' argument 5 names different: declaration '__eflags' definition 'eflags'.
 int eflags)
     ^
elkscmd/nano/regex/regexec.c:304:37: style:inconclusive: Function 're_match' argument 1 names different: declaration '__buffer' definition 'bufp'. [funcArgNamesDifferent]
re_match (struct re_pattern_buffer *bufp,
                                    ^
elkscmd/nano/regex/regex.h:503:48: note: Function 're_match' argument 1 names different: declaration '__buffer' definition 'bufp'.
extern int re_match (struct re_pattern_buffer *__buffer, const char *__cstring,
                                               ^
elkscmd/nano/regex/regexec.c:304:37: note: Function 're_match' argument 1 names different: declaration '__buffer' definition 'bufp'.
re_match (struct re_pattern_buffer *bufp,
                                    ^
elkscmd/nano/regex/regexec.c:305:16: style:inconclusive: Function 're_match' argument 2 names different: declaration '__cstring' definition 'string'. [funcArgNamesDifferent]
   const char *string,
               ^
elkscmd/nano/regex/regex.h:503:70: note: Function 're_match' argument 2 names different: declaration '__cstring' definition 'string'.
extern int re_match (struct re_pattern_buffer *__buffer, const char *__cstring,
                                                                     ^
elkscmd/nano/regex/regexec.c:305:16: note: Function 're_match' argument 2 names different: declaration '__cstring' definition 'string'.
   const char *string,
               ^
elkscmd/nano/regex/regexec.c:306:8: style:inconclusive: Function 're_match' argument 3 names different: declaration '__length' definition 'length'. [funcArgNamesDifferent]
   int length,
       ^
elkscmd/nano/regex/regex.h:504:12: note: Function 're_match' argument 3 names different: declaration '__length' definition 'length'.
       int __length, int __start, struct re_registers *__regs);
           ^
elkscmd/nano/regex/regexec.c:306:8: note: Function 're_match' argument 3 names different: declaration '__length' definition 'length'.
   int length,
       ^
elkscmd/nano/regex/regexec.c:307:8: style:inconclusive: Function 're_match' argument 4 names different: declaration '__start' definition 'start'. [funcArgNamesDifferent]
   int start,
       ^
elkscmd/nano/regex/regex.h:504:26: note: Function 're_match' argument 4 names different: declaration '__start' definition 'start'.
       int __length, int __start, struct re_registers *__regs);
                         ^
elkscmd/nano/regex/regexec.c:307:8: note: Function 're_match' argument 4 names different: declaration '__start' definition 'start'.
   int start,
       ^
elkscmd/nano/regex/regexec.c:308:25: style:inconclusive: Function 're_match' argument 5 names different: declaration '__regs' definition 'regs'. [funcArgNamesDifferent]
   struct re_registers *regs)
                        ^
elkscmd/nano/regex/regex.h:504:56: note: Function 're_match' argument 5 names different: declaration '__regs' definition 'regs'.
       int __length, int __start, struct re_registers *__regs);
                                                       ^
elkscmd/nano/regex/regexec.c:308:25: note: Function 're_match' argument 5 names different: declaration '__regs' definition 'regs'.
   struct re_registers *regs)
                        ^
elkscmd/nano/regex/regexec.c:317:38: style:inconclusive: Function 're_search' argument 1 names different: declaration '__buffer' definition 'bufp'. [funcArgNamesDifferent]
re_search (struct re_pattern_buffer *bufp,
                                     ^
elkscmd/nano/regex/regex.h:488:49: note: Function 're_search' argument 1 names different: declaration '__buffer' definition 'bufp'.
extern int re_search (struct re_pattern_buffer *__buffer, const char *__cstring,
                                                ^
elkscmd/nano/regex/regexec.c:317:38: note: Function 're_search' argument 1 names different: declaration '__buffer' definition 'bufp'.
re_search (struct re_pattern_buffer *bufp,
                                     ^
elkscmd/nano/regex/regexec.c:318:17: style:inconclusive: Function 're_search' argument 2 names different: declaration '__cstring' definition 'string'. [funcArgNamesDifferent]
    const char *string,
                ^
elkscmd/nano/regex/regex.h:488:71: note: Function 're_search' argument 2 names different: declaration '__cstring' definition 'string'.
extern int re_search (struct re_pattern_buffer *__buffer, const char *__cstring,
                                                                      ^
elkscmd/nano/regex/regexec.c:318:17: note: Function 're_search' argument 2 names different: declaration '__cstring' definition 'string'.
    const char *string,
                ^
elkscmd/nano/regex/regexec.c:319:9: style:inconclusive: Function 're_search' argument 3 names different: declaration '__length' definition 'length'. [funcArgNamesDifferent]
    int length, int start, int range,
        ^
elkscmd/nano/regex/regex.h:489:13: note: Function 're_search' argument 3 names different: declaration '__length' definition 'length'.
        int __length, int __start, int __range,
            ^
elkscmd/nano/regex/regexec.c:319:9: note: Function 're_search' argument 3 names different: declaration '__length' definition 'length'.
    int length, int start, int range,
        ^
elkscmd/nano/regex/regexec.c:319:21: style:inconclusive: Function 're_search' argument 4 names different: declaration '__start' definition 'start'. [funcArgNamesDifferent]
    int length, int start, int range,
                    ^
elkscmd/nano/regex/regex.h:489:27: note: Function 're_search' argument 4 names different: declaration '__start' definition 'start'.
        int __length, int __start, int __range,
                          ^
elkscmd/nano/regex/regexec.c:319:21: note: Function 're_search' argument 4 names different: declaration '__start' definition 'start'.
    int length, int start, int range,
                    ^
elkscmd/nano/regex/regexec.c:319:32: style:inconclusive: Function 're_search' argument 5 names different: declaration '__range' definition 'range'. [funcArgNamesDifferent]
    int length, int start, int range,
                               ^
elkscmd/nano/regex/regex.h:489:40: note: Function 're_search' argument 5 names different: declaration '__range' definition 'range'.
        int __length, int __start, int __range,
                                       ^
elkscmd/nano/regex/regexec.c:319:32: note: Function 're_search' argument 5 names different: declaration '__range' definition 'range'.
    int length, int start, int range,
                               ^
elkscmd/nano/regex/regexec.c:320:26: style:inconclusive: Function 're_search' argument 6 names different: declaration '__regs' definition 'regs'. [funcArgNamesDifferent]
    struct re_registers *regs)
                         ^
elkscmd/nano/regex/regex.h:490:30: note: Function 're_search' argument 6 names different: declaration '__regs' definition 'regs'.
        struct re_registers *__regs);
                             ^
elkscmd/nano/regex/regexec.c:320:26: note: Function 're_search' argument 6 names different: declaration '__regs' definition 'regs'.
    struct re_registers *regs)
                         ^
elkscmd/nano/regex/regexec.c:329:39: style:inconclusive: Function 're_match_2' argument 1 names different: declaration '__buffer' definition 'bufp'. [funcArgNamesDifferent]
re_match_2 (struct re_pattern_buffer *bufp,
                                      ^
elkscmd/nano/regex/regex.h:508:50: note: Function 're_match_2' argument 1 names different: declaration '__buffer' definition 'bufp'.
extern int re_match_2 (struct re_pattern_buffer *__buffer,
                                                 ^
elkscmd/nano/regex/regexec.c:329:39: note: Function 're_match_2' argument 1 names different: declaration '__buffer' definition 'bufp'.
re_match_2 (struct re_pattern_buffer *bufp,
                                      ^
elkscmd/nano/regex/regexec.c:330:18: style:inconclusive: Function 're_match_2' argument 2 names different: declaration '__string1' definition 'string1'. [funcArgNamesDifferent]
     const char *string1, int length1,
                 ^
elkscmd/nano/regex/regex.h:509:22: note: Function 're_match_2' argument 2 names different: declaration '__string1' definition 'string1'.
         const char *__string1, int __length1,
                     ^
elkscmd/nano/regex/regexec.c:330:18: note: Function 're_match_2' argument 2 names different: declaration '__string1' definition 'string1'.
     const char *string1, int length1,
                 ^
elkscmd/nano/regex/regexec.c:330:31: style:inconclusive: Function 're_match_2' argument 3 names different: declaration '__length1' definition 'length1'. [funcArgNamesDifferent]
     const char *string1, int length1,
                              ^
elkscmd/nano/regex/regex.h:509:37: note: Function 're_match_2' argument 3 names different: declaration '__length1' definition 'length1'.
         const char *__string1, int __length1,
                                    ^
elkscmd/nano/regex/regexec.c:330:31: note: Function 're_match_2' argument 3 names different: declaration '__length1' definition 'length1'.
     const char *string1, int length1,
                              ^
elkscmd/nano/regex/regexec.c:331:18: style:inconclusive: Function 're_match_2' argument 4 names different: declaration '__string2' definition 'string2'. [funcArgNamesDifferent]
     const char *string2, int length2, int start,
                 ^
elkscmd/nano/regex/regex.h:510:22: note: Function 're_match_2' argument 4 names different: declaration '__string2' definition 'string2'.
         const char *__string2, int __length2, int __start,
                     ^
elkscmd/nano/regex/regexec.c:331:18: note: Function 're_match_2' argument 4 names different: declaration '__string2' definition 'string2'.
     const char *string2, int length2, int start,
                 ^
elkscmd/nano/regex/regexec.c:331:31: style:inconclusive: Function 're_match_2' argument 5 names different: declaration '__length2' definition 'length2'. [funcArgNamesDifferent]
     const char *string2, int length2, int start,
                              ^
elkscmd/nano/regex/regex.h:510:37: note: Function 're_match_2' argument 5 names different: declaration '__length2' definition 'length2'.
         const char *__string2, int __length2, int __start,
                                    ^
elkscmd/nano/regex/regexec.c:331:31: note: Function 're_match_2' argument 5 names different: declaration '__length2' definition 'length2'.
     const char *string2, int length2, int start,
                              ^
elkscmd/nano/regex/regexec.c:331:44: style:inconclusive: Function 're_match_2' argument 6 names different: declaration '__start' definition 'start'. [funcArgNamesDifferent]
     const char *string2, int length2, int start,
                                           ^
elkscmd/nano/regex/regex.h:510:52: note: Function 're_match_2' argument 6 names different: declaration '__start' definition 'start'.
         const char *__string2, int __length2, int __start,
                                                   ^
elkscmd/nano/regex/regexec.c:331:44: note: Function 're_match_2' argument 6 names different: declaration '__start' definition 'start'.
     const char *string2, int length2, int start,
                                           ^
elkscmd/nano/regex/regexec.c:332:27: style:inconclusive: Function 're_match_2' argument 7 names different: declaration '__regs' definition 'regs'. [funcArgNamesDifferent]
     struct re_registers *regs, int stop)
                          ^
elkscmd/nano/regex/regex.h:511:31: note: Function 're_match_2' argument 7 names different: declaration '__regs' definition 'regs'.
         struct re_registers *__regs, int __stop);
                              ^
elkscmd/nano/regex/regexec.c:332:27: note: Function 're_match_2' argument 7 names different: declaration '__regs' definition 'regs'.
     struct re_registers *regs, int stop)
                          ^
elkscmd/nano/regex/regexec.c:332:37: style:inconclusive: Function 're_match_2' argument 8 names different: declaration '__stop' definition 'stop'. [funcArgNamesDifferent]
     struct re_registers *regs, int stop)
                                    ^
elkscmd/nano/regex/regex.h:511:43: note: Function 're_match_2' argument 8 names different: declaration '__stop' definition 'stop'.
         struct re_registers *__regs, int __stop);
                                          ^
elkscmd/nano/regex/regexec.c:332:37: note: Function 're_match_2' argument 8 names different: declaration '__stop' definition 'stop'.
     struct re_registers *regs, int stop)
                                    ^
elkscmd/nano/regex/regexec.c:342:40: style:inconclusive: Function 're_search_2' argument 1 names different: declaration '__buffer' definition 'bufp'. [funcArgNamesDifferent]
re_search_2 (struct re_pattern_buffer *bufp,
                                       ^
elkscmd/nano/regex/regex.h:495:51: note: Function 're_search_2' argument 1 names different: declaration '__buffer' definition 'bufp'.
extern int re_search_2 (struct re_pattern_buffer *__buffer,
                                                  ^
elkscmd/nano/regex/regexec.c:342:40: note: Function 're_search_2' argument 1 names different: declaration '__buffer' definition 'bufp'.
re_search_2 (struct re_pattern_buffer *bufp,
                                       ^
elkscmd/nano/regex/regexec.c:343:19: style:inconclusive: Function 're_search_2' argument 2 names different: declaration '__string1' definition 'string1'. [funcArgNamesDifferent]
      const char *string1, int length1,
                  ^
elkscmd/nano/regex/regex.h:496:16: note: Function 're_search_2' argument 2 names different: declaration '__string1' definition 'string1'.
   const char *__string1, int __length1,
               ^
elkscmd/nano/regex/regexec.c:343:19: note: Function 're_search_2' argument 2 names different: declaration '__string1' definition 'string1'.
      const char *string1, int length1,
                  ^
elkscmd/nano/regex/regexec.c:343:32: style:inconclusive: Function 're_search_2' argument 3 names different: declaration '__length1' definition 'length1'. [funcArgNamesDifferent]
      const char *string1, int length1,
                               ^
elkscmd/nano/regex/regex.h:496:31: note: Function 're_search_2' argument 3 names different: declaration '__length1' definition 'length1'.
   const char *__string1, int __length1,
                              ^
elkscmd/nano/regex/regexec.c:343:32: note: Function 're_search_2' argument 3 names different: declaration '__length1' definition 'length1'.
      const char *string1, int length1,
                               ^
elkscmd/nano/regex/regexec.c:344:19: style:inconclusive: Function 're_search_2' argument 4 names different: declaration '__string2' definition 'string2'. [funcArgNamesDifferent]
      const char *string2, int length2, int start,
                  ^
elkscmd/nano/regex/regex.h:497:16: note: Function 're_search_2' argument 4 names different: declaration '__string2' definition 'string2'.
   const char *__string2, int __length2, int __start,
               ^
elkscmd/nano/regex/regexec.c:344:19: note: Function 're_search_2' argument 4 names different: declaration '__string2' definition 'string2'.
      const char *string2, int length2, int start,
                  ^
elkscmd/nano/regex/regexec.c:344:32: style:inconclusive: Function 're_search_2' argument 5 names different: declaration '__length2' definition 'length2'. [funcArgNamesDifferent]
      const char *string2, int length2, int start,
                               ^
elkscmd/nano/regex/regex.h:497:31: note: Function 're_search_2' argument 5 names different: declaration '__length2' definition 'length2'.
   const char *__string2, int __length2, int __start,
                              ^
elkscmd/nano/regex/regexec.c:344:32: note: Function 're_search_2' argument 5 names different: declaration '__length2' definition 'length2'.
      const char *string2, int length2, int start,
                               ^
elkscmd/nano/regex/regexec.c:344:45: style:inconclusive: Function 're_search_2' argument 6 names different: declaration '__start' definition 'start'. [funcArgNamesDifferent]
      const char *string2, int length2, int start,
                                            ^
elkscmd/nano/regex/regex.h:497:46: note: Function 're_search_2' argument 6 names different: declaration '__start' definition 'start'.
   const char *__string2, int __length2, int __start,
                                             ^
elkscmd/nano/regex/regexec.c:344:45: note: Function 're_search_2' argument 6 names different: declaration '__start' definition 'start'.
      const char *string2, int length2, int start,
                                            ^
elkscmd/nano/regex/regexec.c:345:11: style:inconclusive: Function 're_search_2' argument 7 names different: declaration '__range' definition 'range'. [funcArgNamesDifferent]
      int range, struct re_registers *regs,  int stop)
          ^
elkscmd/nano/regex/regex.h:498:8: note: Function 're_search_2' argument 7 names different: declaration '__range' definition 'range'.
   int __range, struct re_registers *__regs, int __stop);
       ^
elkscmd/nano/regex/regexec.c:345:11: note: Function 're_search_2' argument 7 names different: declaration '__range' definition 'range'.
      int range, struct re_registers *regs,  int stop)
          ^
elkscmd/nano/regex/regexec.c:345:39: style:inconclusive: Function 're_search_2' argument 8 names different: declaration '__regs' definition 'regs'. [funcArgNamesDifferent]
      int range, struct re_registers *regs,  int stop)
                                      ^
elkscmd/nano/regex/regex.h:498:38: note: Function 're_search_2' argument 8 names different: declaration '__regs' definition 'regs'.
   int __range, struct re_registers *__regs, int __stop);
                                     ^
elkscmd/nano/regex/regexec.c:345:39: note: Function 're_search_2' argument 8 names different: declaration '__regs' definition 'regs'.
      int range, struct re_registers *regs,  int stop)
                                      ^
elkscmd/nano/regex/regexec.c:345:50: style:inconclusive: Function 're_search_2' argument 9 names different: declaration '__stop' definition 'stop'. [funcArgNamesDifferent]
      int range, struct re_registers *regs,  int stop)
                                                 ^
elkscmd/nano/regex/regex.h:498:50: note: Function 're_search_2' argument 9 names different: declaration '__stop' definition 'stop'.
   int __range, struct re_registers *__regs, int __stop);
                                                 ^
elkscmd/nano/regex/regexec.c:345:50: note: Function 're_search_2' argument 9 names different: declaration '__stop' definition 'stop'.
      int range, struct re_registers *regs,  int stop)
                                                 ^
elkscmd/nano/regex/regexec.c:565:45: style:inconclusive: Function 're_set_registers' argument 1 names different: declaration '__buffer' definition 'bufp'. [funcArgNamesDifferent]
re_set_registers (struct re_pattern_buffer *bufp,
                                            ^
elkscmd/nano/regex/regex.h:526:57: note: Function 're_set_registers' argument 1 names different: declaration '__buffer' definition 'bufp'.
extern void re_set_registers (struct re_pattern_buffer *__buffer,
                                                        ^
elkscmd/nano/regex/regexec.c:565:45: note: Function 're_set_registers' argument 1 names different: declaration '__buffer' definition 'bufp'.
re_set_registers (struct re_pattern_buffer *bufp,
                                            ^
elkscmd/nano/regex/regexec.c:566:26: style:inconclusive: Function 're_set_registers' argument 2 names different: declaration '__regs' definition 'regs'. [funcArgNamesDifferent]
    struct re_registers *regs,
                         ^
elkscmd/nano/regex/regex.h:527:31: note: Function 're_set_registers' argument 2 names different: declaration '__regs' definition 'regs'.
         struct re_registers *__regs,
                              ^
elkscmd/nano/regex/regexec.c:566:26: note: Function 're_set_registers' argument 2 names different: declaration '__regs' definition 'regs'.
    struct re_registers *regs,
                         ^
elkscmd/nano/regex/regexec.c:567:14: style:inconclusive: Function 're_set_registers' argument 3 names different: declaration '__num_regs' definition 'num_regs'. [funcArgNamesDifferent]
    unsigned num_regs,
             ^
elkscmd/nano/regex/regex.h:528:23: note: Function 're_set_registers' argument 3 names different: declaration '__num_regs' definition 'num_regs'.
         unsigned int __num_regs,
                      ^
elkscmd/nano/regex/regexec.c:567:14: note: Function 're_set_registers' argument 3 names different: declaration '__num_regs' definition 'num_regs'.
    unsigned num_regs,
             ^
elkscmd/nano/regex/regexec.c:568:15: style:inconclusive: Function 're_set_registers' argument 4 names different: declaration '__starts' definition 'starts'. [funcArgNamesDifferent]
    regoff_t *starts,
              ^
elkscmd/nano/regex/regex.h:529:20: note: Function 're_set_registers' argument 4 names different: declaration '__starts' definition 'starts'.
         regoff_t *__starts, regoff_t *__ends);
                   ^
elkscmd/nano/regex/regexec.c:568:15: note: Function 're_set_registers' argument 4 names different: declaration '__starts' definition 'starts'.
    regoff_t *starts,
              ^
elkscmd/nano/regex/regexec.c:569:15: style:inconclusive: Function 're_set_registers' argument 5 names different: declaration '__ends' definition 'ends'. [funcArgNamesDifferent]
    regoff_t *ends)
              ^
elkscmd/nano/regex/regex.h:529:40: note: Function 're_set_registers' argument 5 names different: declaration '__ends' definition 'ends'.
         regoff_t *__starts, regoff_t *__ends);
                                       ^
elkscmd/nano/regex/regexec.c:569:15: note: Function 're_set_registers' argument 5 names different: declaration '__ends' definition 'ends'.
    regoff_t *ends)
              ^
elkscmd/nano/regex/regexec.c:2012:27: style:inconclusive: Function 'check_dst_limits_calc_pos' argument 4 names different: declaration 'node' definition 'from_node'. [funcArgNamesDifferent]
      int subexp_idx, int from_node, int str_idx,
                          ^
elkscmd/nano/regex/regexec.c:107:15: note: Function 'check_dst_limits_calc_pos' argument 4 names different: declaration 'node' definition 'from_node'.
          int node, int str_idx,
              ^
elkscmd/nano/regex/regexec.c:2012:27: note: Function 'check_dst_limits_calc_pos' argument 4 names different: declaration 'node' definition 'from_node'.
      int subexp_idx, int from_node, int str_idx,
                          ^
elkscmd/nano/regex/regexec.c:3551:21: style:inconclusive: Function 'group_nodes_into_DFAstates' argument 3 names different: declaration 'states_node' definition 'dests_node'. [funcArgNamesDifferent]
       re_node_set *dests_node, bitset_t *dests_ch)
                    ^
elkscmd/nano/regex/regexec.c:194:25: note: Function 'group_nodes_into_DFAstates' argument 3 names different: declaration 'states_node' definition 'dests_node'.
           re_node_set *states_node,
                        ^
elkscmd/nano/regex/regexec.c:3551:21: note: Function 'group_nodes_into_DFAstates' argument 3 names different: declaration 'states_node' definition 'dests_node'.
       re_node_set *dests_node, bitset_t *dests_ch)
                    ^
elkscmd/nano/regex/regexec.c:4158:37: style:inconclusive: Function 'match_ctx_init' argument 1 names different: declaration 'cache' definition 'mctx'. [funcArgNamesDifferent]
match_ctx_init (re_match_context_t *mctx, int eflags, int n)
                                    ^
elkscmd/nano/regex/regexec.c:20:58: note: Function 'match_ctx_init' argument 1 names different: declaration 'cache' definition 'mctx'.
static reg_errcode_t match_ctx_init (re_match_context_t *cache, int eflags,
                                                         ^
elkscmd/nano/regex/regexec.c:4158:37: note: Function 'match_ctx_init' argument 1 names different: declaration 'cache' definition 'mctx'.
match_ctx_init (re_match_context_t *mctx, int eflags, int n)
                                    ^
elkscmd/nano/regex/regexec.c:4216:37: style:inconclusive: Function 'match_ctx_free' argument 1 names different: declaration 'cache' definition 'mctx'. [funcArgNamesDifferent]
match_ctx_free (re_match_context_t *mctx)
                                    ^
elkscmd/nano/regex/regexec.c:23:49: note: Function 'match_ctx_free' argument 1 names different: declaration 'cache' definition 'mctx'.
static void match_ctx_free (re_match_context_t *cache) internal_function;
                                                ^
elkscmd/nano/regex/regexec.c:4216:37: note: Function 'match_ctx_free' argument 1 names different: declaration 'cache' definition 'mctx'.
match_ctx_free (re_match_context_t *mctx)
                                    ^
elkscmd/nano/regex/regexec.c:4231:42: style:inconclusive: Function 'match_ctx_add_entry' argument 1 names different: declaration 'cache' definition 'mctx'. [funcArgNamesDifferent]
match_ctx_add_entry (re_match_context_t *mctx, int node, int str_idx, int from,
                                         ^
elkscmd/nano/regex/regexec.c:24:63: note: Function 'match_ctx_add_entry' argument 1 names different: declaration 'cache' definition 'mctx'.
static reg_errcode_t match_ctx_add_entry (re_match_context_t *cache, int node,
                                                              ^
elkscmd/nano/regex/regexec.c:4231:42: note: Function 'match_ctx_add_entry' argument 1 names different: declaration 'cache' definition 'mctx'.
match_ctx_add_entry (re_match_context_t *mctx, int node, int str_idx, int from,
                                         ^
elkscmd/nano/regex/regcomp.c:1037:17: style: Local variable 'err' shadows outer variable [shadowVariable]
  reg_errcode_t err = re_node_set_merge (&init_nodes,
                ^
elkscmd/nano/regex/regcomp.c:997:17: note: Shadowed declaration
  reg_errcode_t err;
                ^
elkscmd/nano/regex/regcomp.c:1037:17: note: Shadow variable
  reg_errcode_t err = re_node_set_merge (&init_nodes,
                ^
elkscmd/nano/regex/regcomp.c:3860:15: style: Variable 'dup_root' is not assigned a value. [unassignedVariable]
  bin_tree_t *dup_root;
              ^
elkscmd/nano/regex/regcomp.c:3704:11: style: Condition 'mbc_tree!=NULL' is always true [knownConditionTrueFalse]
      if (BE (mbc_tree != NULL, 1))
          ^
elkscmd/nano/regex/regcomp.c:3700:11: note: Assuming that condition 'mbc_tree==NULL' is not redundant
      if (BE (mbc_tree == NULL, 0))
          ^
elkscmd/nano/regex/regcomp.c:3704:11: note: Condition 'mbc_tree!=NULL' is always true
      if (BE (mbc_tree != NULL, 1))
          ^
elkscmd/nano/regex/regex_internal.c:219:13: style: The scope of the variable 'prev_st' can be reduced. [variableScope]
  mbstate_t prev_st;
            ^
elkscmd/nano/regex/regex_internal.c:220:26: style: The scope of the variable 'remain_len' can be reduced. [variableScope]
  int byte_idx, end_idx, remain_len;
                         ^
elkscmd/nano/regex/regex_internal.c:221:10: style: The scope of the variable 'mbclen' can be reduced. [variableScope]
  size_t mbclen;
         ^
elkscmd/nano/regex/regex_internal.c:236:11: style: The scope of the variable 'ch' can be reduced. [variableScope]
   int i, ch;
          ^
elkscmd/nano/regex/regex_internal.c:376:13: style: The scope of the variable 'ch' can be reduced. [variableScope]
     int i, ch;
            ^
elkscmd/nano/regex/regex_internal.c:497:13: style: The scope of the variable 'prev_st' can be reduced. [variableScope]
  mbstate_t prev_st;
            ^
elkscmd/nano/regex/regex_internal.c:499:10: style: The scope of the variable 'mbclen' can be reduced. [variableScope]
  size_t mbclen;
         ^
elkscmd/nano/regex/regex_internal.c:740:20: style: The scope of the variable 'buf' can be reduced. [variableScope]
     unsigned char buf[6];
                   ^
elkscmd/nano/regex/regcomp.c:370:8: style: The scope of the variable 'i' can be reduced. [variableScope]
   int i;
       ^
elkscmd/nano/regex/regexec.c:3741:35: style:inconclusive: Function 'check_node_accept_bytes' argument 4 names different: declaration 'idx' definition 'str_idx'. [funcArgNamesDifferent]
    const re_string_t *input, int str_idx)
                                  ^
elkscmd/nano/regex/regexec.c:184:39: note: Function 'check_node_accept_bytes' argument 4 names different: declaration 'idx' definition 'str_idx'.
        const re_string_t *input, int idx)
                                      ^
elkscmd/nano/regex/regexec.c:3741:35: note: Function 'check_node_accept_bytes' argument 4 names different: declaration 'idx' definition 'str_idx'.
    const re_string_t *input, int str_idx)
                                  ^
elkscmd/nano/regex/regexec.c:3830:15: style: Local variable 'wc' shadows outer variable [shadowVariable]
      wchar_t wc = ((cset->nranges || cset->nchar_classes || cset->nmbchars)
              ^
elkscmd/nano/regex/regexec.c:3746:10: note: Shadowed declaration
  wint_t wc;
         ^
elkscmd/nano/regex/regexec.c:3830:15: note: Shadow variable
      wchar_t wc = ((cset->nranges || cset->nchar_classes || cset->nmbchars)
              ^
elkscmd/nano/regex/regexec.c:3358:11: style: Condition 'dests_node_malloced' is always true [knownConditionTrueFalse]
      if (dests_node_malloced)
          ^
elkscmd/nano/regex/regexec.c:3345:29: note: Assignment 'dests_node_malloced=1', assigned value is 1
      dests_node_malloced = true;
                            ^
elkscmd/nano/regex/regexec.c:3358:11: note: Condition 'dests_node_malloced' is always true
      if (dests_node_malloced)
          ^
elkscmd/nano/regex/regexec.c:1428:37: warning: Obsolete function 'alloca' called. In C99 and later it is recommended to use a variable length array instead. [allocaCalled]
    prev_idx_match = (regmatch_t *) alloca (nmatch * sizeof (regmatch_t));
                                    ^
elkscmd/nano/regex/regexec.c:3338:42: warning: Obsolete function 'alloca' called. In C99 and later it is recommended to use a variable length array instead. [allocaCalled]
    dests_alloc = (struct dests_alloc *) alloca (sizeof (struct dests_alloc));
                                         ^
elkscmd/nano/regex/regexec.c:3385:7: warning: Obsolete function 'alloca' called. In C99 and later it is recommended to use a variable length array instead. [allocaCalled]
      alloca (ndests * 3 * sizeof (re_dfastate_t *));
      ^
elkscmd/nano/regex/regcomp.c:3605:0: information: Skipping configuration 'HAVE_ISBLANK;_LIBC;isblank' since the value of 'isblank' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
    BUILD_CHARCLASS_LOOP (isblank);
^
elkscmd/nano/regex/regex_internal.h:698:23: error: syntax error [syntaxError]
  __libc_lock_define (, lock)
                      ^
elkscmd/nano/regex/regexec.c:1482:12: style: Condition 'prev_idx_match_malloced' is always true [knownConditionTrueFalse]
       if (prev_idx_match_malloced)
           ^
elkscmd/nano/regex/regexec.c:1438:33: note: Assignment 'prev_idx_match_malloced=1', assigned value is 1
      prev_idx_match_malloced = 1;
                                ^
elkscmd/nano/regex/regexec.c:1482:12: note: Condition 'prev_idx_match_malloced' is always true
       if (prev_idx_match_malloced)
           ^
elkscmd/nano/regex/regexec.c:1493:12: style: Condition 'prev_idx_match_malloced' is always true [knownConditionTrueFalse]
       if (prev_idx_match_malloced)
           ^
elkscmd/nano/regex/regexec.c:1438:33: note: Assignment 'prev_idx_match_malloced=1', assigned value is 1
      prev_idx_match_malloced = 1;
                                ^
elkscmd/nano/regex/regexec.c:1479:11: note: Assuming condition is false
   if (BE (cur_node == -2, 0))
          ^
elkscmd/nano/regex/regexec.c:1493:12: note: Condition 'prev_idx_match_malloced' is always true
       if (prev_idx_match_malloced)
           ^
elkscmd/nano/regex/regexec.c:4006:8: style: The scope of the variable 'mbs_cnt' can be reduced. [variableScope]
   int mbs_cnt, found = 0;
       ^
elkscmd/prems/b_prem/ENIG.TEST/enbit.c:26:5: warning: Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead. [getsCalled]
    gets( b );
    ^
elkscmd/prems/b_prem/ENIG.TEST/enbit.c:39:5: warning: Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead. [getsCalled]
    gets( _b_ );
    ^
elkscmd/prems/b_prem/ENIG.TEST/enbit.c:53:5: warning: Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead. [getsCalled]
    gets( _b_ );
    ^
elkscmd/prems/b_prem/ENIG.TEST/enbit.c:65:5: warning: Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead. [getsCalled]
    gets( _b_ );
    ^
elkscmd/prems/b_prem/ENIG.TEST/enbit.c:81:5: warning: Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead. [getsCalled]
    gets( _b_ );
    ^
elkscmd/prems/prem/mkre_foli.c:17:21: style: The scope of the variable 'nod' can be reduced. [variableScope]
    register NODNUM nod, patr;
                    ^
elkscmd/prems/prem/mkre_foli.c:17:26: style: The scope of the variable 'patr' can be reduced. [variableScope]
    register NODNUM nod, patr;
                         ^
elkscmd/prems/prem/mkre_nod.c:17:21: style: The scope of the variable 'nod' can be reduced. [variableScope]
    register NODNUM nod;
                    ^
elkscmd/prems/prem/sekv_niv.c:19:22: style: The scope of the variable 'i' can be reduced. [variableScope]
    register HASHNUM i;
                     ^
elkscmd/prems/prem/serch.c:33:25: style: The scope of the variable 'f' can be reduced. [variableScope]
    register FRAZ       f; /* fina pozicio en la nuna nodo */
                        ^
elkscmd/prems/prem/serch.c:34:25: style: The scope of the variable 'l' can be reduced. [variableScope]
    register FRAZ       l; /* litero */
                        ^
elkscmd/prems/prem/x_malkod.c:34:36: style: The scope of the variable 'dm' can be reduced. [variableScope]
    register struct x_mkalk * d, * dm;
                                   ^
elkscmd/prems/pres/flparc.c:61:2: warning: %d in format string (no. 1) requires 'int' but the argument type is 'signed long'. [invalidPrintfArgType_sint]
 fprintf( stderr, ediag(
 ^
elkscmd/prems/pres/flparc.c:92:2: warning: %d in format string (no. 1) requires 'int' but the argument type is 'signed long'. [invalidPrintfArgType_sint]
 fprintf( stderr, ediag(
 ^
elkscmd/prems/pres/flparc.c:97:28: warning: %d in format string (no. 1) requires 'int' but the argument type is 'signed long'. [invalidPrintfArgType_sint]
    if ( num > 0 && verb ) fprintf( stderr, ediag(
                           ^
elkscmd/prems/pres/flparc.c:171:6: warning: %d in format string (no. 1) requires 'int' but the argument type is 'signed long'. [invalidPrintfArgType_sint]
     fprintf( stderr, ediag(
     ^
elkscmd/prems/pres/flparc.c:190:6: warning: %d in format string (no. 1) requires 'int' but the argument type is 'signed long'. [invalidPrintfArgType_sint]
     fprintf( stderr, ediag(
     ^
elkscmd/prems/pres/flparc.c:207:18: style: The scope of the variable 'c' can be reduced. [variableScope]
    register int c;
                 ^
elkscmd/prems/pres/flparc.c:210:9: style: The scope of the variable 'enlon' can be reduced. [variableScope]
    int enlon;  /* input block length */
        ^
elkscmd/prems/pres/flparc.c:211:9: style: The scope of the variable 'ellon' can be reduced. [variableScope]
    int ellon;  /* output block length */
        ^
elkscmd/prems/pres/flparc.c:212:18: style: The scope of the variable 'b_n' can be reduced. [variableScope]
    unsigned int b_n;    /* current block number */
                 ^
elkscmd/prems/pres/flparc.c:274:21: style: The scope of the variable 'j' can be reduced. [variableScope]
    register int i, j;
                    ^
elkscmd/prems/pres/flparc.c:327:11: style: The scope of the variable 'stato' can be reduced. [variableScope]
    int (*stato)();
          ^
elkscmd/prems/pres/flparc.c:435:18: style: The scope of the variable 'kod' can be reduced. [variableScope]
    register int kod;
                 ^
elkscmd/prems/pres/pres.c:136:17: error: Invalid putchar() argument nr 1. The value is -68 but the valid values are '0:'. [invalidFunctionArg]
        putchar(~c);
                ^
elkscmd/prems/pres/pres.c:126:50: note: Assignment 'c=0100|(enlon<8192?2:0)|1', assigned value is 67
            c = BMARK | (enlon<BLON ? LASTA : 0) | PREMITA;
                                                 ^
elkscmd/prems/pres/pres.c:136:17: note: Invalid argument
        putchar(~c);
                ^
elkscmd/prems/pres/pres.c:464:19: style: Condition '*filelist!=NULL' is always false [knownConditionTrueFalse]
    if (*filelist != NULL) {
                  ^
elkscmd/prems/pres/pres.c:413:17: note: Assignment '*filelist=NULL', assigned value is 0
    *filelist = NULL;
                ^
elkscmd/prems/pres/pres.c:464:19: note: Condition '*filelist!=NULL' is always false
    if (*filelist != NULL) {
                  ^
elkscmd/prems/pres/pres.c:158:9: warning: %d in format string (no. 1) requires 'int' but the argument type is 'signed long'. [invalidPrintfArgType_sint]
        fprintf(stderr, "Compression: %d%%",
        ^
elkscmd/prems/pres/pres.c:100:18: style: The scope of the variable 'c' can be reduced. [variableScope]
    register int c;
                 ^
elkscmd/prems/pres/pres.c:103:9: style: The scope of the variable 'enlon' can be reduced. [variableScope]
    int enlon;  /* input block length */
        ^
elkscmd/prems/pres/pres.c:104:9: style: The scope of the variable 'ellon' can be reduced. [variableScope]
    int ellon;  /* output block length */
        ^
elkscmd/prems/pres/pres.c:105:18: style: The scope of the variable 'b_n' can be reduced. [variableScope]
    unsigned int b_n;    /* current block number */
                 ^
elkscmd/prems/pres/pres.c:187:21: style: The scope of the variable 'j' can be reduced. [variableScope]
    register int i, j;
                    ^
elkscmd/prems/pres/pres.c:239:11: style: The scope of the variable 'stato' can be reduced. [variableScope]
    int (*stato)();
          ^
elkscmd/prems/pres/pres.c:321:18: style: The scope of the variable 'kod' can be reduced. [variableScope]
    register int kod;
                 ^
elkscmd/prems/pres/pres.c:501:0: information: Skipping configuration 'MAXFNAMEC' since the value of 'MAXFNAMEC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
                if (strlen(cp) > MAXFNAMEC-2) {
^
elkscmd/romprg/pc-main.c:291:16: style:inconclusive: Boolean expression '(4096UL-1)!=0' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
      if(start & (PROGRAMMER_SECTOR_SIZE - 1) != 0) {
               ^
elkscmd/romprg/pc-main.c:296:14: style:inconclusive: Boolean expression '(4096UL-1)!=0' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
      if(end & (PROGRAMMER_SECTOR_SIZE - 1) != 0) {
             ^
elkscmd/romprg/pc-main.c:291:9: style: Suspicious condition (bitwise operator + comparison); Clarify expression with parentheses. [clarifyCondition]
      if(start & (PROGRAMMER_SECTOR_SIZE - 1) != 0) {
        ^
elkscmd/romprg/pc-main.c:291:16: style: Boolean result is used in bitwise operation. Clarify expression with parentheses. [clarifyCondition]
      if(start & (PROGRAMMER_SECTOR_SIZE - 1) != 0) {
               ^
elkscmd/romprg/pc-main.c:296:9: style: Suspicious condition (bitwise operator + comparison); Clarify expression with parentheses. [clarifyCondition]
      if(end & (PROGRAMMER_SECTOR_SIZE - 1) != 0) {
        ^
elkscmd/romprg/pc-main.c:296:14: style: Boolean result is used in bitwise operation. Clarify expression with parentheses. [clarifyCondition]
      if(end & (PROGRAMMER_SECTOR_SIZE - 1) != 0) {
             ^
elkscmd/romprg/pc-main.c:375:1: style: Label 'err' is not used. [unusedLabel]
err:
^
elkscmd/romprg/pc-main.c:111:13: style: Local variable 'err' shadows outer variable [shadowVariable]
    uint8_t err = command_read(start, count, buf);
            ^
elkscmd/romprg/pc-main.c:104:7: note: Shadowed declaration
  int err = 0;
      ^
elkscmd/romprg/pc-main.c:111:13: note: Shadow variable
    uint8_t err = command_read(start, count, buf);
            ^
elkscmd/romprg/pc-main.c:171:13: style: Local variable 'err' shadows outer variable [shadowVariable]
    uint8_t err = command_write(start, count, buf);
            ^
elkscmd/romprg/pc-main.c:151:7: note: Shadowed declaration
  int err = 0;
      ^
elkscmd/romprg/pc-main.c:171:13: note: Shadow variable
    uint8_t err = command_write(start, count, buf);
            ^
elkscmd/romprg/pc-main.c:228:13: style: Local variable 'err' shadows outer variable [shadowVariable]
    uint8_t err = command_read(start, count, rom_buf);
            ^
elkscmd/romprg/pc-main.c:206:7: note: Shadowed declaration
  int err = 0;
      ^
elkscmd/romprg/pc-main.c:228:13: note: Shadow variable
    uint8_t err = command_read(start, count, rom_buf);
            ^
elkscmd/sash/cmd_ed.c:99:6: style: The scope of the variable 'len' can be reduced. [variableScope]
 int len;
     ^
elkscmd/sash/cmd_ed.c:594:6: style: The scope of the variable 'len' can be reduced. [variableScope]
 int len;
     ^
elkscmd/sash/cmd_grep.c:22:8: style: The scope of the variable 'fp' can be reduced. [variableScope]
 FILE *fp;
       ^
elkscmd/sash/cmd_grep.c:24:8: style: The scope of the variable 'name' can be reduced. [variableScope]
 char *name;
       ^
elkscmd/sash/cmd_grep.c:112:8: style: The scope of the variable 'cp1' can be reduced. [variableScope]
 char *cp1;
       ^
elkscmd/sash/cmd_grep.c:113:8: style: The scope of the variable 'cp2' can be reduced. [variableScope]
 char *cp2;
       ^
elkscmd/sash/cmd_history.c:277:8: warning: Either the condition 'h<10' is redundant or the array 'hnum[10]' is accessed at index 10, which is out of bounds. [arrayIndexOutOfBoundsCond]
   hnum[h] = '\0';
       ^
elkscmd/sash/cmd_history.c:275:30: note: Assuming that condition 'h<10' is not redundant
   while (isalpha(*pos) && h < 10)  /* max 9 chars to search */
                             ^
elkscmd/sash/cmd_history.c:277:8: note: Array index out of bounds
   hnum[h] = '\0';
       ^
elkscmd/sash/cmd_history.c:27:6: style: The scope of the variable 'k' can be reduced. [variableScope]
 int k = 0;
     ^
elkscmd/sash/cmd_history.c:92:6: style: The scope of the variable 'idx' can be reduced. [variableScope]
 int idx, i;
     ^
elkscmd/sash/cmd_history.c:114:22: style: The scope of the variable 'psub' can be reduced. [variableScope]
        char *pmid, *psub, *pend, *tmp;
                     ^
elkscmd/sash/cmd_history.c:114:29: style: The scope of the variable 'pend' can be reduced. [variableScope]
        char *pmid, *psub, *pend, *tmp;
                            ^
elkscmd/sash/cmd_history.c:207:7: style: The scope of the variable 'buf' can be reduced. [variableScope]
 char buf[CMDBUF];
      ^
elkscmd/sash/cmd_history.c:235:18: style: Variable 'prev_cmd' is assigned a value that is never used. [unreadVariable]
        prev_cmd = 0;
                 ^
elkscmd/sash/cmd_history.c:273:8: style: Variable 'prev' is assigned a value that is never used. [unreadVariable]
  prev = pos;
       ^
elkscmd/sash/cmd_history.c:185:9: portability: %d in format string (no. 1) requires 'int' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]
        fprintf(stderr,"len %d |", strlen(c));
        ^
elkscmd/sash/cmd_ls.c:57:8: style: The scope of the variable 'endslash' can be reduced. [variableScope]
 BOOL  endslash;
       ^
elkscmd/sash/cmd_ls.c:204:8: style: Unused variable: len [unusedVariable]
 long  len;
       ^
elkscmd/sash/cmd_ls.c:268:0: information: Skipping configuration 'CMD_LS;S_ISLNK' since the value of 'S_ISLNK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 if ((flags & LSF_LONG) && S_ISLNK(statbuf->st_mode)) {
^
elkscmd/sash/cmd_tar.c:327:6: style: The scope of the variable 'cc' can be reduced. [variableScope]
 int cc;
     ^
elkscmd/sash/cmd_tar.c:366:8: style: The scope of the variable 'cpold' can be reduced. [variableScope]
 char *cpold;
       ^
elkscmd/sash/cmds.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 23 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/sash/cmds.c:295:9: style: The scope of the variable 'name' can be reduced. [variableScope]
 char  *name;
        ^
elkscmd/sash/cmds.c:296:7: style: The scope of the variable 'fd' can be reduced. [variableScope]
 int  fd;
      ^
elkscmd/sash/cmds.c:323:8: style: The scope of the variable 'srcname' can be reduced. [variableScope]
 char *srcname;
       ^
elkscmd/sash/cmds.c:430:8: style: The scope of the variable 'srcname' can be reduced. [variableScope]
 char *srcname;
       ^
elkscmd/sash/cmds.c:431:8: style: The scope of the variable 'destname' can be reduced. [variableScope]
 char *destname;
       ^
elkscmd/sash/cmds.c:458:8: style: The scope of the variable 'str' can be reduced. [variableScope]
 char *str;
       ^
elkscmd/sash/cmds.c:657:8: style: The scope of the variable 'fp' can be reduced. [variableScope]
 FILE *fp;
       ^
elkscmd/sash/cmds.c:658:8: style: The scope of the variable 'name' can be reduced. [variableScope]
 char *name;
       ^
elkscmd/sash/cmds.c:659:6: style: The scope of the variable 'ch' can be reduced. [variableScope]
 int ch;
     ^
elkscmd/sash/cmds.c:660:6: style: The scope of the variable 'line' can be reduced. [variableScope]
 int line;
     ^
elkscmd/sash/cmds.c:661:6: style: The scope of the variable 'col' can be reduced. [variableScope]
 int col;
     ^
elkscmd/sash/cmds.c:837:6: style: The scope of the variable 'pid' can be reduced. [variableScope]
 int pid;
     ^
elkscmd/sash/sash.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 33 configurations. Use --force to check all configurations. [toomanyconfigs]

^
elkscmd/sash/sash.c:824:9: style: The scope of the variable 'alias' can be reduced. [variableScope]
 ALIAS *alias;
        ^
elkscmd/sash/sash.c:707:4: warning: Size of pointer 'alias' used instead of size of its data. [pointerSize]
   alias = (ALIAS *) malloc(sizeof(ALIAS *) * count);
   ^
elkscmd/sash/utils.c:434:16: warning: Either the condition 'pattern==NULL' is redundant or there is possible null pointer dereference: pattern++. [nullPointerRedundantCheck]
  ch = *pattern++;
               ^
elkscmd/sash/utils.c:485:15: note: Assuming that condition 'pattern==NULL' is not redundant
  if (pattern == NULL)
              ^
elkscmd/sash/utils.c:436:11: note: Assuming condition is false
  switch (ch) {
          ^
elkscmd/sash/utils.c:434:16: note: Null pointer dereference
  ch = *pattern++;
               ^
elkscmd/sash/utils.c:434:16: warning: Either the condition 'pattern==NULL' is redundant or there is pointer arithmetic with NULL pointer. [nullPointerArithmeticRedundantCheck]
  ch = *pattern++;
               ^
elkscmd/sash/utils.c:485:15: note: Assuming that condition 'pattern==NULL' is not redundant
  if (pattern == NULL)
              ^
elkscmd/sash/utils.c:436:11: note: Assuming condition is false
  switch (ch) {
          ^
elkscmd/sash/utils.c:434:16: note: Null pointer addition
  ch = *pattern++;
               ^
elkscmd/sash/utils.c:427:6: style: The scope of the variable 'ch' can be reduced. [variableScope]
 int ch;
     ^
elkscmd/sash/utils.c:552:6: style: The scope of the variable 'len' can be reduced. [variableScope]
 int len;
     ^
elkscmd/sash/utils.c:55:0: information: Skipping configuration 'FUNC_MODESTRING;S_ISLNK' since the value of 'S_ISLNK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 if (S_ISLNK(mode))
^
elkscmd/sash/utils.c:59:0: information: Skipping configuration 'FUNC_MODESTRING;S_ISSOCK' since the value of 'S_ISSOCK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 if (S_ISSOCK(mode))
^
elkscmd/screen/ansi.c:236:26: style: The scope of the variable 'p' can be reduced. [variableScope]
    register char **pp, *p;
                         ^
elkscmd/screen/ansi.c:939:10: style: The scope of the variable 'buf' can be reduced. [variableScope]
    char buf[8];
         ^
elkscmd/screen/ansi.c:1574:24: style: The scope of the variable 'ep' can be reduced. [variableScope]
    register char *p, *ep;
                       ^
elkscmd/screen/screen.c:1480:37: style: Condition 'p[1]!='\0'' is always true [knownConditionTrueFalse]
     } else if (p[0] == '^' && p[1] != '\0' && p[2] == '\0') {
                                    ^
elkscmd/screen/screen.c:1478:15: note: Assuming that condition 'p[1]=='\0'' is not redundant
     if (p[1] == '\0') {
              ^
elkscmd/screen/screen.c:1480:37: note: Condition 'p[1]!='\0'' is always true
     } else if (p[0] == '^' && p[1] != '\0' && p[2] == '\0') {
                                    ^
elkscmd/screen/screen.c:1452:20: warning: %o in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed int *'. [invalidScanfArgType_int]
     } else (void) sscanf (ap[1], "%o", &TtyMode);
                   ^
elkscmd/screen/screen.c:1486:10: warning: %o in format string (no. 1) requires 'unsigned int *' but the argument type is 'signed int *'. [invalidScanfArgType_int]
  (void) sscanf (p, "%o", &key);
         ^
elkscmd/screen/screen.c:1634:12: style: Redundant initialization for 's'. The initialized value is overwritten before it is read. [redundantInitialization]
    for (s = BellString; *s && p < buf+MAXSTR-1; s++)
           ^
elkscmd/screen/screen.c:1632:32: note: s is initialized
    register char *p = buf, *s = BellString;
                               ^
elkscmd/screen/screen.c:1634:12: note: s is overwritten
    for (s = BellString; *s && p < buf+MAXSTR-1; s++)
           ^
elkscmd/screen/screen.c:558:26: style: The scope of the variable 'p' can be reduced. [variableScope]
    register struct win *p, **pp;
                         ^
elkscmd/screen/screen.c:923:27: style: The scope of the variable 'p' can be reduced. [variableScope]
    register char *path, *p;
                          ^
elkscmd/screen/screen.c:1014:32: style: The scope of the variable 'p' can be reduced. [variableScope]
    register struct win **pp, *p;
                               ^
elkscmd/screen/screen.c:1138:19: style: The scope of the variable 'dirp' can be reduced. [variableScope]
    register DIR *dirp;
                  ^
elkscmd/screen/screen.c:1141:10: style: The scope of the variable 'last' can be reduced. [variableScope]
    char last[MAXNAMLEN+1];
         ^
elkscmd/screen/screen.c:1263:11: style: The scope of the variable 'p' can be reduced. [variableScope]
    char *p;
          ^
elkscmd/screen/screen.c:514:9: style: Unused variable: wstat [unusedVariable]
    int wstat;
        ^
elkscmd/sh_utils/basename.c:24:9: style: The scope of the variable 'line' can be reduced. [variableScope]
  char *line;
        ^
elkscmd/sh_utils/dirname.c:8:9: style: The scope of the variable 'line' can be reduced. [variableScope]
  char *line;
        ^
elkscmd/sh_utils/echo.c:25:9: style: The scope of the variable 'sptr' can be reduced. [variableScope]
 char * sptr;
        ^
elkscmd/sh_utils/stty.c:212:3: warning: %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'signed long'. [invalidPrintfArgType_uint]
  sprintf(line, "ispeed %lu baud; ospeed %lu baud;",
  ^
elkscmd/sh_utils/stty.c:212:3: warning: %lu in format string (no. 2) requires 'unsigned long' but the argument type is 'signed long'. [invalidPrintfArgType_uint]
  sprintf(line, "ispeed %lu baud; ospeed %lu baud;",
  ^
elkscmd/sh_utils/stty.c:218:3: warning: %lu in format string (no. 1) requires 'unsigned long' but the argument type is 'signed long'. [invalidPrintfArgType_uint]
  sprintf(line, "speed %lu baud;", speed2long(ospeed));
  ^
elkscmd/sh_utils/stty.c:468:12: warning: Char literal compared with pointer 'check'. Did you intend to dereference it? [charLiteralWithCharPtrCompare]
 if (check != '\0')
           ^
elkscmd/sh_utils/stty.c:490:12: warning: Char literal compared with pointer 'check'. Did you intend to dereference it? [charLiteralWithCharPtrCompare]
 if (check != '\0')
           ^
elkscmd/sh_utils/stty.c:315:0: information: Skipping configuration '_POSIX_VDISABLE' since the value of '_POSIX_VDISABLE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 print_char(termios.c_cc[VEOL], TEOL_DEF, "eol", all);
^
elkscmd/sh_utils/stty.c:910:0: information: Skipping configuration '_POSIX_VDISABLE' since the value of '_POSIX_VDISABLE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 termios.c_cc[VEOL]= TEOL_DEF;
^
elkscmd/sh_utils/stty.c:1113:0: information: Skipping configuration '_POSIX_VDISABLE' since the value of '_POSIX_VDISABLE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 if (chr == _POSIX_VDISABLE)
^
elkscmd/sh_utils/stty.c:1234:0: information: Skipping configuration '_POSIX_VDISABLE' since the value of '_POSIX_VDISABLE' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  chr= _POSIX_VDISABLE;
^
elkscmd/sh_utils/test.c:234:18: style: The scope of the variable 'opnd1' can be reduced. [variableScope]
  register char *opnd1, *opnd2;
                 ^
elkscmd/sh_utils/test.c:234:26: style: The scope of the variable 'opnd2' can be reduced. [variableScope]
  register char *opnd1, *opnd2;
                         ^
elkscmd/sh_utils/test.c:235:7: style: The scope of the variable 'res' can be reduced. [variableScope]
  int res;
      ^
elkscmd/sh_utils/tr.c:189:14: style: Variable 'n1' is reassigned a value before the old one has been used. [redundantAssignment]
        ((n1 = set_descr[++i]) >= (n2 = buf[tail-1] + 1))) {
             ^
elkscmd/sh_utils/tr.c:187:8: note: n1 is assigned
    n1 = ' ';
       ^
elkscmd/sh_utils/tr.c:189:14: note: n1 is overwritten
        ((n1 = set_descr[++i]) >= (n2 = buf[tail-1] + 1))) {
             ^
elkscmd/sh_utils/tr.c:253:12: style: Variable 'ip' is assigned a value that is never used. [unreadVariable]
   if ((ip = strchr(set1, i)) != NULL) {
           ^
elkscmd/sh_utils/tr.c:265:22: style: Variable 'ip' is assigned a value that is never used. [unreadVariable]
      (!set2 && ((ip = strchr(set1, i)) != NULL))) {
                     ^
elkscmd/sh_utils/which.c:10:8: style: The scope of the variable 'path' can be reduced. [variableScope]
 char *path, *cp;
       ^
elkscmd/sh_utils/which.c:10:15: style: The scope of the variable 'cp' can be reduced. [variableScope]
 char *path, *cp;
              ^
elkscmd/sh_utils/which.c:13:6: style: The scope of the variable 'quit' can be reduced. [variableScope]
 int quit, found;
     ^
elkscmd/sh_utils/which.c:13:12: style: The scope of the variable 'found' can be reduced. [variableScope]
 int quit, found;
           ^
elkscmd/sh_utils/which.c:26:6: style: Variable 'cp' is assigned a value that is never used. [unreadVariable]
  cp = path = patbuf;
     ^
elkscmd/sh_utils/xargs.c:74:16: style: The scope of the variable 'k' can be reduced. [variableScope]
 int i = 1, j, k;
               ^
elkscmd/sh_utils/xargs.c:229:6: style: The scope of the variable 'new_argc' can be reduced. [variableScope]
 int new_argc;
     ^
elkscmd/sys_utils/chmem.c:114:2: portability: %u in format string (no. 1) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_uint]
 printf("%5u  %5u  %5u  %5u  %5u  %5u   %6lu %6lu %s",
 ^
elkscmd/sys_utils/chmem.c:114:2: portability: %u in format string (no. 2) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_uint]
 printf("%5u  %5u  %5u  %5u  %5u  %5u   %6lu %6lu %s",
 ^
elkscmd/sys_utils/chmem.c:114:2: portability: %u in format string (no. 3) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_uint]
 printf("%5u  %5u  %5u  %5u  %5u  %5u   %6lu %6lu %s",
 ^
elkscmd/sys_utils/chmem.c:114:2: portability: %u in format string (no. 4) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_uint]
 printf("%5u  %5u  %5u  %5u  %5u  %5u   %6lu %6lu %s",
 ^
elkscmd/sys_utils/chmem.c:157:2: portability: %u in format string (no. 1) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_uint]
 printf("%5u  %5u  %5u  %5u  %5lu  %5lu   %6lu %6lu %s\n",
 ^
elkscmd/sys_utils/chmem.c:157:2: portability: %u in format string (no. 2) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_uint]
 printf("%5u  %5u  %5u  %5u  %5lu  %5lu   %6lu %6lu %s\n",
 ^
elkscmd/sys_utils/chmem.c:157:2: portability: %u in format string (no. 3) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_uint]
 printf("%5u  %5u  %5u  %5u  %5lu  %5lu   %6lu %6lu %s\n",
 ^
elkscmd/sys_utils/chmem.c:157:2: portability: %u in format string (no. 4) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_uint]
 printf("%5u  %5u  %5u  %5u  %5lu  %5lu   %6lu %6lu %s\n",
 ^
elkscmd/sys_utils/clock.c:482:13: style: Variable 'timebuf[0]' is assigned a value that is never used. [unreadVariable]
 timebuf[0] = hex_bcd(tmp->tm_year-100);
            ^
elkscmd/sys_utils/clock.c:484:13: style: Variable 'timebuf[0]' is assigned a value that is never used. [unreadVariable]
 timebuf[0] = hex_bcd(tmp->tm_year);
            ^
elkscmd/sys_utils/clock.c:293:17: style: Unused variable: save_control [unusedVariable]
  unsigned char save_control, save_freq_select;
                ^
elkscmd/sys_utils/clock.c:293:31: style: Unused variable: save_freq_select [unusedVariable]
  unsigned char save_control, save_freq_select;
                              ^
elkscmd/sys_utils/getty.c:94:45: style: The scope of the variable 'sz' can be reduced. [variableScope]
    int fp = open(_PATH_HOSTNAME,O_RDONLY), sz;
                                            ^
elkscmd/sys_utils/getty.c:121:9: style: The scope of the variable 'n' can be reduced. [variableScope]
    int n;
        ^
elkscmd/sys_utils/getty.c:203:0: information: Skipping configuration 'B1000000' since the value of 'B1000000' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 case 1000000: return B1000000;
^
elkscmd/sys_utils/getty.c:188:0: information: Skipping configuration 'B230400' since the value of 'B230400' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 case 230400: return B230400;
^
elkscmd/sys_utils/getty.c:191:0: information: Skipping configuration 'B460800' since the value of 'B460800' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 case 460800: return B460800;
^
elkscmd/sys_utils/getty.c:194:0: information: Skipping configuration 'B500000' since the value of 'B500000' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 case 500000: return B500000;
^
elkscmd/sys_utils/getty.c:197:0: information: Skipping configuration 'B576000' since the value of 'B576000' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 case 576000: return B576000;
^
elkscmd/sys_utils/getty.c:200:0: information: Skipping configuration 'B921600' since the value of 'B921600' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 case 921600: return B921600;
^
elkscmd/sys_utils/getty.c:363:0: information: Skipping configuration 'ELKS_VERSION' since the value of 'ELKS_VERSION' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
       state(ELKS_VERSION);
^
elkscmd/sys_utils/getty.c:212:11: style: Unused variable: ptr [unusedVariable]
    char *ptr;
          ^
elkscmd/sys_utils/init.c:412:19: style: The scope of the variable 'child' can be reduced. [variableScope]
 struct tabentry *child;
                  ^
elkscmd/sys_utils/init.c:418:7: style: The scope of the variable 'andWait' can be reduced. [variableScope]
  int andWait = 0;
      ^
elkscmd/sys_utils/insmod.c:20:12: style: Unused variable: i [unusedVariable]
 int od,md,i;
           ^
elkscmd/sys_utils/kill.c:38:6: style: The scope of the variable 'pid' can be reduced. [variableScope]
 int pid;
     ^
elkscmd/sys_utils/knl.c:265:20: style: Condition 'Value>0' is always false [knownConditionTrueFalse]
    else if (Value > 0)
                   ^
elkscmd/sys_utils/knl.c:252:19: note: Assignment 'Value=0', assigned value is 0
    DWORD Value = 0;
                  ^
elkscmd/sys_utils/knl.c:265:20: note: Condition 'Value>0' is always false
    else if (Value > 0)
                   ^
elkscmd/sys_utils/knl.c:287:22: style: The scope of the variable 'Sep' can be reduced. [variableScope]
    char *Gap = Ptr, Sep;
                     ^
elkscmd/sys_utils/knl.c:288:9: style: The scope of the variable 'n' can be reduced. [variableScope]
    int n;
        ^
elkscmd/sys_utils/knl.c:1007:11: style: The scope of the variable 'Image' can be reduced. [variableScope]
    char *Image, *Ptr, *Value;
          ^
elkscmd/sys_utils/knl.c:1008:11: style: The scope of the variable 'fp' can be reduced. [variableScope]
    FILE *fp;
          ^
elkscmd/sys_utils/knl.c:1009:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i = 0;
        ^
elkscmd/sys_utils/knl.c:1010:10: style: The scope of the variable 'Accept' can be reduced. [variableScope]
    WORD Accept = 0;
         ^
elkscmd/sys_utils/knl.c:1011:10: style: The scope of the variable 'Flags' can be reduced. [variableScope]
    WORD Flags = 0;
         ^
elkscmd/sys_utils/knl.c:1012:10: style: The scope of the variable 'RamOffset' can be reduced. [variableScope]
    WORD RamOffset = 0;
         ^
elkscmd/sys_utils/knl.c:1013:10: style: The scope of the variable 'RootDev' can be reduced. [variableScope]
    WORD RootDev = 0;
         ^
elkscmd/sys_utils/knl.c:1014:10: style: The scope of the variable 'VideoMode' can be reduced. [variableScope]
    WORD VideoMode = 0;
         ^
elkscmd/sys_utils/knl.c:1015:10: style: The scope of the variable 'RamPrompt' can be reduced. [variableScope]
    char RamPrompt = 'N';
         ^
elkscmd/sys_utils/knl.c:1016:10: style: The scope of the variable 'UseRAM' can be reduced. [variableScope]
    char UseRAM = 'N';
         ^
elkscmd/sys_utils/knl.c:256:12: style: Unsigned expression 'Max' can't be negative so it is unnecessary to test it. [unsignedPositive]
 if (Value <= Max)
           ^
elkscmd/sys_utils/knl.c:252:19: note: Assignment 'Value=0', assigned value is 0
    DWORD Value = 0;
                  ^
elkscmd/sys_utils/knl.c:256:12: note: Unsigned positive
 if (Value <= Max)
           ^
elkscmd/sys_utils/knl.c:263:20: style: Checking if unsigned expression 'Max' is less than zero. [unsignedLessThanZero]
    else if (Value > Max)
                   ^
elkscmd/sys_utils/knl.c:252:19: note: Assignment 'Value=0', assigned value is 0
    DWORD Value = 0;
                  ^
elkscmd/sys_utils/knl.c:263:20: note: Unsigned less than zero
    else if (Value > Max)
                   ^
elkscmd/sys_utils/knl.c:931:32: error: Undefined behavior: Variable 'Result' is used as parameter and destination in sprintf(). [sprintfOverlappingData]
      sprintf(Result, "%s,RO", Result);
                               ^
elkscmd/sys_utils/knl.c:934:33: error: Undefined behavior: Variable 'Result' is used as parameter and destination in sprintf(). [sprintfOverlappingData]
      sprintf(Result, "%s,X%u", Result, i);
                                ^
elkscmd/sys_utils/knl.c:1009:11: style: Variable 'i' is assigned a value that is never used. [unreadVariable]
    int i = 0;
          ^
elkscmd/sys_utils/makeboot.c:180:2: warning: %ld in format string (no. 1) requires 'long' but the argument type is 'unsigned long'. [invalidPrintfArgType_sint]
 printf("BPB sect_offset %ld setting to %ld\n",
 ^
elkscmd/sys_utils/makeboot.c:180:2: warning: %ld in format string (no. 2) requires 'long' but the argument type is 'unsigned long'. [invalidPrintfArgType_sint]
 printf("BPB sect_offset %ld setting to %ld\n",
 ^
elkscmd/sys_utils/makeboot.c:325:3: warning: %d in format string (no. 3) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
  printf("System on %s: %s (CHS %d/%d/%d at offset %ld)\n",
  ^
elkscmd/sys_utils/makeboot.c:325:3: warning: %d in format string (no. 4) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
  printf("System on %s: %s (CHS %d/%d/%d at offset %ld)\n",
  ^
elkscmd/sys_utils/makeboot.c:325:3: warning: %d in format string (no. 5) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
  printf("System on %s: %s (CHS %d/%d/%d at offset %ld)\n",
  ^
elkscmd/sys_utils/makeboot.c:325:3: warning: %ld in format string (no. 6) requires 'long' but the argument type is 'unsigned long'. [invalidPrintfArgType_sint]
  printf("System on %s: %s (CHS %d/%d/%d at offset %ld)\n",
  ^
elkscmd/sys_utils/makeboot.c:450:3: warning: %d in format string (no. 3) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
  printf("Target on %s: %s (CHS %d/%d/%d at offset %ld)\n",
  ^
elkscmd/sys_utils/makeboot.c:450:3: warning: %d in format string (no. 4) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
  printf("Target on %s: %s (CHS %d/%d/%d at offset %ld)\n",
  ^
elkscmd/sys_utils/makeboot.c:450:3: warning: %d in format string (no. 5) requires 'int' but the argument type is 'unsigned int'. [invalidPrintfArgType_sint]
  printf("Target on %s: %s (CHS %d/%d/%d at offset %ld)\n",
  ^
elkscmd/sys_utils/makeboot.c:450:3: warning: %ld in format string (no. 6) requires 'long' but the argument type is 'unsigned long'. [invalidPrintfArgType_sint]
  printf("Target on %s: %s (CHS %d/%d/%d at offset %ld)\n",
  ^
elkscmd/sys_utils/man.c:185:14: error: The address of local variable 'nsu' is accessed at non-zero index. [objectIndex]
         curr[-1] = ':';
             ^
elkscmd/sys_utils/man.c:135:36: note: Address of variable taken here.
      for (su=nsu=mansuff,step(&su,&nsu); su; step(&su, &nsu)) {
                                   ^
elkscmd/sys_utils/man.c:135:36: note: Calling function 'step', 2nd argument '&nsu' value is lifetime=nsu
      for (su=nsu=mansuff,step(&su,&nsu); su; step(&su, &nsu)) {
                                   ^
elkscmd/sys_utils/man.c:178:13: note: Assuming condition is false
   if (curr == 0) return;
            ^
elkscmd/sys_utils/man.c:185:14: note: The address of local variable 'nsu' is accessed at non-zero index.
         curr[-1] = ':';
             ^
elkscmd/sys_utils/man.c:185:14: error: The address of local variable 'nmc' is accessed at non-zero index. [objectIndex]
         curr[-1] = ':';
             ^
elkscmd/sys_utils/man.c:145:34: note: Address of variable taken here.
   for (mc=nmc=manorcat,step(&mc,&nmc); mc; step(&mc, &nmc))
                                 ^
elkscmd/sys_utils/man.c:145:34: note: Calling function 'step', 2nd argument '&nmc' value is lifetime=nmc
   for (mc=nmc=manorcat,step(&mc,&nmc); mc; step(&mc, &nmc))
                                 ^
elkscmd/sys_utils/man.c:178:13: note: Assuming condition is false
   if (curr == 0) return;
            ^
elkscmd/sys_utils/man.c:185:14: note: The address of local variable 'nmc' is accessed at non-zero index.
         curr[-1] = ':';
             ^
elkscmd/sys_utils/man.c:185:14: error: The address of local variable 'nms' is accessed at non-zero index. [objectIndex]
         curr[-1] = ':';
             ^
elkscmd/sys_utils/man.c:146:36: note: Address of variable taken here.
      for (ms=nms=mansect,step(&ms,&nms); ms; step(&ms, &nms))
                                   ^
elkscmd/sys_utils/man.c:146:36: note: Calling function 'step', 2nd argument '&nms' value is lifetime=nms
      for (ms=nms=mansect,step(&ms,&nms); ms; step(&ms, &nms))
                                   ^
elkscmd/sys_utils/man.c:178:13: note: Assuming condition is false
   if (curr == 0) return;
            ^
elkscmd/sys_utils/man.c:185:14: note: The address of local variable 'nms' is accessed at non-zero index.
         curr[-1] = ':';
             ^
elkscmd/sys_utils/man.c:185:14: error: The address of local variable 'nmp' is accessed at non-zero index. [objectIndex]
         curr[-1] = ':';
             ^
elkscmd/sys_utils/man.c:147:32: note: Address of variable taken here.
  for (mp=nmp=manpath,step(&mp,&nmp); mp; step(&mp, &nmp))
                               ^
elkscmd/sys_utils/man.c:147:32: note: Calling function 'step', 2nd argument '&nmp' value is lifetime=nmp
  for (mp=nmp=manpath,step(&mp,&nmp); mp; step(&mp, &nmp))
                               ^
elkscmd/sys_utils/man.c:178:13: note: Assuming condition is false
   if (curr == 0) return;
            ^
elkscmd/sys_utils/man.c:185:14: note: The address of local variable 'nmp' is accessed at non-zero index.
         curr[-1] = ':';
             ^
elkscmd/sys_utils/man.c:345:27: style: Condition 'line_ptr!=0' is always true [knownConditionTrueFalse]
        else if (line_ptr != 0 && next_line_indent > 0)
                          ^
elkscmd/sys_utils/man.c:342:22: note: Assuming that condition 'line_ptr==0' is not redundant
        if (line_ptr == 0 || next_line_indent < 0 ||
                     ^
elkscmd/sys_utils/man.c:345:27: note: Condition 'line_ptr!=0' is always true
        else if (line_ptr != 0 && next_line_indent > 0)
                          ^
elkscmd/sys_utils/man.c:198:9: style: The scope of the variable 'buf' can be reduced. [variableScope]
   char buf[PATH_MAX];
        ^
elkscmd/sys_utils/man.c:451:9: style: The scope of the variable 'lbuf' can be reduced. [variableScope]
   char lbuf[10];
        ^
elkscmd/sys_utils/man.c:762:14: style: Variable 'ch' is assigned a value that is never used. [unreadVariable]
   int *d, ch=0;
             ^
elkscmd/sys_utils/meminfo.c:102:32: style: The scope of the variable 't' can be reduced. [variableScope]
  int free, used, tty, buffer, t;
                               ^
elkscmd/sys_utils/meminfo.c:152:10: style: The scope of the variable 'c' can be reduced. [variableScope]
 int fd, c;
         ^
elkscmd/test/echo/echoclient.c:117:8: style: Suspicious condition (assignment + comparison); Clarify expression with parentheses. [clarifyCondition]
    if ((rc=read(fd,buf,100) > 0))
       ^
elkscmd/test/echo/echoclient.c:36:8: style:inconclusive: Found duplicate branches for 'if' and 'else'. [duplicateBranch]
  else if (strcmp(cp, "h") == 0) {
       ^
elkscmd/test/echo/echoclient.c:39:5: note: Found duplicate branches for 'if' and 'else'.
  } else {
    ^
elkscmd/test/echo/echoclient.c:36:8: note: Found duplicate branches for 'if' and 'else'.
  else if (strcmp(cp, "h") == 0) {
       ^
elkscmd/test/echo/echoclient.c:43:7: style: Variable 'argc' is assigned a value that is never used. [unreadVariable]
  argc--;
      ^
elkscmd/test/echo/echoclient.c:52:13: style: Condition 'afunix==0' is always true [knownConditionTrueFalse]
if ( afunix == 0 ) { /* Internet */
            ^
elkscmd/test/echo/echoclient.c:28:10: note: Assignment 'afunix=0', assigned value is 0
  afunix=0;
         ^
elkscmd/test/echo/echoclient.c:52:13: note: Condition 'afunix==0' is always true
if ( afunix == 0 ) { /* Internet */
            ^
elkscmd/test/echo/echoclient.c:22:9: style: Unused variable: cp [unusedVariable]
  char *cp;
        ^
elkscmd/test/echo/echoserver.c:37:8: style:inconclusive: Found duplicate branches for 'if' and 'else'. [duplicateBranch]
  else if (strcmp(cp, "h") == 0) {
       ^
elkscmd/test/echo/echoserver.c:40:5: note: Found duplicate branches for 'if' and 'else'.
  } else {
    ^
elkscmd/test/echo/echoserver.c:37:8: note: Found duplicate branches for 'if' and 'else'.
  else if (strcmp(cp, "h") == 0) {
       ^
elkscmd/test/libc/malloc.c:83:6: warning: Obsolete function 'alloca' called. In C99 and later it is recommended to use a variable length array instead. [allocaCalled]
 p = alloca(1);
     ^
elkscmd/test/libc/malloc.c:48:13: error: Invalid calloc() argument nr 1. The value is 0 but the valid values are '1:'. [invalidFunctionArg]
 p = calloc(0, 1);
            ^
elkscmd/test/libc/malloc.c:66:2: error: Common realloc mistake: 'p' nulled but not freed upon failure [memleakOnRealloc]
 p = realloc(p, 1);
 ^
elkscmd/test/libc/malloc.c:71:2: error: Common realloc mistake: 'p' nulled but not freed upon failure [memleakOnRealloc]
 p = realloc(p, 64);
 ^
elkscmd/test/libc/math.c:80:2: error: Invalid sqrt() argument nr 1. The value is -1 but the valid values are '0.0:'. [invalidFunctionArg]
 EXPECT_EQ(sqrt(-1.0), -0.0);
 ^
elkscmd/test/libc/math.c:81:2: error: Invalid sqrtf() argument nr 1. The value is -1 but the valid values are '0.0:'. [invalidFunctionArg]
 EXPECT_EQ(sqrtf(-1.0), -0.0);
 ^
elkscmd/test/libc/testlib.c:121:6: warning: Either the condition 'p==NULL' is redundant or there is possible null pointer dereference: (void**)p. [nullPointerRedundantCheck]
    *(void **)p = autoFree;
     ^
elkscmd/test/libc/testlib.c:119:11: note: Assuming that condition 'p==NULL' is not redundant
    if (p == NULL)
          ^
elkscmd/test/libc/testlib.c:121:6: note: Null pointer dereference
    *(void **)p = autoFree;
     ^
elkscmd/test/libc/testlib.c:131:6: warning: Either the condition 'p==NULL' is redundant or there is possible null pointer dereference: (void**)p. [nullPointerRedundantCheck]
    *(void **)p = autoFree;
     ^
elkscmd/test/libc/testlib.c:129:11: note: Assuming that condition 'p==NULL' is not redundant
    if (p == NULL)
          ^
elkscmd/test/libc/testlib.c:131:6: note: Null pointer dereference
    *(void **)p = autoFree;
     ^
elkscmd/test/libc/testlib.c:123:14: warning: Either the condition 'p==NULL' is redundant or there is pointer arithmetic with NULL pointer. [nullPointerArithmeticRedundantCheck]
    return p + sizeof(void*);
             ^
elkscmd/test/libc/testlib.c:119:11: note: Assuming that condition 'p==NULL' is not redundant
    if (p == NULL)
          ^
elkscmd/test/libc/testlib.c:123:14: note: Null pointer addition
    return p + sizeof(void*);
             ^
elkscmd/test/libc/testlib.c:133:14: warning: Either the condition 'p==NULL' is redundant or there is pointer arithmetic with NULL pointer. [nullPointerArithmeticRedundantCheck]
    return p + sizeof(void*);
             ^
elkscmd/test/libc/testlib.c:129:11: note: Assuming that condition 'p==NULL' is not redundant
    if (p == NULL)
          ^
elkscmd/test/libc/testlib.c:133:14: note: Null pointer addition
    return p + sizeof(void*);
             ^
elkscmd/test/libc/testlib.c:118:11: warning: Size of pointer 'p' used instead of size of its data. [pointerSize]
    char *p = malloc(sizeof(void*) + size);
          ^
elkscmd/test/other/test_eth.c:210:7: style: Variable 'res' is reassigned a value before the old one has been used. [redundantAssignment]
  res = 0;
      ^
elkscmd/test/other/test_eth.c:98:8: note: res is assigned
   res = 1;
       ^
elkscmd/test/other/test_eth.c:210:7: note: res is overwritten
  res = 0;
      ^
elkscmd/test/other/test_eth.c:210:7: style: Variable 'res' is reassigned a value before the old one has been used. [redundantAssignment]
  res = 0;
      ^
elkscmd/test/other/test_eth.c:121:9: note: res is assigned
    res = 1;
        ^
elkscmd/test/other/test_eth.c:210:7: note: res is overwritten
  res = 0;
      ^
elkscmd/test/other/test_eth.c:210:7: style: Variable 'res' is reassigned a value before the old one has been used. [redundantAssignment]
  res = 0;
      ^
elkscmd/test/other/test_eth.c:135:10: note: res is assigned
     res = 1;
         ^
elkscmd/test/other/test_eth.c:210:7: note: res is overwritten
  res = 0;
      ^
elkscmd/test/other/test_eth.c:210:7: style: Variable 'res' is reassigned a value before the old one has been used. [redundantAssignment]
  res = 0;
      ^
elkscmd/test/other/test_eth.c:202:10: note: res is assigned
     res = 1;
         ^
elkscmd/test/other/test_eth.c:210:7: note: res is overwritten
  res = 0;
      ^
elkscmd/test/other/test_eth.c:106:8: style: The scope of the variable 'm' can be reduced. [variableScope]
   int m;
       ^
elkscmd/test/other/test_pty.c:66:13: style: Condition 'rc>0' is always true [knownConditionTrueFalse]
      if (rc>0) goto repeat;
            ^
elkscmd/test/other/test_pty.c:63:14: note: Assuming that condition 'rc<2' is not redundant
      if (rc < 2) continue;
             ^
elkscmd/test/other/test_pty.c:66:13: note: Condition 'rc>0' is always true
      if (rc>0) goto repeat;
            ^
elkscmd/test/other/test_signal.c:25:2: warning: %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
 printf ("exiting:signo=%u\n", _signo);
 ^
elkscmd/tui/cons.c:39:15: style: The scope of the variable 'a' can be reduced. [variableScope]
    int r, c, a;
              ^
elkscmd/tui/curses.c:97:19: style:inconclusive: Function 'curs_set' argument 1 names different: declaration 'cursoron' definition 'visibility'. [funcArgNamesDifferent]
void curs_set(int visibility)
                  ^
elkscmd/tui/curses.h:59:19: note: Function 'curs_set' argument 1 names different: declaration 'cursoron' definition 'visibility'.
void curs_set(int cursoron);
                  ^
elkscmd/tui/curses.c:97:19: note: Function 'curs_set' argument 1 names different: declaration 'cursoron' definition 'visibility'.
void curs_set(int visibility)
                  ^
elkscmd/tui/curses2.c:21:9: style: The scope of the variable 'n' can be reduced. [variableScope]
    int n, e;
        ^
elkscmd/tui/fm.c:148:16: warning: Either the condition 'pattern==NULL' is redundant or there is possible null pointer dereference: pattern++. [nullPointerRedundantCheck]
  ch = *pattern++;
               ^
elkscmd/tui/fm.c:197:15: note: Assuming that condition 'pattern==NULL' is not redundant
  if (pattern == NULL)
              ^
elkscmd/tui/fm.c:150:11: note: Assuming condition is false
  switch (ch) {
          ^
elkscmd/tui/fm.c:148:16: note: Null pointer dereference
  ch = *pattern++;
               ^
elkscmd/tui/fm.c:148:16: warning: Either the condition 'pattern==NULL' is redundant or there is pointer arithmetic with NULL pointer. [nullPointerArithmeticRedundantCheck]
  ch = *pattern++;
               ^
elkscmd/tui/fm.c:197:15: note: Assuming that condition 'pattern==NULL' is not redundant
  if (pattern == NULL)
              ^
elkscmd/tui/fm.c:150:11: note: Assuming condition is false
  switch (ch) {
          ^
elkscmd/tui/fm.c:148:16: note: Null pointer addition
  ch = *pattern++;
               ^
elkscmd/tui/fm.c:136:6: style: The scope of the variable 'ch' can be reduced. [variableScope]
 int ch;
     ^
elkscmd/tui/fm.c:341:8: style: The scope of the variable 'term' can be reduced. [variableScope]
 char *term;
       ^
elkscmd/tui/fm.c:263:9: error: Uninitialized variable: type [uninitvar]
    if (type == Runshell || type == Runcurname)
        ^
elkscmd/tui/fm.c:322:9: note: Assuming condition is false
    if (!cmd)
        ^
elkscmd/tui/fm.c:324:38: note: Calling function 'runcmd', 4th argument 'type' value is <Uninit>
    return runcmd(dir, cmd, curname, type);
                                     ^
elkscmd/tui/fm.c:263:9: note: Uninitialized variable: type
    if (type == Runshell || type == Runcurname)
        ^
elkscmd/tui/fm.c:324:38: error: Uninitialized variable: type [uninitvar]
    return runcmd(dir, cmd, curname, type);
                                     ^
elkscmd/tui/fm.c:322:9: note: Assuming condition is false
    if (!cmd)
        ^
elkscmd/tui/fm.c:324:38: note: Uninitialized variable: type
    return runcmd(dir, cmd, curname, type);
                                     ^
elkscmd/tui/matrix.c:195:16: style: Variable 'currentColor' is assigned a value that is never used. [unreadVariable]
  currentColor = 0x0F & colorat(col, row);
               ^
elkscmd/tui/realpath.c:67:39: style:inconclusive: Function 'realpath' argument 2 names different: declaration 'resolved' definition 'resolved_path'. [funcArgNamesDifferent]
char *realpath(const char *path,char *resolved_path)
                                      ^
elkscmd/tui/util.h:27:39: note: Function 'realpath' argument 2 names different: declaration 'resolved' definition 'resolved_path'.
char *realpath(const char *path, char resolved[PATH_MAX]);
                                      ^
elkscmd/tui/realpath.c:67:39: note: Function 'realpath' argument 2 names different: declaration 'resolved' definition 'resolved_path'.
char *realpath(const char *path,char *resolved_path)
                                      ^
elkscmd/tui/realpath2.c:59:16: style: The scope of the variable 's' can be reduced. [variableScope]
 char *p, *q, *s;
               ^
elkscmd/tui/sl.c:261:16: style: The scope of the variable 'sum' can be reduced. [variableScope]
    static int sum = 0;
               ^
elkscmd/tui/sl.c:262:18: style: The scope of the variable 'Smoke' can be reduced. [variableScope]
    static char *Smoke[2][SMOKEPTNS]
                 ^
elkscmd/tui/sl.c:271:18: style: The scope of the variable 'Eraser' can be reduced. [variableScope]
    static char *Eraser[SMOKEPTNS]
                 ^
elkscmd/tui/sl.c:276:16: style: The scope of the variable 'dy' can be reduced. [variableScope]
    static int dy[SMOKEPTNS] = { 2,  1, 1, 1, 0, 0, 0, 0, 0, 0,
               ^
elkscmd/tui/sl.c:278:16: style: The scope of the variable 'dx' can be reduced. [variableScope]
    static int dx[SMOKEPTNS] = {-2, -1, 0, 1, 1, 1, 1, 1, 2, 2,
               ^
elkscmd/tui/sl.c:280:9: style: The scope of the variable 'i' can be reduced. [variableScope]
    int i;
        ^
elkscmd/tui/sl.c:70:16: style: Local variable 'ACCIDENT' shadows outer variable [shadowVariable]
    extern int ACCIDENT, LOGO, FLY, C51;
               ^
elkscmd/tui/sl.c:54:5: note: Shadowed declaration
int ACCIDENT  = 0;
    ^
elkscmd/tui/sl.c:70:16: note: Shadow variable
    extern int ACCIDENT, LOGO, FLY, C51;
               ^
elkscmd/tui/sl.c:70:26: style: Local variable 'LOGO' shadows outer variable [shadowVariable]
    extern int ACCIDENT, LOGO, FLY, C51;
                         ^
elkscmd/tui/sl.c:55:5: note: Shadowed declaration
int LOGO      = 0;
    ^
elkscmd/tui/sl.c:70:26: note: Shadow variable
    extern int ACCIDENT, LOGO, FLY, C51;
                         ^
elkscmd/tui/sl.c:70:32: style: Local variable 'FLY' shadows outer variable [shadowVariable]
    extern int ACCIDENT, LOGO, FLY, C51;
                               ^
elkscmd/tui/sl.c:56:5: note: Shadowed declaration
int FLY       = 0;
    ^
elkscmd/tui/sl.c:70:32: note: Shadow variable
    extern int ACCIDENT, LOGO, FLY, C51;
                               ^
elkscmd/tui/sl.c:70:37: style: Local variable 'C51' shadows outer variable [shadowVariable]
    extern int ACCIDENT, LOGO, FLY, C51;
                                    ^
elkscmd/tui/sl.c:57:5: note: Shadowed declaration
int C51       = 0;
    ^
elkscmd/tui/sl.c:70:37: note: Shadow variable
    extern int ACCIDENT, LOGO, FLY, C51;
                                    ^
elkscmd/tui/tty-cp437.c:108:15: style: The scope of the variable 'a' can be reduced. [variableScope]
    int r, c, a, b;
              ^
elkscmd/tui/tty.c:97:28: style:inconclusive: Function 'tty_init' argument 1 names different: declaration 'flags' definition 'f'. [funcArgNamesDifferent]
int tty_init(enum ttyflags f)
                           ^
elkscmd/tui/unikey.h:18:28: note: Function 'tty_init' argument 1 names different: declaration 'flags' definition 'f'.
int tty_init(enum ttyflags flags);
                           ^
elkscmd/tui/tty.c:97:28: note: Function 'tty_init' argument 1 names different: declaration 'flags' definition 'f'.
int tty_init(enum ttyflags f)
                           ^
elkscmd/tui/unikey.c:617:11: style: Condition 'scroll_reverse' is always false [knownConditionTrueFalse]
      k = scroll_reverse? kMouseWheelUp: kMouseWheelDown;
          ^
elkscmd/tui/unikey.c:619:11: style: Condition 'scroll_reverse' is always false [knownConditionTrueFalse]
      k = scroll_reverse? kMouseWheelDown: kMouseWheelUp;
          ^
elkscmd/tui/v7malloc.c:241:15: style:inconclusive: Boolean expression 'x==1' is used in bitwise operation. Did you mean '||'? [bitwiseOnBoolean]
 return((x==1)|(p==allocp));
              ^
elkscmd/tui/v7malloc.c:100:23: warning: Invalid test for overflow 'p+nw>=p'; pointer overflow is undefined behavior. Some mainstream compilers removes handling of overflows when optimising the code and change the code to 'nw>=0'. [invalidTestForOverflow]
    if(q>=p+nw && p+nw>=p)
                      ^
elkscmd/tui/v7malloc.c:268:2: warning: %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
 printf("Total alloc %u, free %u\n", alloc, free);
 ^
elkscmd/tui/v7malloc.c:268:2: warning: %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
 printf("Total alloc %u, free %u\n", alloc, free);
 ^
elkscmd/tui/v7malloc.c:196:8: error: Dereferencing 'p' after it is deallocated / released [deallocuse]
 onw = p[-1].ptr - p;
       ^
elkscmd/tui/v7malloc.c:249:6: style: The scope of the variable 'size' can be reduced. [variableScope]
 int size, alloc = 0, free = 0;
     ^
elkscmd/tui/v7malloc.c:249:23: style: Local variable 'free' shadows outer function [shadowFunction]
 int size, alloc = 0, free = 0;
                      ^
elkscmd/tui/v7malloc.c:160:1: note: Shadowed declaration
free(void *ptr)
^
elkscmd/tui/v7malloc.c:249:23: note: Shadow variable
 int size, alloc = 0, free = 0;
                      ^
elkscmd/xvi/xvi.c:1275:4: style: Assignment of function parameter has no effect outside the function. [uselessAssignmentArg]
   addr += rem;
   ^
elkscmd/xvi/xvi.c:1629:27: style: Array index 'j' is used before limits check. [arrayIndexThenCheck]
   for (j = 3; isspace(cmd[j]) && j < i; j++);
                          ^
elkscmd/xvi/xvi.c:2444:2: portability: fflush() called on input stream 'stdin' may result in undefined behaviour on non-linux systems. [fflushOnInputStream]
 fflush(stdin);
 ^
elkscmd/xvi/xvi.c:1183:6: style: The scope of the variable 'rem' can be reduced. [variableScope]
 int rem;
     ^
elkscmd/xvi/xvi.c:1184:6: style: The scope of the variable 'rowcnt' can be reduced. [variableScope]
 int rowcnt;
     ^
elkscmd/xvi/xvi.c:1185:6: style: The scope of the variable 'i' can be reduced. [variableScope]
 int i;
     ^
elkscmd/xvi/xvi.c:1186:6: style: The scope of the variable 'j' can be reduced. [variableScope]
 int j;
     ^
elkscmd/xvi/xvi.c:1187:6: style: The scope of the variable 'n' can be reduced. [variableScope]
 int n;
     ^
elkscmd/xvi/xvi.c:2014:8: style: The scope of the variable 'j' can be reduced. [variableScope]
 int i,j;
       ^
elkscmd/xvi/xvi.c:2096:7: style: The scope of the variable 'c' can be reduced. [variableScope]
 char c;
      ^
elkscmd/xvi/xvi.c:2142:6: style: The scope of the variable 'i' can be reduced. [variableScope]
 int i;
     ^
elkscmd/xvi/xvi.c:2807:7: style: The scope of the variable 'c' can be reduced. [variableScope]
 char c;
      ^
elkscmd/xvi/xvi.c:3484:6: style: The scope of the variable 'eoi' can be reduced. [variableScope]
 int eoi;
     ^
elkscmd/xvi/xvi.c:3485:6: style: The scope of the variable 'i' can be reduced. [variableScope]
 int i;
     ^
elkscmd/xvi/xvi.c:3488:7: style: The scope of the variable 'curpattern' can be reduced. [variableScope]
 char curpattern[XNBYTES];
      ^
elkscmd/xvi/xvi.c:3489:7: style: The scope of the variable 'b' can be reduced. [variableScope]
 long b;
      ^
elkscmd/xvi/xvi.c:4807:8: style: The scope of the variable 'iaux' can be reduced. [variableScope]
 int j,iaux,created;
       ^
elkscmd/xvi/xvi.c:4807:13: style: The scope of the variable 'created' can be reduced. [variableScope]
 int j,iaux,created;
            ^
elkscmd/xvi/xvi.c:1188:6: style: Local variable 'lastrow' shadows outer variable [shadowVariable]
 int lastrow;
     ^
elkscmd/xvi/xvi.c:531:12: note: Shadowed declaration
static int lastrow;  /* last row of a field  */
           ^
elkscmd/xvi/xvi.c:1188:6: note: Shadow variable
 int lastrow;
     ^
elkscmd/xvi/xvi.c:1199:11: style: Variable 'lastrow' is assigned a value that is never used. [unreadVariable]
  lastrow = curfield.lr = FIRSTROW;
          ^
elkscmd/xvi/xvi.c:1910:19: style: Unused variable: padstr [unusedVariable]
 register char   *padstr;
                  ^
elkscmd/xvi/xvi.c:1911:6: style: Unused variable: ldisc [unusedVariable]
 int ldisc;
     ^
elkscmd/xvi/xvi.c:570:0: information: Skipping configuration 'PC' since the value of 'PC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
extern char PC;
^
elkscmd/xvi/xvi.c:4328:0: information: Skipping configuration 'SIGTSTP' since the value of 'SIGTSTP' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 signal(SIGTSTP,stopproc);                                  /* tjp */
^
elkscmd/xvi/xvi.c:4436:0: information: Skipping configuration 'SIGTSTP' since the value of 'SIGTSTP' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 signal(SIGTSTP,stopignore);
^
elkscmd/xvi/xvi.c:4676:0: information: Skipping configuration 'SIGTSTP' since the value of 'SIGTSTP' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 signal(SIGTSTP,stopignore);
^
elkscmd/xvi/xvi.c:4699:0: information: Skipping configuration 'SIGTSTP' since the value of 'SIGTSTP' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 signal(SIGTSTP,stopproc);
^
elksemu/binfmt_elks.c:58:6: style: Condition 'i_arg' is always false [knownConditionTrueFalse]
 if (i_arg) {
     ^
elksemu/binfmt_elks.c:38:10: note: Assignment 'i_arg=0', assigned value is 0
 i_arg = 0;
         ^
elksemu/binfmt_elks.c:58:6: note: Condition 'i_arg' is always false
 if (i_arg) {
     ^
elksemu/elks.c:176:2: portability: %d in format string (no. 1) requires 'int' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]
 fprintf(stderr, "Argv = (%d,%d), Envp=(%d,%d), stack=%d\n",
 ^
elksemu/elks.c:176:2: portability: %d in format string (no. 2) requires 'int' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]
 fprintf(stderr, "Argv = (%d,%d), Envp=(%d,%d), stack=%d\n",
 ^
elksemu/elks.c:176:2: portability: %d in format string (no. 3) requires 'int' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]
 fprintf(stderr, "Argv = (%d,%d), Envp=(%d,%d), stack=%d\n",
 ^
elksemu/elks.c:176:2: portability: %d in format string (no. 4) requires 'int' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]
 fprintf(stderr, "Argv = (%d,%d), Envp=(%d,%d), stack=%d\n",
 ^
elksemu/elks.c:176:2: portability: %d in format string (no. 5) requires 'int' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_sint]
 fprintf(stderr, "Argv = (%d,%d), Envp=(%d,%d), stack=%d\n",
 ^
elksemu/elks.c:265:2: warning: %lX in format string (no. 1) requires 'unsigned long' but the argument type is 'unsigned int'. [invalidPrintfArgType_uint]
 fprintf(stderr,"Linux-86 binary - %lX. tseg=%ld dseg=%ld bss=%ld\n",
 ^
elksemu/elks.c:265:2: warning: %ld in format string (no. 2) requires 'long' but the argument type is 'unsigned short'. [invalidPrintfArgType_sint]
 fprintf(stderr,"Linux-86 binary - %lX. tseg=%ld dseg=%ld bss=%ld\n",
 ^
elksemu/elks.c:265:2: warning: %ld in format string (no. 3) requires 'long' but the argument type is 'unsigned short'. [invalidPrintfArgType_sint]
 fprintf(stderr,"Linux-86 binary - %lX. tseg=%ld dseg=%ld bss=%ld\n",
 ^
elksemu/elks.c:265:2: warning: %ld in format string (no. 4) requires 'long' but the argument type is 'unsigned short'. [invalidPrintfArgType_sint]
 fprintf(stderr,"Linux-86 binary - %lX. tseg=%ld dseg=%ld bss=%ld\n",
 ^
elksemu/elks_signal.c:17:34: style: Unused variable: pid [unusedVariable]
   pid_t child = elks_cpu.child, pid;
                                 ^
elksemu/elks_signal.c:18:8: style: Unused variable: status [unusedVariable]
   int status;
       ^
elksemu/elks_sys.c:721:34: style: Boolean result is used in bitwise operation. Clarify expression with parentheses. [clarifyCondition]
 if (brk_at >= elks_cpu.regs.xsp ^ brk_at + bx >= elks_cpu.regs.xsp)
                                 ^
elksemu/elks_sys.c:707:19: warning: Invalid test for overflow 'brk_at+bx<brk_at'; signed integer overflow is undefined behavior. Some mainstream compilers removes handling of overflows when optimising the code and change the code to 'bx<0'. [invalidTestForOverflow]
  if (brk_at + bx < brk_at)
                  ^
elksemu/elks_sys.c:420:6: style: Variable 'base' is assigned a value that is never used. [unreadVariable]
 base=ELKS_PTR(unsigned char, cx);
     ^
libc/getent/__getgrent.c:80:5: error: Common realloc mistake: 'line_buff' nulled but not freed upon failure [memleakOnRealloc]
    line_buff = realloc(line_buff, buff_size);
    ^
libc/getent/__getgrent.c:97:13: error: Common realloc mistake: 'line_buff' nulled but not freed upon failure [memleakOnRealloc]
            line_buff = realloc(line_buff, buff_size);
            ^
libc/getent/__getgrent.c:152:9: error: Common realloc mistake: 'members' nulled but not freed upon failure [memleakOnRealloc]
        members = (char **)realloc((void *)members, (member_num + 1) * sizeof(char *));
        ^
libc/malloc/__mini_malloc.c:18:11: style: Checking if unsigned expression 'size' is less than zero. [unsignedLessThanZero]
 if (size <= 0)
          ^
libc/malloc/alloca.c:46:11: error: Returning pointer to local variable 'probe' that will be invalid when returning. [returnDanglingLifetime]
   return (void *) (hp + 2);
          ^
libc/malloc/alloca.c:42:17: note: Address of variable taken here.
   m_deep(hp) = &probe;
                ^
libc/malloc/alloca.c:15:14: note: Variable created here.
   auto char probe;  /* Probes stack depth: */
             ^
libc/malloc/alloca.c:46:11: note: Returning pointer to local variable 'probe' that will be invalid when returning.
   return (void *) (hp + 2);
          ^
libc/malloc/free.c:46:4: warning: Either the condition '__freed_list' is redundant or there is possible null pointer dereference: prev. [nullPointerRedundantCheck]
   m_next(prev) = chk;
   ^
libc/malloc/free.c:37:7: note: Assuming that condition '__freed_list' is not redundant
  if (__freed_list || chk > __freed_list) {
      ^
libc/malloc/free.c:42:11: note: Assignment 'prev=__freed_list', assigned value is 0
   prev = __freed_list;
          ^
libc/malloc/free.c:46:4: note: Null pointer dereference
   m_next(prev) = chk;
   ^
libc/malloc/malloc.c:258:0: information: Skipping configuration 'MCHUNK' since the value of 'MCHUNK' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
         alloc = sizeof(mem) * (MCHUNK * ((sz + MCHUNK - 1) / MCHUNK) - 1);
^
libc/malloc/malloc.c:199:0: information: Skipping configuration 'MINALLOC' since the value of 'MINALLOC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
   if (sz < MINALLOC)
^
libc/malloc/malloc.c:200:0: information: Skipping configuration 'MINALLOC' since the value of 'MINALLOC' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      sz = MINALLOC;
^
libc/malloc/v7malloc.c:241:15: style:inconclusive: Boolean expression 'x==1' is used in bitwise operation. Did you mean '||'? [bitwiseOnBoolean]
 return((x==1)|(p==allocp));
              ^
libc/malloc/v7malloc.c:100:23: warning: Invalid test for overflow 'p+nw>=p'; pointer overflow is undefined behavior. Some mainstream compilers removes handling of overflows when optimising the code and change the code to 'nw>=0'. [invalidTestForOverflow]
    if(q>=p+nw && p+nw>=p)
                      ^
libc/malloc/v7malloc.c:268:2: warning: %u in format string (no. 1) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
 printf("Total alloc %u, free %u\n", alloc, free);
 ^
libc/malloc/v7malloc.c:268:2: warning: %u in format string (no. 2) requires 'unsigned int' but the argument type is 'signed int'. [invalidPrintfArgType_uint]
 printf("Total alloc %u, free %u\n", alloc, free);
 ^
libc/malloc/v7malloc.c:196:8: error: Dereferencing 'p' after it is deallocated / released [deallocuse]
 onw = p[-1].ptr - p;
       ^
libc/malloc/v7malloc.c:249:6: style: The scope of the variable 'size' can be reduced. [variableScope]
 int size, alloc = 0, free = 0;
     ^
libc/malloc/v7malloc.c:249:23: style: Local variable 'free' shadows outer function [shadowFunction]
 int size, alloc = 0, free = 0;
                      ^
libc/malloc/v7malloc.c:160:1: note: Shadowed declaration
free(void *ptr)
^
libc/malloc/v7malloc.c:249:23: note: Shadow variable
 int size, alloc = 0, free = 0;
                      ^
libc/math/e_acos.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 50 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/e_acos.c:78:18: style: Same expression on both sides of '/'. [duplicateExpression]
     return (x-x)/(x-x);  /* acos(|x|>1) is NaN */
                 ^
libc/math/e_acosf.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/e_acosf.c:47:18: style: Same expression on both sides of '/'. [duplicateExpression]
     return (x-x)/(x-x);  /* acos(|x|>1) is NaN */
                 ^
libc/math/e_asin.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 50 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/e_asin.c:83:18: style: Same expression on both sides of '/'. [duplicateExpression]
     return (x-x)/(x-x);  /* asin(|x|>1) is NaN */
                 ^
libc/math/e_asin.c:73:21: style: The scope of the variable 'c' can be reduced. [variableScope]
 double t=0.0,w,p,q,c,r,s;
                    ^
libc/math/e_asin.c:73:23: style: The scope of the variable 'r' can be reduced. [variableScope]
 double t=0.0,w,p,q,c,r,s;
                      ^
libc/math/e_asinf.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/e_asinf.c:46:18: style: Same expression on both sides of '/'. [duplicateExpression]
     return (x-x)/(x-x);  /* asin(|x|>1) is NaN */
                 ^
libc/math/e_exp.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/e_expf.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/e_log.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/e_log.c:90:9: style: The scope of the variable 'hfsq' can be reduced. [variableScope]
 double hfsq,f,s,z,R,w,t1,t2,dk;
        ^
libc/math/e_log10.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/e_log10f.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/e_logf.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/e_logf.c:38:8: style: The scope of the variable 'hfsq' can be reduced. [variableScope]
 float hfsq,f,s,z,R,w,t1,t2,dk;
       ^
libc/math/e_pow.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/e_pow.c:199:8: style: Condition 'ix>=0x3ff00000' is always true [knownConditionTrueFalse]
  if(ix>=0x3ff00000) return (hy>0)? huge*huge:tiny*tiny;
       ^
libc/math/e_pow.c:198:8: note: Assuming that condition 'ix<=0x3fefffff' is not redundant
  if(ix<=0x3fefffff) return (hy<0)? huge*huge:tiny*tiny;
       ^
libc/math/e_pow.c:199:8: note: Condition 'ix>=0x3ff00000' is always true
  if(ix>=0x3ff00000) return (hy>0)? huge*huge:tiny*tiny;
       ^
libc/math/e_pow.c:175:13: style: Same expression on both sides of '/'. [duplicateExpression]
   z = (z-z)/(z-z); /* (-1)**non-int is NaN */
            ^
libc/math/e_pow.c:190:32: style: Same expression on both sides of '/'. [duplicateExpression]
 if((n|yisint)==0) return (x-x)/(x-x);
                               ^
libc/math/e_pow.c:101:14: style: The scope of the variable 'z_h' can be reduced. [variableScope]
 double z,ax,z_h,z_l,p_h,p_l;
             ^
libc/math/e_pow.c:101:18: style: The scope of the variable 'z_l' can be reduced. [variableScope]
 double z,ax,z_h,z_l,p_h,p_l;
                 ^
libc/math/e_pow.c:134:12: portability: Shifting signed 32-bit value by 31 bits is implementation-defined behaviour. See condition at line 132. [shiftTooManyBitsSigned]
      if((j<<(52-k))==ly) yisint = 2-(j&1);
           ^
libc/math/e_pow.c:132:7: note: Assuming that condition 'k>20' is not redundant
  if(k>20) {
      ^
libc/math/e_pow.c:134:12: note: Shift
      if((j<<(52-k))==ly) yisint = 2-(j&1);
           ^
libc/math/e_powf.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/e_powf.c:220:12: style: Condition 'j==0xc3160000' is always false [knownConditionTrueFalse]
 else if (j==0xc3160000){   /* z == -150 */
           ^
libc/math/e_powf.c:213:7: note: Assuming that condition 'j>0x43000000' is not redundant
 if (j>0x43000000)    /* if z > 128 */
      ^
libc/math/e_powf.c:220:12: note: Condition 'j==0xc3160000' is always false
 else if (j==0xc3160000){   /* z == -150 */
           ^
libc/math/e_powf.c:122:16: style: Same expression on both sides of '/'. [duplicateExpression]
      z = (z-z)/(z-z); /* (-1)**non-int is NaN */
               ^
libc/math/e_powf.c:132:32: style: Same expression on both sides of '/'. [duplicateExpression]
 if((n|yisint)==0) return (x-x)/(x-x);
                               ^
libc/math/e_powf.c:62:13: style: The scope of the variable 'z_h' can be reduced. [variableScope]
 float z,ax,z_h,z_l,p_h,p_l;
            ^
libc/math/e_powf.c:62:17: style: The scope of the variable 'z_l' can be reduced. [variableScope]
 float z,ax,z_h,z_l,p_h,p_l;
                ^
libc/math/e_powf.c:63:19: style: The scope of the variable 's' can be reduced. [variableScope]
 float y1,t1,t2,r,s,sn,t,u,v,w;
                  ^
libc/math/e_rem_pio2.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 50 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/e_rem_pio2f.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 50 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/e_sqrt.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/e_sqrt.c:113:15: style: Same expression on both sides of '/'. [duplicateExpression]
  return (x-x)/(x-x);  /* sqrt(-ve) = sNaN */
              ^
libc/math/e_sqrt.c:99:23: style: The scope of the variable 'i' can be reduced. [variableScope]
 int32_t ix0,s0,q,m,t,i;
                      ^
libc/math/e_sqrt.c:100:14: style: The scope of the variable 't1' can be reduced. [variableScope]
 u_int32_t r,t1,s1,ix1,q1;
             ^
libc/math/e_sqrtf.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/e_sqrtf.c:41:15: style: Same expression on both sides of '/'. [duplicateExpression]
  return (x-x)/(x-x);  /* sqrt(-ve) = sNaN */
              ^
libc/math/e_sqrtf.c:27:19: style: The scope of the variable 't' can be reduced. [variableScope]
 int32_t ix,s,q,m,t,i;
                  ^
libc/math/e_sqrtf.c:27:21: style: The scope of the variable 'i' can be reduced. [variableScope]
 int32_t ix,s,q,m,t,i;
                    ^
libc/math/k_cos.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/k_cosf.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/k_rem_pio2.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/k_rem_pio2.c:383:6: style: The if condition is the same as the previous if condition [duplicateCondition]
 if(z==0.0) {
     ^
libc/math/k_rem_pio2.c:288:11: note: 'zero' is assigned value '0.0' here.
zero   = 0.0,
          ^
libc/math/k_rem_pio2.c:366:6: note: First condition
 if(z==zero) {
     ^
libc/math/k_rem_pio2.c:383:6: note: Second condition
 if(z==0.0) {
     ^
libc/math/k_rem_pio2.c:419:3: warning: Redundant assignment of 'fw' to itself. [selfAssignment]
  STRICT_ASSIGN(double,fw,fw);
  ^
libc/math/k_sin.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/k_sinf.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/k_tan.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/k_tanf.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/s_atan.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 50 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/s_atanf.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/s_copysign.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/s_copysignf.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/s_cos.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/s_cos.c:57:14: style: The scope of the variable 'z' can be reduced. [variableScope]
 double y[2],z=0.0;
             ^
libc/math/s_cosf.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/s_fabs.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/s_fabsf.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/s_floor.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 50 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/s_floor.c:38:11: portability: Shifting a negative value is technically undefined behaviour [shiftNegativeLHS]
 j0 = ((i0>>20)&0x7ff)-0x3ff;
          ^
libc/math/s_floorf.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/s_floorf.c:40:11: portability: Shifting a negative value is technically undefined behaviour [shiftNegativeLHS]
 j0 = ((i0>>23)&0xff)-0x7f;
          ^
libc/math/s_scalbn.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/s_scalbnf.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/s_sin.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/s_sin.c:57:14: style: The scope of the variable 'z' can be reduced. [variableScope]
 double y[2],z=0.0;
             ^
libc/math/s_sinf.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/s_tan.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/math/s_tan.c:56:14: style: The scope of the variable 'z' can be reduced. [variableScope]
 double y[2],z=0.0;
             ^
libc/math/s_tanf.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 49 configurations. Use --force to check all configurations. [toomanyconfigs]

^
libc/misc/basename.c:10:16: style: The scope of the variable 'def' can be reduced. [variableScope]
  static char *def = ".";
               ^
libc/misc/crypt.c:42:13: error: Buffer is accessed out of bounds: rkey [bufferAccessOutOfBounds]
  memcpy(k, rkey, 4*sizeof(long));
            ^
libc/misc/ecvt.c:22:17: style: The scope of the variable 'pow' can be reduced. [variableScope]
   int   decpt, pow, i;
                ^
libc/misc/ecvt.c:22:22: style: The scope of the variable 'i' can be reduced. [variableScope]
   int   decpt, pow, i;
                     ^
libc/misc/ecvt.c:62:9: style: The scope of the variable 'n' can be reduced. [variableScope]
  int   n;
        ^
libc/misc/instrument.c:44:5: portability: %u in format string (no. 2) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_uint]
    printf("@%04x stack %u/%u\n", (int)calling_fn, stack_used, max_stack);
    ^
libc/misc/instrument.c:44:5: portability: %u in format string (no. 3) requires 'unsigned int' but the argument type is 'size_t {aka unsigned long}'. [invalidPrintfArgType_uint]
    printf("@%04x stack %u/%u\n", (int)calling_fn, stack_used, max_stack);
    ^
libc/misc/lltostr.c:9:22: warning: Either the condition 'p' is redundant or there is possible null pointer dereference: --p. [nullPointerRedundantCheck]
   if(p && val < 0) *--p = '-';
                     ^
libc/misc/lltostr.c:9:7: note: Assuming condition 'p' is true
   if(p && val < 0) *--p = '-';
      ^
libc/misc/lltostr.c:9:22: note: Null pointer dereference
   if(p && val < 0) *--p = '-';
                     ^
libc/misc/ltostr.c:12:22: warning: Either the condition 'p' is redundant or there is possible null pointer dereference: --p. [nullPointerRedundantCheck]
   if(p && val < 0) *--p = '-';
                     ^
libc/misc/ltostr.c:12:7: note: Assuming condition 'p' is true
   if(p && val < 0) *--p = '-';
      ^
libc/misc/ltostr.c:12:22: note: Null pointer dereference
   if(p && val < 0) *--p = '-';
                     ^
libc/misc/qsort.c:64:13: portability: 'a' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
  swap(a, a + i * width, width);
            ^
libc/misc/strtod.c:30:10: style: The scope of the variable 'fp_part' can be reduced. [variableScope]
  double fp_part, fp_divisor;
         ^
libc/misc/strtod.c:30:19: style: The scope of the variable 'fp_divisor' can be reduced. [variableScope]
  double fp_part, fp_divisor;
                  ^
libc/misc/wildcard.c:99:22: warning: Either the condition 'pattern==NULL' is redundant or there is possible null pointer dereference: pattern++. [nullPointerRedundantCheck]
        ch = *pattern++;
                     ^
libc/misc/wildcard.c:150:21: note: Assuming that condition 'pattern==NULL' is not redundant
        if (pattern == NULL)
                    ^
libc/misc/wildcard.c:101:17: note: Assuming condition is false
        switch (ch) {
                ^
libc/misc/wildcard.c:99:22: note: Null pointer dereference
        ch = *pattern++;
                     ^
libc/misc/wildcard.c:99:22: warning: Either the condition 'pattern==NULL' is redundant or there is pointer arithmetic with NULL pointer. [nullPointerArithmeticRedundantCheck]
        ch = *pattern++;
                     ^
libc/misc/wildcard.c:150:21: note: Assuming that condition 'pattern==NULL' is not redundant
        if (pattern == NULL)
                    ^
libc/misc/wildcard.c:101:17: note: Assuming condition is false
        switch (ch) {
                ^
libc/misc/wildcard.c:99:22: note: Null pointer addition
        ch = *pattern++;
                     ^
libc/misc/wildcard.c:92:9: style: The scope of the variable 'ch' can be reduced. [variableScope]
    int ch;
        ^
libc/net/in_ntoa.c:11:35: error: The address of local variable 'in' is accessed at non-zero index. [objectIndex]
 sprintf(b, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
                                  ^
libc/net/in_ntoa.c:10:23: note: Address of variable taken here.
 p = (unsigned char *)&in;
                      ^
libc/net/in_ntoa.c:11:35: note: The address of local variable 'in' is accessed at non-zero index.
 sprintf(b, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
                                  ^
libc/regex/regex.c:227:3: error: Memory leak: r [memleak]
  return(NULL);
  ^
libc/regex/regex.c:197:15: style: The scope of the variable 'len' can be reduced. [variableScope]
 register int len;
              ^
libc/regex/regex.c:489:0: information: Skipping configuration 'CHARBITS' since the value of 'CHARBITS' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      class = UCHARAT(regparse-2)+1;
^
libc/regex/regex.c:490:0: information: Skipping configuration 'CHARBITS' since the value of 'CHARBITS' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
      classend = UCHARAT(regparse);
^
libc/regex/regex.c:715:0: information: Skipping configuration 'CHARBITS' since the value of 'CHARBITS' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 if (UCHARAT(prog->program) != MAGIC) {
^
libc/regex/regex.c:1065:17: style: The scope of the variable 'next' can be reduced. [variableScope]
 register char *next;
                ^
libc/stdio/fclose.c:43:22: style: The comparison 'prev == 0' is always true. [knownConditionTrueFalse]
            if (prev == 0)
                     ^
libc/stdio/fclose.c:36:22: note: 'prev' is assigned value '0' here.
        FILE *prev = 0, *ptr;
                     ^
libc/stdio/fclose.c:43:22: note: The comparison 'prev == 0' is always true.
            if (prev == 0)
                     ^
libc/stdio/fclose.c:36:15: style: The scope of the variable 'prev' can be reduced. [variableScope]
        FILE *prev = 0, *ptr;
              ^
libc/stdio/fflush.c:13:11: portability: fflush() called on input stream 'stdin' may result in undefined behaviour on non-linux systems. [fflushOnInputStream]
      if (fflush(stdin))
          ^
libc/stdio/fflush.c:9:15: style: The scope of the variable 'cc' can be reduced. [variableScope]
   int   len, cc, rv=0;
              ^
libc/stdio/fflush.c:10:20: style: The scope of the variable 'bstart' can be reduced. [variableScope]
   unsigned char * bstart;
                   ^
libc/stdio/fgets.c:8:18: style: The scope of the variable 'ch' can be reduced. [variableScope]
    register int ch;
                 ^
libc/stdio/getdelim.c:49:11: error: Common realloc mistake: 'buf' nulled but not freed upon failure [memleakOnRealloc]
    if (!(buf = realloc(buf, *n + GETDELIM_GROWBY))) {
          ^
libc/stdio/getdelim.c:32:6: style: The scope of the variable 'c' can be reduced. [variableScope]
 int c;
     ^
libc/stdio/setvbuf.c:17:16: style: Checking if unsigned expression 'size' is less than zero. [unsignedLessThanZero]
      if( size <= 0  ) size = BUFSIZ;
               ^
libc/stdio/vfprintf.c:109:10: style: Unused variable: tmp [unusedVariable]
   char  tmp[64];
         ^
libc/string/memchr.c:28:15: error: syntax error: ! return [syntaxError]
  mov ax,di ! return
              ^
libc/string/memchr.c:13:25: error: syntax error [syntaxError]
  push ds ; Im not sure if this is needed, so just in case.
                        ^
libc/string/movedata.c:39:24: error: syntax error [syntaxError]
  ; How about allowing for overlapping moves ?
                       ^
libc/string/strchr.c:17:3: style: Same expression on both sides of '^'. [duplicateExpression]
  xor ax,ax
  ^
libc/string/strncmp.c:14:25: error: syntax error [syntaxError]
  push ds ! Im not sure if this is needed, so just in case.
                        ^
libc/termcap/termcap.c:31:18: style: The scope of the variable 'y' can be reduced. [variableScope]
  register char *y;
                 ^
libc/termcap/tgetent.c:57:16: style: The scope of the variable 'nread' can be reduced. [variableScope]
  register int nread;
               ^
libc/termcap/tgetent.c:101:16: style: The scope of the variable 'c1' can be reduced. [variableScope]
  register int c1, c2;
               ^
libc/termcap/tgetent.c:101:20: style: The scope of the variable 'c2' can be reduced. [variableScope]
  register int c1, c2;
                   ^
libc/termcap/tgetent.c:219:0: information: Skipping configuration 'TIOCGWINSZ' since the value of 'TIOCGWINSZ' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
  if (ioctl(0, TIOCGWINSZ, &ws) != 0 || !ws.ws_row || !ws.ws_col)
^
libc/termios/cfsetospeed.c:8:0: information: Skipping configuration 'CBAUDEX' since the value of 'CBAUDEX' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
 || ((speed & CBAUDEX) && (speed < B57600 || speed > B115200)))
^
libc/time/asc_conv.c:17:16: style: The scope of the variable 'days' can be reduced. [variableScope]
   static char days[] = "SunMonTueWedThuFriSat";
               ^
libc/time/asc_conv.c:18:16: style: The scope of the variable 'mons' can be reduced. [variableScope]
   static char mons[] = "JanFebMarAprMayJunJulAugSepOctNovDec";
               ^
elks/tools/mfs/utils.c:86:32: warning: Null pointer dereference: fp [ctunullpointer]
  if (cnt != fwrite(buff,1,cnt,fp)) {
                               ^
elks/tools/mfs/reader.c:103:7: note: Assuming that condition '!fp' is not redundant

      ^
elks/tools/mfs/reader.c:104:19: note: Calling function readfile, 2nd argument is null
  inode = readfile(fs,fp,argv[1],S_IFREG,0);
                  ^
elks/tools/mfs/reader.c:65:7: note: Calling function dofwrite, 1st argument is null
      dofwrite(fp,blk,bsz);
      ^
elks/tools/mfs/utils.c:86:32: note: Dereferencing argument fp that is null
  if (cnt != fwrite(buff,1,cnt,fp)) {
                               ^
elks/tools/mfs/writer.c:45:34: warning: Null pointer dereference: fp [ctunullpointer]
    bsz = fread(blk,1,BLOCK_SIZE,fp);
                                 ^
elks/tools/mfs/writer.c:215:7: note: Assuming that condition '!fp' is not redundant

      ^
elks/tools/mfs/writer.c:263:12: note: Calling function writefile, 2nd argument is null
  writefile(fs,fp,inode);
           ^
elks/tools/mfs/writer.c:45:34: note: Dereferencing argument fp that is null
    bsz = fread(blk,1,BLOCK_SIZE,fp);
                                 ^
elkscmd/nano/nano-2.0.6/src/files.c:378:30: warning: Null pointer dereference: f [ctunullpointer]
    while ((input_int = getc(f)) != EOF) {
                             ^
elkscmd/nano/nano-2.0.6/src/text.c:495:11: note: Assuming that condition 'f==NULL' is not redundant

          ^
elkscmd/nano/nano-2.0.6/src/text.c:498:14: note: Calling function read_file, 1st argument is null
    read_file(f, "stdin");
             ^
elkscmd/nano/nano-2.0.6/src/files.c:378:30: note: Dereferencing argument f that is null
    while ((input_int = getc(f)) != EOF) {
                             ^
elkscmd/misc_utils/mined2.c:467:0: style: The function 'CTL' is never used. [unusedFunction]

^
elkscmd/nano-X/engine/devdraw.c:1361:0: style: The function 'GdBlit' is never used. [unusedFunction]

^
elkscmd/nano-X/engine/devdraw.c:1344:0: style: The function 'GdCopyArea' is never used. [unusedFunction]

^
elkscmd/nano-X/engine/devdraw.c:806:0: style: The function 'GdDrawImage' is never used. [unusedFunction]

^
elkscmd/nano-X/engine/devdraw.c:589:0: style: The function 'GdGetTextSize' is never used. [unusedFunction]

^
elkscmd/nano-X/engine/devrgn.c:803:0: style: The function 'GdIntersectRegion' is never used. [unusedFunction]

^
elkscmd/nano-X/engine/devrgn.c:131:0: style: The function 'GdPtInRegion' is never used. [unusedFunction]

^
elkscmd/nano-X/engine/devrgn.c:144:0: style: The function 'GdRectInRegion' is never used. [unusedFunction]

^
elkscmd/nano-X/engine/devmouse.c:126:0: style: The function 'GdSetAccelMouse' is never used. [unusedFunction]

^
elkscmd/nano-X/engine/devrgn.c:1208:0: style: The function 'GdXorRegion' is never used. [unusedFunction]

^
elkscmd/nano-X/nanox/client.c:1060:0: style: The function 'GrBitmap' is never used. [unusedFunction]

^
elkscmd/nano-X/nanox/client.c:559:0: style: The function 'GrCopyGC' is never used. [unusedFunction]

^
elkscmd/nano-X/nanox/client.c:578:0: style: The function 'GrDestroyGC' is never used. [unusedFunction]

^
elkscmd/nano-X/nanox/client.c:512:0: style: The function 'GrDestroyWindow' is never used. [unusedFunction]

^
elkscmd/nano-X/nanox/client.c:275:0: style: The function 'GrGetGCInfo' is never used. [unusedFunction]

^
elkscmd/nano-X/nanox/client.c:526:0: style: The function 'GrGetWindowInfo' is never used. [unusedFunction]

^
elkscmd/nano-X/nanox/client.c:790:0: style: The function 'GrMoveCursor' is never used. [unusedFunction]

^
elkscmd/nano-X/nanox/client.c:480:0: style: The function 'GrNewInputWindow' is never used. [unusedFunction]

^
elkscmd/nano-X/nanox/client.c:404:0: style: The function 'GrPeekEvent' is never used. [unusedFunction]

^
elkscmd/nano-X/nanox/client.c:1198:0: style: The function 'GrPoly' is never used. [unusedFunction]

^
elkscmd/nano-X/nanox/client.c:670:0: style: The function 'GrResizeWindow' is never used. [unusedFunction]

^
elkscmd/nano-X/nanox/srvfunc.c:19:0: style: The function 'GsRedrawScreen' is never used. [unusedFunction]

^
elkscmd/nano-X/engine/list.c:12:0: style: The function 'ItemAlloc' is never used. [unusedFunction]

^
elkscmd/screen/screen.c:519:0: style: The function 'KillWindow' is never used. [unusedFunction]

^
elkscmd/nano-X/engine/list.c:19:0: style: The function 'ListAdd' is never used. [unusedFunction]

^
elkscmd/nano-X/engine/list.c:34:0: style: The function 'ListInsert' is never used. [unusedFunction]

^
elkscmd/nano-X/engine/list.c:48:0: style: The function 'ListRemove' is never used. [unusedFunction]

^
elkscmd/misc_utils/kilo.c:390:0: style: The function 'SPeek' is never used. [unusedFunction]

^
libc/error/__assert.c:17:0: style: The function '__assert' is never used. [unusedFunction]

^
elkscmd/debug/instrument.c:39:0: style: The function '__cyg_profile_func_enter_simple' is never used. [unusedFunction]

^
elkscmd/debug/instrument.c:81:0: style: The function '__cyg_profile_func_exit_simple' is never used. [unusedFunction]

^
elks/fs/inode.c:315:0: style: The function '__iget' is never used. [unusedFunction]

^
elkscmd/nano/ncurses-5.2/ncurses/fallback.ansi.c:612:0: style: The function '_nc_fallback' is never used. [unusedFunction]

^
elkscmd/nano/ncurses-5.2/ncurses/base/lib_freeall.c:128:0: style: The function '_nc_free_and_exit' is never used. [unusedFunction]

^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/home_terminfo.c:47:0: style: The function '_nc_home_terminfo' is never used. [unusedFunction]

^
elkscmd/nano/ncurses-5.2/ncurses/tinfo/init_keytry.c:61:0: style: The function '_nc_init_keytry' is never used. [unusedFunction]

^
elkscmd/nano/ncurses-5.2/ncurses/base/sigaction.c:105:0: style: The function '_nc_sigaction' is never used. [unusedFunction]

^
elks/kernel/unused/wait.c:18:0: style: The function '_wait_event' is never used. [unusedFunction]

^
elks/kernel/sleepwake.c:138:0: style: The function '_wake_up' is never used. [unusedFunction]

^
elkscmd/elvis/blk.c:417:0: style: The function 'abortdo' is never used. [unusedFunction]

^
elkscmd/bc/util.c:114:0: style: The function 'arg_str' is never used. [unusedFunction]

^
libc/time/asctime.c:7:0: style: The function 'asctime' is never used. [unusedFunction]

^
elks/arch/i86/kernel/asm-offsets.c:7:0: style: The function 'asm_offsets' is never used. [unusedFunction]

^
libc/misc/atexit.c:34:0: style: The function 'atexit_exit_all' is never used. [unusedFunction]

^
libc/misc/atof.c:9:0: style: The function 'atof' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/banner.c:126:0: style: The function 'banner_main' is never used. [unusedFunction]

^
libc/misc/aliases.c:61:0: style: The function 'bcmp' is never used. [unusedFunction]

^
elkscmd/nano/nano-2.0.6/src/winio.c:1832:0: style: The function 'blank_topbar' is never used. [unusedFunction]

^
elks/tools/elks-compress/exomizer/src/buf.c:154:0: style: The function 'buf_append_str' is never used. [unusedFunction]

^
elks/tools/elks-compress/exomizer/src/buf.c:90:0: style: The function 'buf_capacity' is never used. [unusedFunction]

^
elks/tools/elks-compress/exomizer/src/buf.c:74:0: style: The function 'buf_delete' is never used. [unusedFunction]

^
elks/tools/elks-compress/exomizer/src/buf.c:250:0: style: The function 'buf_freplace' is never used. [unusedFunction]

^
elks/tools/elks-compress/exomizer/src/buf.c:57:0: style: The function 'buf_new' is never used. [unusedFunction]

^
elkscmd/ash/bltin/catf.c:29:0: style: The function 'catfcmd' is never used. [unusedFunction]

^
elkscmd/ash/cd.c:82:0: style: The function 'cdcmd' is never used. [unusedFunction]

^
libc/termios/cfmakeraw.c:8:0: style: The function 'cfmakeraw' is never used. [unusedFunction]

^
elksemu/binfmt_elks.c:113:0: style: The function 'cleanup_module' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/clock.c:225:0: style: The function 'clock_main' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/clock.c:146:0: style: The function 'clock_usage' is never used. [unusedFunction]

^
elkscmd/nano/nano-2.0.6/src/files.c:268:0: style: The function 'close_buffer' is never used. [unusedFunction]

^
elkscmd/romprg/pc-serial.c:70:0: style: The function 'close_serial' is never used. [unusedFunction]

^
elkscmd/elvis/cmd1.c:1269:0: style: The function 'cmd_abbr' is never used. [unusedFunction]

^
elkscmd/elvis/cmd2.c:312:0: style: The function 'cmd_append' is never used. [unusedFunction]

^
elkscmd/elvis/cmd2.c:862:0: style: The function 'cmd_at' is never used. [unusedFunction]

^
elkscmd/elvis/cmd1.c:678:0: style: The function 'cmd_cd' is never used. [unusedFunction]

^
elkscmd/elvis/cmd1.c:35:0: style: The function 'cmd_debug' is never used. [unusedFunction]

^
elkscmd/elvis/cmd1.c:976:0: style: The function 'cmd_digraph' is never used. [unusedFunction]

^
elkscmd/elvis/cmd1.c:389:0: style: The function 'cmd_file' is never used. [unusedFunction]

^
elkscmd/elvis/cmd1.c:294:0: style: The function 'cmd_global' is never used. [unusedFunction]

^
elkscmd/elvis/cmd2.c:384:0: style: The function 'cmd_join' is never used. [unusedFunction]

^
elkscmd/elvis/cmd1.c:1234:0: style: The function 'cmd_make' is never used. [unusedFunction]

^
elkscmd/elvis/cmd1.c:706:0: style: The function 'cmd_map' is never used. [unusedFunction]

^
elkscmd/elvis/cmd1.c:152:0: style: The function 'cmd_mark' is never used. [unusedFunction]

^
elkscmd/elvis/cmd1.c:935:0: style: The function 'cmd_mkexrc' is never used. [unusedFunction]

^
elkscmd/elvis/cmd2.c:774:0: style: The function 'cmd_move' is never used. [unusedFunction]

^
elkscmd/elvis/cmd1.c:479:0: style: The function 'cmd_next' is never used. [unusedFunction]

^
elkscmd/elvis/cmd2.c:700:0: style: The function 'cmd_print' is never used. [unusedFunction]

^
elkscmd/elvis/cmd2.c:358:0: style: The function 'cmd_put' is never used. [unusedFunction]

^
elkscmd/elvis/cmd2.c:557:0: style: The function 'cmd_read' is never used. [unusedFunction]

^
elkscmd/elvis/cmd1.c:247:0: style: The function 'cmd_shell' is never used. [unusedFunction]

^
elkscmd/elvis/cmd2.c:462:0: style: The function 'cmd_shift' is never used. [unusedFunction]

^
elkscmd/elvis/cmd2.c:842:0: style: The function 'cmd_source' is never used. [unusedFunction]

^
elkscmd/elvis/cmd2.c:39:0: style: The function 'cmd_substitute' is never used. [unusedFunction]

^
elkscmd/elvis/cmd1.c:760:0: style: The function 'cmd_tag' is never used. [unusedFunction]

^
elkscmd/elvis/cmd2.c:687:0: style: The function 'cmd_undo' is never used. [unusedFunction]

^
elkscmd/elvis/cmd1.c:91:0: style: The function 'cmd_validate' is never used. [unusedFunction]

^
elkscmd/elvis/cmd1.c:908:0: style: The function 'cmd_version' is never used. [unusedFunction]

^
elkscmd/elvis/cmd1.c:892:0: style: The function 'cmd_visual' is never used. [unusedFunction]

^
elkscmd/elvis/cmd1.c:550:0: style: The function 'cmd_xit' is never used. [unusedFunction]

^
elkscmd/levee/main.c:79:0: style: The function 'ctrlc' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/cut.c:204:0: style: The function 'cut_main' is never used. [unusedFunction]

^
elkscmd/elvis/cut.c:209:0: style: The function 'cutend' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/date.c:78:0: style: The function 'date_main' is never used. [unusedFunction]

^
elkscmd/screen/screen.c:1898:0: style: The function 'dbgmsg' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/dd.c:42:0: style: The function 'dd_main' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/diff.c:131:0: style: The function 'diff_main' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/dirname.c:9:0: style: The function 'dirname_main' is never used. [unusedFunction]

^
elkscmd/sash/cmd_history.c:175:0: style: The function 'dmap_ind' is never used. [unusedFunction]

^
elks/arch/i86/kernel/irq.c:47:0: style: The function 'do_IRQ' is never used. [unusedFunction]

^
elks/arch/i86/kernel/signal.c:22:0: style: The function 'do_signal' is never used. [unusedFunction]

^
elkscmd/ash/main.c:314:0: style: The function 'dotcmd' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/du.c:191:0: style: The function 'du_main' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/echo.c:16:0: style: The function 'echo_main' is never used. [unusedFunction]

^
elkscmd/ash/bltin/echo.c:14:0: style: The function 'echocmd' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/ed.c:59:0: style: The function 'ed_main' is never used. [unusedFunction]

^
elkscmd/misc_utils/kilo.c:2122:0: style: The function 'editorFileWasModified' is never used. [unusedFunction]

^
elkscmd/nano-X/drivers/vgainit.c:69:0: style: The function 'ega_hwinit' is never used. [unusedFunction]

^
elkscmd/nano-X/drivers/vgainit.c:75:0: style: The function 'ega_hwterm' is never used. [unusedFunction]

^
elks/arch/i86/drivers/net/el3.c:449:0: style: The function 'el3_get_stats' is never used. [unusedFunction]

^
elksemu/elks_sys.c:332:0: style: The function 'elks_access' is never used. [unusedFunction]

^
elksemu/elks_sys.c:297:0: style: The function 'elks_alarm' is never used. [unusedFunction]

^
elksemu/elks_sys.c:232:0: style: The function 'elks_brk' is never used. [unusedFunction]

^
elksemu/elks_sys.c:196:0: style: The function 'elks_chdir' is never used. [unusedFunction]

^
elksemu/elks_sys.c:218:0: style: The function 'elks_chmod' is never used. [unusedFunction]

^
elksemu/elks_sys.c:225:0: style: The function 'elks_chown' is never used. [unusedFunction]

^
elksemu/elks_sys.c:480:0: style: The function 'elks_chroot' is never used. [unusedFunction]

^
elksemu/elks_sys.c:157:0: style: The function 'elks_close' is never used. [unusedFunction]

^
elksemu/elks_sys.c:517:0: style: The function 'elks_dup' is never used. [unusedFunction]

^
elksemu/elks_sys.c:523:0: style: The function 'elks_dup2' is never used. [unusedFunction]

^
elksemu/elks_sys.c:406:0: style: The function 'elks_execve' is never used. [unusedFunction]

^
elksemu/elks_sys.c:80:0: style: The function 'elks_exit' is never used. [unusedFunction]

^
elksemu/elks_sys.c:203:0: style: The function 'elks_fchdir' is never used. [unusedFunction]

^
elksemu/elks_sys.c:488:0: style: The function 'elks_fcntl' is never used. [unusedFunction]

^
elksemu/elks_sys.c:89:0: style: The function 'elks_fork' is never used. [unusedFunction]

^
elksemu/elks_sys.c:304:0: style: The function 'elks_fstat' is never used. [unusedFunction]

^
elksemu/elks_sys.c:388:0: style: The function 'elks_getgid' is never used. [unusedFunction]

^
elksemu/elks_sys.c:274:0: style: The function 'elks_getpid' is never used. [unusedFunction]

^
elksemu/elks_sys.c:550:0: style: The function 'elks_gettimeofday' is never used. [unusedFunction]

^
elksemu/elks_sys.c:289:0: style: The function 'elks_getuid' is never used. [unusedFunction]

^
elksemu/elks_sys.c:622:0: style: The function 'elks_ioctl' is never used. [unusedFunction]

^
elksemu/elks_sys.c:347:0: style: The function 'elks_kill' is never used. [unusedFunction]

^
elksemu/elks_sys.c:182:0: style: The function 'elks_link' is never used. [unusedFunction]

^
elksemu/elks_sys.c:262:0: style: The function 'elks_lseek' is never used. [unusedFunction]

^
elksemu/elks_sys.c:251:0: style: The function 'elks_lstat' is never used. [unusedFunction]

^
elksemu/elks_sys.c:536:0: style: The function 'elks_mkdir' is never used. [unusedFunction]

^
elksemu/elks_sys.c:211:0: style: The function 'elks_mknod' is never used. [unusedFunction]

^
elksemu/elks_sys.c:598:0: style: The function 'elks_nice' is never used. [unusedFunction]

^
elksemu/elks_sys.c:125:0: style: The function 'elks_open' is never used. [unusedFunction]

^
elksemu/elks_sys.c:315:0: style: The function 'elks_pause' is never used. [unusedFunction]

^
elksemu/elks_sys.c:354:0: style: The function 'elks_pipe' is never used. [unusedFunction]

^
elksemu/elks_sys.c:97:0: style: The function 'elks_read' is never used. [unusedFunction]

^
elksemu/elks_sys.c:612:0: style: The function 'elks_readlink' is never used. [unusedFunction]

^
elksemu/elks_sys.c:633:0: style: The function 'elks_reboot' is never used. [unusedFunction]

^
elksemu/elks_sys.c:529:0: style: The function 'elks_rename' is never used. [unusedFunction]

^
elksemu/elks_sys.c:543:0: style: The function 'elks_rmdir' is never used. [unusedFunction]

^
elksemu/elks_sys.c:697:0: style: The function 'elks_sbrk' is never used. [unusedFunction]

^
elksemu/elks_sys.c:382:0: style: The function 'elks_setgid' is never used. [unusedFunction]

^
elksemu/elks_sys.c:573:0: style: The function 'elks_settimeofday' is never used. [unusedFunction]

^
elksemu/elks_sys.c:282:0: style: The function 'elks_setuid' is never used. [unusedFunction]

^
elksemu/elks_signal.c:37:0: style: The function 'elks_signal' is never used. [unusedFunction]

^
elksemu/elks_sys.c:240:0: style: The function 'elks_stat' is never used. [unusedFunction]

^
elksemu/elks_sys.c:605:0: style: The function 'elks_symlink' is never used. [unusedFunction]

^
elksemu/elks_sys.c:339:0: style: The function 'elks_sync' is never used. [unusedFunction]

^
elksemu/elks_sys.c:367:0: style: The function 'elks_times' is never used. [unusedFunction]

^
elksemu/elks_sys.c:474:0: style: The function 'elks_umask' is never used. [unusedFunction]

^
elksemu/elks_sys.c:189:0: style: The function 'elks_unlink' is never used. [unusedFunction]

^
elksemu/elks_sys.c:322:0: style: The function 'elks_utime' is never used. [unusedFunction]

^
elksemu/elks_sys.c:166:0: style: The function 'elks_wait4' is never used. [unusedFunction]

^
elksemu/elks_sys.c:108:0: style: The function 'elks_write' is never used. [unusedFunction]

^
elkscmd/prems/b_prem/ENIG.TEST/enbit.c:22:0: style: The function 'en_bit' is never used. [unusedFunction]

^
elkscmd/tui/ttyinfo.c:59:0: style: The function 'endswith' is never used. [unusedFunction]

^
elks/kernel/unused/lock.c:31:0: style: The function 'event_unlock' is never used. [unusedFunction]

^
elkscmd/ash/main.c:327:0: style: The function 'exitcmd' is never used. [unusedFunction]

^
elkscmd/ash/var.c:422:0: style: The function 'exportcmd' is never used. [unusedFunction]

^
elkscmd/ash/bltin/expr.c:76:0: style: The function 'exprcmd' is never used. [unusedFunction]

^
elks/arch/i86/drivers/char/serial-8250.c:242:0: style: The function 'fast_com1_irq' is never used. [unusedFunction]

^
elks/arch/i86/drivers/char/serial-8250.c:261:0: style: The function 'fast_com2_irq' is never used. [unusedFunction]

^
elkscmd/nano-X/drivers/fbvt.c:48:0: style: The function 'fb_CheckVtChange' is never used. [unusedFunction]

^
elkscmd/nano-X/drivers/fbvt.c:74:0: style: The function 'fb_ExitVt' is never used. [unusedFunction]

^
elkscmd/nano-X/drivers/fbvt.c:20:0: style: The function 'fb_InitVt' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/fdisk.c:395:0: style: The function 'fdisk_main' is never used. [unusedFunction]

^
elks/arch/i86/lib/bitops.c:55:0: style: The function 'find_first_non_zero_bit' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/find.c:232:0: style: The function 'find_main' is never used. [unusedFunction]

^
elks/arch/i86/drivers/block/directfd.c:457:0: style: The function 'floppy_change' is never used. [unusedFunction]

^
elks/arch/i86/drivers/block/directfd.c:941:0: style: The function 'floppy_shutdown' is never used. [unusedFunction]

^
elks/kernel/dma.c:90:0: style: The function 'free_dma' is never used. [unusedFunction]

^
elks/tools/elks-compress/exomizer/src/optimal.c:591:0: style: The function 'freq_stats_dump' is never used. [unusedFunction]

^
elks/tools/elks-compress/exomizer/src/optimal.c:601:0: style: The function 'freq_stats_dump_raw' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/fsck.c:828:0: style: The function 'fsck_main' is never used. [unusedFunction]

^
elkscmd/debug/instrument.c:23:0: style: The function 'ftrace_checkargs' is never used. [unusedFunction]

^
elkscmd/nano-X/drivers/genfont.c:145:0: style: The function 'gen_drawtext' is never used. [unusedFunction]

^
elkscmd/sys_utils/init.c:373:0: style: The function 'getRunlevel' is never used. [unusedFunction]

^
elks/kernel/dma.c:61:0: style: The function 'get_dma_list' is never used. [unusedFunction]

^
elks/kernel/dma.c:229:0: style: The function 'get_dma_residue' is never used. [unusedFunction]

^
elks/arch/i86/drivers/block/idequery.c:74:0: style: The function 'get_ide_data' is never used. [unusedFunction]

^
elkscmd/ash/exec.c:754:0: style: The function 'getcmdentry' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/getty.c:182:0: style: The function 'getty_main' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/grep.c:72:0: style: The function 'grep_main' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/head.c:15:0: style: The function 'head_main' is never used. [unusedFunction]

^
elks/tools/elks-compress/exomizer/src/log.c:221:0: style: The function 'hex_dump' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/min_init.c:88:0: style: The function 'init_main' is never used. [unusedFunction]

^
elksemu/binfmt_elks.c:108:0: style: The function 'init_module' is never used. [unusedFunction]

^
elkscmd/elvis/opts.c:200:0: style: The function 'initopts' is never used. [unusedFunction]

^
libc/ctype/isblank.c:3:0: style: The function 'isblank' is never used. [unusedFunction]

^
elkscmd/advent/itverb.c:197:0: style: The function 'iveat' is never used. [unusedFunction]

^
elkscmd/advent/itverb.c:240:0: style: The function 'ivfill' is never used. [unusedFunction]

^
elkscmd/advent/itverb.c:296:0: style: The function 'ivread' is never used. [unusedFunction]

^
elkscmd/ash/jobs.c:224:0: style: The function 'jobscmd' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/kill.c:22:0: style: The function 'kill_main' is never used. [unusedFunction]

^
libc/system/killpg.c:5:0: style: The function 'killpg' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/l.c:44:0: style: The function 'l_main' is never used. [unusedFunction]

^
libc/misc/aliases.c:19:0: style: The function 'labs' is never used. [unusedFunction]

^
elkscmd/ash/main.c:336:0: style: The function 'lccmd' is never used. [unusedFunction]

^
elks/arch/i86/tools/imgdump.c:153:0: style: The function 'lddfiletype' is never used. [unusedFunction]

^
elks/tools/mkromfs/list.c:42:0: style: The function 'list_add_head' is never used. [unusedFunction]

^
libc/misc/lltostr.c:5:0: style: The function 'lltostr' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/ln.c:25:0: style: The function 'ln_main' is never used. [unusedFunction]

^
elkscmd/nano/nano-2.0.6/src/files.c:2465:0: style: The function 'load_history' is never used. [unusedFunction]

^
bootblocks/boot_minix.c:72:0: style: The function 'load_prog' is never used. [unusedFunction]

^
libc/math/e_log10.c:41:0: style: The function 'log10' is never used. [unusedFunction]

^
libc/math/e_log10f.c:37:0: style: The function 'log10f' is never used. [unusedFunction]

^
elks/tools/elks-compress/exomizer/src/log.c:209:0: style: The function 'log_log' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/login.c:94:0: style: The function 'login_main' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/logname.c:6:0: style: The function 'logname_main' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/ls.c:287:0: style: The function 'ls_main' is never used. [unusedFunction]

^
elkscmd/elvis/move2.c:41:0: style: The function 'm_Nsrch' is never used. [unusedFunction]

^
elkscmd/elvis/move3.c:21:0: style: The function 'm__ch' is never used. [unusedFunction]

^
elkscmd/elvis/move1.c:346:0: style: The function 'm_bparagraph' is never used. [unusedFunction]

^
elkscmd/elvis/move1.c:437:0: style: The function 'm_bsection' is never used. [unusedFunction]

^
elkscmd/elvis/move1.c:242:0: style: The function 'm_bsentence' is never used. [unusedFunction]

^
elkscmd/elvis/move5.c:92:0: style: The function 'm_bword' is never used. [unusedFunction]

^
elkscmd/elvis/move5.c:162:0: style: The function 'm_eword' is never used. [unusedFunction]

^
elkscmd/elvis/move1.c:303:0: style: The function 'm_fparagraph' is never used. [unusedFunction]

^
elkscmd/elvis/move1.c:389:0: style: The function 'm_fsection' is never used. [unusedFunction]

^
elkscmd/elvis/move1.c:193:0: style: The function 'm_fsentence' is never used. [unusedFunction]

^
elkscmd/elvis/move1.c:83:0: style: The function 'm_left' is never used. [unusedFunction]

^
elkscmd/elvis/move1.c:486:0: style: The function 'm_match' is never used. [unusedFunction]

^
elkscmd/elvis/move2.c:25:0: style: The function 'm_nsrch' is never used. [unusedFunction]

^
elkscmd/elvis/move1.c:180:0: style: The function 'm_rear' is never used. [unusedFunction]

^
elkscmd/elvis/move1.c:59:0: style: The function 'm_right' is never used. [unusedFunction]

^
elkscmd/elvis/move4.c:19:0: style: The function 'm_row' is never used. [unusedFunction]

^
elkscmd/elvis/move4.c:124:0: style: The function 'm_scroll' is never used. [unusedFunction]

^
elkscmd/elvis/move1.c:103:0: style: The function 'm_tocol' is never used. [unusedFunction]

^
elkscmd/elvis/move1.c:592:0: style: The function 'm_tomark' is never used. [unusedFunction]

^
elkscmd/elvis/move1.c:21:0: style: The function 'm_updnto' is never used. [unusedFunction]

^
elkscmd/elvis/move4.c:50:0: style: The function 'm_z' is never used. [unusedFunction]

^
elks/tools/elks-compress/exomizer/src/6502emu.c:81:0: style: The function 'mem_access_read_u16le' is never used. [unusedFunction]

^
libc/string/memccpy.c:5:0: style: The function 'memccpy' is never used. [unusedFunction]

^
elks/arch/i86/lib/unused/memdumpk.c:4:0: style: The function 'memdumpk' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/meminfo.c:16:0: style: The function 'meminfo_main' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/mesg.c:30:0: style: The function 'mesg_main' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/mesg.c:24:0: style: The function 'mesg_usage' is never used. [unusedFunction]

^
elks/arch/i86/drivers/char/meta.c:218:0: style: The function 'meta_lseek' is never used. [unusedFunction]

^
elks/arch/i86/drivers/char/meta.c:223:0: style: The function 'meta_read' is never used. [unusedFunction]

^
elks/arch/i86/drivers/char/meta.c:233:0: style: The function 'meta_select' is never used. [unusedFunction]

^
elks/arch/i86/drivers/char/meta.c:228:0: style: The function 'meta_write' is never used. [unusedFunction]

^
elks/fs/minix/inode.c:452:0: style: The function 'minix_sync_inode' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/mkdir.c:32:0: style: The function 'mkdir_main' is never used. [unusedFunction]

^
libc/system/mkfifo.c:5:0: style: The function 'mkfifo' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/mkfifo.c:6:0: style: The function 'mkfifo_main' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/mkfs.c:236:0: style: The function 'mkfs_main' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/mknod.c:9:0: style: The function 'mknod_main' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/more.c:22:0: style: The function 'more_main' is never used. [unusedFunction]

^
elks/arch/i86/drivers/block/directfd.c:386:0: style: The function 'motor_off_callback' is never used. [unusedFunction]

^
elks/arch/i86/drivers/block/directfd.c:371:0: style: The function 'motor_on_callback' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/mount.c:20:0: style: The function 'mount_main' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/mv.c:22:0: style: The function 'mv_main' is never used. [unusedFunction]

^
elkscmd/ash/bltin/nlecho.c:17:0: style: The function 'nlechocmd' is never used. [unusedFunction]

^
elkscmd/misc_utils/tar.c:848:0: style: The function 'onterm' is never used. [unusedFunction]

^
elkscmd/ash/output.c:106:0: style: The function 'open_mem' is never used. [unusedFunction]

^
elkscmd/nano-X/drivers/vgainit.c:135:0: style: The function 'out_word' is never used. [unusedFunction]

^
elks/tools/elks-compress/exomizer/src/output.c:99:0: style: The function 'output_word' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/partype.c:106:0: style: The function 'partype_main' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/passwd.c:30:0: style: The function 'passwd_main' is never used. [unusedFunction]

^
elkscmd/minix2/remsync.c:166:0: style: The function 'path_drop' is never used. [unusedFunction]

^
elkscmd/minix2/remsync.c:160:0: style: The function 'path_length' is never used. [unusedFunction]

^
elkscmd/minix2/remsync.c:154:0: style: The function 'path_name' is never used. [unusedFunction]

^
elks/tools/elks-compress/exomizer/src/pc.c:44:0: style: The function 'pc_set' is never used. [unusedFunction]

^
elks/tools/elks-compress/exomizer/src/pc.c:102:0: style: The function 'pc_unset' is never used. [unusedFunction]

^
elkscmd/nano-X/drivers/ramfont.c:94:0: style: The function 'pcrom_drawtext' is never used. [unusedFunction]

^
elks/tools/elks-compress/exomizer/src/perf.c:151:0: style: The function 'perf_fprint' is never used. [unusedFunction]

^
elks/tools/elks-compress/exomizer/src/perf.c:55:0: style: The function 'perf_init' is never used. [unusedFunction]

^
elkscmd/sash/cmd_history.c:194:0: style: The function 'phlist' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/stty.c:975:0: style: The function 'prctl' is never used. [unusedFunction]

^
elks/kernel/sleepwake.c:45:0: style: The function 'prepare_to_wait' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/printenv.c:22:0: style: The function 'printenv_main' is never used. [unusedFunction]

^
elkscmd/cron/cron.c:195:0: style: The function 'printtrig' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/ps.c:72:0: style: The function 'ps_main' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/pwd.c:4:0: style: The function 'pwd_main' is never used. [unusedFunction]

^
elkscmd/ash/cd.c:313:0: style: The function 'pwdcmd' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/ramdisk.c:9:0: style: The function 'ramdisk_main' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/reboot.c:22:0: style: The function 'reboot_main' is never used. [unusedFunction]

^
libc/regex/regex.c:1060:0: style: The function 'regdump' is never used. [unusedFunction]

^
elks/arch/i86/kernel/process.c:221:0: style: The function 'restart_syscall' is never used. [unusedFunction]

^
elks/arch/i86/kernel/strace.c:104:0: style: The function 'ret_strace' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/rm.c:6:0: style: The function 'rm_main' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/rmdir.c:27:0: style: The function 'rmdir_main' is never used. [unusedFunction]

^
elks/arch/i86/drivers/block/romflash.c:29:0: style: The function 'romflash_init' is never used. [unusedFunction]

^
elkscmd/bc/util.c:253:0: style: The function 'run_code' is never used. [unusedFunction]

^
elkscmd/nano/nano-2.0.6/src/files.c:2535:0: style: The function 'save_history' is never used. [unusedFunction]

^
libc/stdio/scanf.c:4:0: style: The function 'scanf' is never used. [unusedFunction]

^
elkscmd/ash/mystring.c:71:0: style: The function 'scopyn' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/sed.c:245:0: style: The function 'sed_main' is never used. [unusedFunction]

^
elks/arch/i86/drivers/block/directfd.c:343:0: style: The function 'select_callback' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/setenv.c:1:0: style: The function 'setenv_main' is never used. [unusedFunction]

^
elkscmd/nano-X/drivers/vgainit.c:151:0: style: The function 'setmode' is never used. [unusedFunction]

^
libc/system/setpgrp.c:5:0: style: The function 'setpgrp' is never used. [unusedFunction]

^
elkscmd/ash/var.c:569:0: style: The function 'setvarcmd' is never used. [unusedFunction]

^
elkscmd/misc_utils/kilo.c:440:0: style: The function 'showRecentCurPos' is never used. [unusedFunction]

^
libc/math/s_sin.c:55:0: style: The function 'sin' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/sort.c:312:0: style: The function 'sort_main' is never used. [unusedFunction]

^
elks/arch/i86/kernel/process.c:52:0: style: The function 'stack_check' is never used. [unusedFunction]

^
elks/init/main.c:83:0: style: The function 'start_kernel' is never used. [unusedFunction]

^
libc/stdio/init.c:11:0: style: The function 'stdio_close_all' is never used. [unusedFunction]

^
elks/arch/i86/kernel/strace.c:91:0: style: The function 'strace' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/stty.c:117:0: style: The function 'stty_main' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/swapon.c:18:0: style: The function 'swapon_main' is never used. [unusedFunction]

^
elkscmd/nano/nano-2.0.6/src/files.c:254:0: style: The function 'switch_to_prev_buffer_void' is never used. [unusedFunction]

^
elks/tools/elks-compress/exomizer/src/parse.c:711:0: style: The function 'symbol_dump_resolved' is never used. [unusedFunction]

^
elks/net/socket.c:398:0: style: The function 'sys_accept' is never used. [unusedFunction]

^
elks/fs/open.c:175:0: style: The function 'sys_access' is never used. [unusedFunction]

^
elks/kernel/sys2.c:36:0: style: The function 'sys_alarm' is never used. [unusedFunction]

^
elks/net/socket.c:320:0: style: The function 'sys_bind' is never used. [unusedFunction]

^
elks/fs/open.c:198:0: style: The function 'sys_chdir' is never used. [unusedFunction]

^
elks/fs/open.c:226:0: style: The function 'sys_chmod' is never used. [unusedFunction]

^
elks/fs/open.c:328:0: style: The function 'sys_chown' is never used. [unusedFunction]

^
elks/fs/open.c:212:0: style: The function 'sys_chroot' is never used. [unusedFunction]

^
elks/net/socket.c:445:0: style: The function 'sys_connect' is never used. [unusedFunction]

^
elks/fs/fcntl.c:35:0: style: The function 'sys_dup2' is never used. [unusedFunction]

^
elks/kernel/exit.c:163:0: style: The function 'sys_exit' is never used. [unusedFunction]

^
elks/fs/open.c:341:0: style: The function 'sys_fchown' is never used. [unusedFunction]

^
elks/fs/fcntl.c:53:0: style: The function 'sys_fcntl' is never used. [unusedFunction]

^
elks/arch/i86/mm/malloc.c:290:0: style: The function 'sys_fmemalloc' is never used. [unusedFunction]

^
elks/kernel/fork.c:132:0: style: The function 'sys_fork' is never used. [unusedFunction]

^
elks/fs/stat.c:108:0: style: The function 'sys_fstat' is never used. [unusedFunction]

^
elks/kernel/sys.c:122:0: style: The function 'sys_getgid' is never used. [unusedFunction]

^
elks/kernel/sys.c:300:0: style: The function 'sys_getgroups' is never used. [unusedFunction]

^
elks/kernel/sys.c:248:0: style: The function 'sys_getpgid' is never used. [unusedFunction]

^
elks/kernel/sys.c:260:0: style: The function 'sys_getpgrp' is never used. [unusedFunction]

^
elks/kernel/sys.c:127:0: style: The function 'sys_getpid' is never used. [unusedFunction]

^
elks/kernel/sys.c:265:0: style: The function 'sys_getsid' is never used. [unusedFunction]

^
elks/net/socket.c:594:0: style: The function 'sys_getsocknam' is never used. [unusedFunction]

^
elks/kernel/time.c:99:0: style: The function 'sys_gettimeofday' is never used. [unusedFunction]

^
elks/kernel/sys.c:117:0: style: The function 'sys_getuid' is never used. [unusedFunction]

^
elks/fs/ioctl.c:37:0: style: The function 'sys_ioctl' is never used. [unusedFunction]

^
elks/net/socket.c:377:0: style: The function 'sys_listen' is never used. [unusedFunction]

^
elks/fs/read_write.c:18:0: style: The function 'sys_lseek' is never used. [unusedFunction]

^
elks/fs/stat.c:95:0: style: The function 'sys_lstat' is never used. [unusedFunction]

^
elks/fs/namei.c:478:0: style: The function 'sys_mkdir' is never used. [unusedFunction]

^
elks/fs/namei.c:454:0: style: The function 'sys_mknod' is never used. [unusedFunction]

^
elks/fs/super.c:403:0: style: The function 'sys_mount' is never used. [unusedFunction]

^
elks/fs/pipe.c:337:0: style: The function 'sys_pipe' is never used. [unusedFunction]

^
elks/fs/read_write.c:84:0: style: The function 'sys_read' is never used. [unusedFunction]

^
elks/fs/readdir.c:45:0: style: The function 'sys_readdir' is never used. [unusedFunction]

^
elks/fs/stat.c:120:0: style: The function 'sys_readlink' is never used. [unusedFunction]

^
elks/kernel/sys.c:38:0: style: The function 'sys_reboot' is never used. [unusedFunction]

^
elks/fs/namei.c:562:0: style: The function 'sys_rename' is never used. [unusedFunction]

^
elks/fs/namei.c:521:0: style: The function 'sys_rmdir' is never used. [unusedFunction]

^
elks/arch/i86/mm/malloc.c:272:0: style: The function 'sys_sbrk' is never used. [unusedFunction]

^
elks/fs/select.c:195:0: style: The function 'sys_select' is never used. [unusedFunction]

^
elks/kernel/sys.c:97:0: style: The function 'sys_setgid' is never used. [unusedFunction]

^
elks/kernel/sys.c:320:0: style: The function 'sys_setgroups' is never used. [unusedFunction]

^
elks/kernel/sys.c:197:0: style: The function 'sys_setpgid' is never used. [unusedFunction]

^
elks/kernel/sys.c:280:0: style: The function 'sys_setsid' is never used. [unusedFunction]

^
elks/net/socket.c:546:0: style: The function 'sys_setsockopt' is never used. [unusedFunction]

^
elks/kernel/time.c:56:0: style: The function 'sys_settimeofday' is never used. [unusedFunction]

^
elks/kernel/sys.c:154:0: style: The function 'sys_setuid' is never used. [unusedFunction]

^
elks/kernel/signal.c:131:0: style: The function 'sys_signal' is never used. [unusedFunction]

^
elks/net/socket.c:512:0: style: The function 'sys_socket' is never used. [unusedFunction]

^
elks/fs/stat.c:82:0: style: The function 'sys_stat' is never used. [unusedFunction]

^
elks/fs/namei.c:532:0: style: The function 'sys_symlink' is never used. [unusedFunction]

^
elks/fs/buffer.c:546:0: style: The function 'sys_sync' is never used. [unusedFunction]

^
elks/kernel/sys.c:169:0: style: The function 'sys_times' is never used. [unusedFunction]

^
elks/kernel/sys.c:132:0: style: The function 'sys_umask' is never used. [unusedFunction]

^
elks/fs/super.c:260:0: style: The function 'sys_umount' is never used. [unusedFunction]

^
elks/kernel/sys.c:88:0: style: The function 'sys_uname' is never used. [unusedFunction]

^
elks/fs/super.c:140:0: style: The function 'sys_ustatfs' is never used. [unusedFunction]

^
elks/fs/open.c:151:0: style: The function 'sys_utime' is never used. [unusedFunction]

^
elks/kernel/fork.c:137:0: style: The function 'sys_vfork' is never used. [unusedFunction]

^
elks/kernel/exit.c:41:0: style: The function 'sys_wait4' is never used. [unusedFunction]

^
elks/fs/read_write.c:102:0: style: The function 'sys_write' is never used. [unusedFunction]

^
elks/tools/elks-compress/exomizer/src/table.c:186:0: style: The function 'table_fprint' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/tail.c:88:0: style: The function 'tail_main' is never used. [unusedFunction]

^
libc/math/s_tan.c:54:0: style: The function 'tan' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/tar.c:57:0: style: The function 'tar_main' is never used. [unusedFunction]

^
libc/termios/tcdrain.c:6:0: style: The function 'tcdrain' is never used. [unusedFunction]

^
libc/termios/tcflow.c:5:0: style: The function 'tcflow' is never used. [unusedFunction]

^
libc/termios/tcgetpgrp.c:6:0: style: The function 'tcgetpgrp' is never used. [unusedFunction]

^
libc/termios/tcsetpgrp.c:5:0: style: The function 'tcsetpgrp' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/tee.c:15:0: style: The function 'tee_main' is never used. [unusedFunction]

^
elkscmd/test/libc/inet.c:42:0: style: The function 'test_inet_resolv' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/test.c:311:0: style: The function 'test_main' is never used. [unusedFunction]

^
elkscmd/test/libc/misc.c:113:0: style: The function 'test_misc_getopt' is never used. [unusedFunction]

^
elkscmd/test/libc/string.c:187:0: style: The function 'test_string_fmemset' is never used. [unusedFunction]

^
elkscmd/test/libc/string.c:149:0: style: The function 'test_string_memccpy' is never used. [unusedFunction]

^
elkscmd/test/libc/string.c:179:0: style: The function 'test_string_memcmp' is never used. [unusedFunction]

^
elkscmd/test/libc/string.c:145:0: style: The function 'test_string_memcpy' is never used. [unusedFunction]

^
elkscmd/test/libc/string.c:183:0: style: The function 'test_string_memmove' is never used. [unusedFunction]

^
elkscmd/test/libc/string.c:175:0: style: The function 'test_string_memset' is never used. [unusedFunction]

^
elkscmd/test/libc/string.c:195:0: style: The function 'test_string_strcasecmp' is never used. [unusedFunction]

^
elkscmd/test/libc/string.c:133:0: style: The function 'test_string_strchr' is never used. [unusedFunction]

^
elkscmd/test/libc/string.c:215:0: style: The function 'test_string_strcspn' is never used. [unusedFunction]

^
elkscmd/test/libc/string.c:141:0: style: The function 'test_string_strdup' is never used. [unusedFunction]

^
elkscmd/test/libc/string.c:191:0: style: The function 'test_string_strerror' is never used. [unusedFunction]

^
elkscmd/test/libc/string.c:223:0: style: The function 'test_string_strfry' is never used. [unusedFunction]

^
elkscmd/test/libc/string.c:199:0: style: The function 'test_string_strncasecmp' is never used. [unusedFunction]

^
elkscmd/test/libc/string.c:207:0: style: The function 'test_string_strpbrk' is never used. [unusedFunction]

^
elkscmd/test/libc/string.c:137:0: style: The function 'test_string_strrchr' is never used. [unusedFunction]

^
elkscmd/test/libc/string.c:211:0: style: The function 'test_string_strsep' is never used. [unusedFunction]

^
elkscmd/test/libc/string.c:219:0: style: The function 'test_string_strspn' is never used. [unusedFunction]

^
elkscmd/test/libc/string.c:129:0: style: The function 'test_string_strstr' is never used. [unusedFunction]

^
elkscmd/test/libc/string.c:203:0: style: The function 'test_string_strtok' is never used. [unusedFunction]

^
elkscmd/test/libc/system.c:82:0: style: The function 'test_system_fcntl' is never used. [unusedFunction]

^
elkscmd/test/libc/system.c:92:0: style: The function 'test_system_fifo' is never used. [unusedFunction]

^
elkscmd/test/libc/system.c:77:0: style: The function 'test_system_scandir' is never used. [unusedFunction]

^
elkscmd/test/libc/system.c:87:0: style: The function 'test_system_signal' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/touch.c:7:0: style: The function 'touch_main' is never used. [unusedFunction]

^
libc/termcap/tparam.c:40:0: style: The function 'tparam' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/tr.c:197:0: style: The function 'tr_main' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/tr.c:40:0: style: The function 'tr_usage' is never used. [unusedFunction]

^
elkscmd/ash/miscbltin.c:148:0: style: The function 'umaskcmd' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/umount.c:20:0: style: The function 'umount_main' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/uname.c:27:0: style: The function 'uname_main' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/uniq.c:49:0: style: The function 'uniq_main' is never used. [unusedFunction]

^
elkscmd/nano/nano-2.0.6/src/chars.c:47:0: style: The function 'utf8_init' is never used. [unusedFunction]

^
libc/getent/utent.c:141:0: style: The function 'utmpname' is never used. [unusedFunction]

^
elkscmd/elvis/pc.c:62:0: style: The function 'v_cb' is never used. [unusedFunction]

^
elkscmd/elvis/pc.c:104:0: style: The function 'v_cd' is never used. [unusedFunction]

^
elkscmd/elvis/pc.c:94:0: style: The function 'v_cl' is never used. [unusedFunction]

^
elkscmd/elvis/pc.c:178:0: style: The function 'v_cols' is never used. [unusedFunction]

^
elkscmd/elvis/pc.c:71:0: style: The function 'v_cs' is never used. [unusedFunction]

^
elkscmd/elvis/pc.c:203:0: style: The function 'v_rows' is never used. [unusedFunction]

^
elks/tools/elks-compress/exomizer/src/vec.c:245:0: style: The function 'vec_equals' is never used. [unusedFunction]

^
elks/tools/elks-compress/exomizer/src/vec.c:229:0: style: The function 'vec_fprint' is never used. [unusedFunction]

^
libc/stdio/vprintf.c:5:0: style: The function 'vprintf' is never used. [unusedFunction]

^
libc/stdio/vscanf.c:5:0: style: The function 'vscanf' is never used. [unusedFunction]

^
libc/stdio/vsscanf.c:4:0: style: The function 'vsscanf' is never used. [unusedFunction]

^
elks/kernel/unused/lock.c:16:0: style: The function 'wait_lock' is never used. [unusedFunction]

^
elkscmd/ash/jobs.c:334:0: style: The function 'waitcmd' is never used. [unusedFunction]

^
elkscmd/bc/util.c:576:0: style: The function 'warranty' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/wc.c:46:0: style: The function 'wc_main' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/which.c:7:0: style: The function 'which_main' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/who.c:24:0: style: The function 'who_main' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/whoami.c:5:0: style: The function 'whoami_main' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/write.c:34:0: style: The function 'write_main' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/write.c:28:0: style: The function 'write_usage' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/xargs.c:220:0: style: The function 'xargs_main' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/xargs.c:50:0: style: The function 'xargs_usage' is never used. [unusedFunction]

^
elkscmd/ash/output.c:529:0: style: The function 'xioctl' is never used. [unusedFunction]

^
elkscmd/busyelks/cmd/yes.c:9:0: style: The function 'yes_main' is never used. [unusedFunction]

^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingInclude]

